!(function () {
  try {
    var e =
        "undefined" != typeof window
          ? window
          : "undefined" != typeof global
            ? global
            : "undefined" != typeof self
              ? self
              : {},
      r = new e.Error().stack;
    r &&
      ((e._sentryDebugIds = e._sentryDebugIds || {}),
      (e._sentryDebugIds[r] = "8249a4fa-d641-4d3d-a181-8f4faff909b4"),
      (e._sentryDebugIdIdentifier =
        "sentry-dbid-8249a4fa-d641-4d3d-a181-8f4faff909b4"));
  } catch (e) {}
})();
var _global =
  "undefined" != typeof window
    ? window
    : "undefined" != typeof global
      ? global
      : "undefined" != typeof self
        ? self
        : {};
(_global.SENTRY_RELEASE = { id: "e9f83a1a7d99e143495c7f8fd098e5ce2321d692" }),
  (() => {
    var e = {
        36518: function (e, r) {
          var s, A;
          "undefined" != typeof globalThis
            ? globalThis
            : "undefined" != typeof self && self,
            (s = function (e) {
              "use strict";
              if (
                !(
                  globalThis.chrome &&
                  globalThis.chrome.runtime &&
                  globalThis.chrome.runtime.id
                )
              )
                throw new Error(
                  "This script should only be loaded in a browser extension.",
                );
              if (
                globalThis.browser &&
                globalThis.browser.runtime &&
                globalThis.browser.runtime.id
              )
                e.exports = globalThis.browser;
              else {
                const r =
                    "The message port closed before a response was received.",
                  s = (e) => {
                    const s = {
                      alarms: {
                        clear: { minArgs: 0, maxArgs: 1 },
                        clearAll: { minArgs: 0, maxArgs: 0 },
                        get: { minArgs: 0, maxArgs: 1 },
                        getAll: { minArgs: 0, maxArgs: 0 },
                      },
                      bookmarks: {
                        create: { minArgs: 1, maxArgs: 1 },
                        get: { minArgs: 1, maxArgs: 1 },
                        getChildren: { minArgs: 1, maxArgs: 1 },
                        getRecent: { minArgs: 1, maxArgs: 1 },
                        getSubTree: { minArgs: 1, maxArgs: 1 },
                        getTree: { minArgs: 0, maxArgs: 0 },
                        move: { minArgs: 2, maxArgs: 2 },
                        remove: { minArgs: 1, maxArgs: 1 },
                        removeTree: { minArgs: 1, maxArgs: 1 },
                        search: { minArgs: 1, maxArgs: 1 },
                        update: { minArgs: 2, maxArgs: 2 },
                      },
                      browserAction: {
                        disable: {
                          minArgs: 0,
                          maxArgs: 1,
                          fallbackToNoCallback: !0,
                        },
                        enable: {
                          minArgs: 0,
                          maxArgs: 1,
                          fallbackToNoCallback: !0,
                        },
                        getBadgeBackgroundColor: { minArgs: 1, maxArgs: 1 },
                        getBadgeText: { minArgs: 1, maxArgs: 1 },
                        getPopup: { minArgs: 1, maxArgs: 1 },
                        getTitle: { minArgs: 1, maxArgs: 1 },
                        openPopup: { minArgs: 0, maxArgs: 0 },
                        setBadgeBackgroundColor: {
                          minArgs: 1,
                          maxArgs: 1,
                          fallbackToNoCallback: !0,
                        },
                        setBadgeText: {
                          minArgs: 1,
                          maxArgs: 1,
                          fallbackToNoCallback: !0,
                        },
                        setIcon: { minArgs: 1, maxArgs: 1 },
                        setPopup: {
                          minArgs: 1,
                          maxArgs: 1,
                          fallbackToNoCallback: !0,
                        },
                        setTitle: {
                          minArgs: 1,
                          maxArgs: 1,
                          fallbackToNoCallback: !0,
                        },
                      },
                      browsingData: {
                        remove: { minArgs: 2, maxArgs: 2 },
                        removeCache: { minArgs: 1, maxArgs: 1 },
                        removeCookies: { minArgs: 1, maxArgs: 1 },
                        removeDownloads: { minArgs: 1, maxArgs: 1 },
                        removeFormData: { minArgs: 1, maxArgs: 1 },
                        removeHistory: { minArgs: 1, maxArgs: 1 },
                        removeLocalStorage: { minArgs: 1, maxArgs: 1 },
                        removePasswords: { minArgs: 1, maxArgs: 1 },
                        removePluginData: { minArgs: 1, maxArgs: 1 },
                        settings: { minArgs: 0, maxArgs: 0 },
                      },
                      commands: { getAll: { minArgs: 0, maxArgs: 0 } },
                      contextMenus: {
                        remove: { minArgs: 1, maxArgs: 1 },
                        removeAll: { minArgs: 0, maxArgs: 0 },
                        update: { minArgs: 2, maxArgs: 2 },
                      },
                      cookies: {
                        get: { minArgs: 1, maxArgs: 1 },
                        getAll: { minArgs: 1, maxArgs: 1 },
                        getAllCookieStores: { minArgs: 0, maxArgs: 0 },
                        remove: { minArgs: 1, maxArgs: 1 },
                        set: { minArgs: 1, maxArgs: 1 },
                      },
                      devtools: {
                        inspectedWindow: {
                          eval: {
                            minArgs: 1,
                            maxArgs: 2,
                            singleCallbackArg: !1,
                          },
                        },
                        panels: {
                          create: {
                            minArgs: 3,
                            maxArgs: 3,
                            singleCallbackArg: !0,
                          },
                          elements: {
                            createSidebarPane: { minArgs: 1, maxArgs: 1 },
                          },
                        },
                      },
                      downloads: {
                        cancel: { minArgs: 1, maxArgs: 1 },
                        download: { minArgs: 1, maxArgs: 1 },
                        erase: { minArgs: 1, maxArgs: 1 },
                        getFileIcon: { minArgs: 1, maxArgs: 2 },
                        open: {
                          minArgs: 1,
                          maxArgs: 1,
                          fallbackToNoCallback: !0,
                        },
                        pause: { minArgs: 1, maxArgs: 1 },
                        removeFile: { minArgs: 1, maxArgs: 1 },
                        resume: { minArgs: 1, maxArgs: 1 },
                        search: { minArgs: 1, maxArgs: 1 },
                        show: {
                          minArgs: 1,
                          maxArgs: 1,
                          fallbackToNoCallback: !0,
                        },
                      },
                      extension: {
                        isAllowedFileSchemeAccess: { minArgs: 0, maxArgs: 0 },
                        isAllowedIncognitoAccess: { minArgs: 0, maxArgs: 0 },
                      },
                      history: {
                        addUrl: { minArgs: 1, maxArgs: 1 },
                        deleteAll: { minArgs: 0, maxArgs: 0 },
                        deleteRange: { minArgs: 1, maxArgs: 1 },
                        deleteUrl: { minArgs: 1, maxArgs: 1 },
                        getVisits: { minArgs: 1, maxArgs: 1 },
                        search: { minArgs: 1, maxArgs: 1 },
                      },
                      i18n: {
                        detectLanguage: { minArgs: 1, maxArgs: 1 },
                        getAcceptLanguages: { minArgs: 0, maxArgs: 0 },
                      },
                      identity: {
                        launchWebAuthFlow: { minArgs: 1, maxArgs: 1 },
                      },
                      idle: { queryState: { minArgs: 1, maxArgs: 1 } },
                      management: {
                        get: { minArgs: 1, maxArgs: 1 },
                        getAll: { minArgs: 0, maxArgs: 0 },
                        getSelf: { minArgs: 0, maxArgs: 0 },
                        setEnabled: { minArgs: 2, maxArgs: 2 },
                        uninstallSelf: { minArgs: 0, maxArgs: 1 },
                      },
                      notifications: {
                        clear: { minArgs: 1, maxArgs: 1 },
                        create: { minArgs: 1, maxArgs: 2 },
                        getAll: { minArgs: 0, maxArgs: 0 },
                        getPermissionLevel: { minArgs: 0, maxArgs: 0 },
                        update: { minArgs: 2, maxArgs: 2 },
                      },
                      pageAction: {
                        getPopup: { minArgs: 1, maxArgs: 1 },
                        getTitle: { minArgs: 1, maxArgs: 1 },
                        hide: {
                          minArgs: 1,
                          maxArgs: 1,
                          fallbackToNoCallback: !0,
                        },
                        setIcon: { minArgs: 1, maxArgs: 1 },
                        setPopup: {
                          minArgs: 1,
                          maxArgs: 1,
                          fallbackToNoCallback: !0,
                        },
                        setTitle: {
                          minArgs: 1,
                          maxArgs: 1,
                          fallbackToNoCallback: !0,
                        },
                        show: {
                          minArgs: 1,
                          maxArgs: 1,
                          fallbackToNoCallback: !0,
                        },
                      },
                      permissions: {
                        contains: { minArgs: 1, maxArgs: 1 },
                        getAll: { minArgs: 0, maxArgs: 0 },
                        remove: { minArgs: 1, maxArgs: 1 },
                        request: { minArgs: 1, maxArgs: 1 },
                      },
                      runtime: {
                        getBackgroundPage: { minArgs: 0, maxArgs: 0 },
                        getPlatformInfo: { minArgs: 0, maxArgs: 0 },
                        openOptionsPage: { minArgs: 0, maxArgs: 0 },
                        requestUpdateCheck: { minArgs: 0, maxArgs: 0 },
                        sendMessage: { minArgs: 1, maxArgs: 3 },
                        sendNativeMessage: { minArgs: 2, maxArgs: 2 },
                        setUninstallURL: { minArgs: 1, maxArgs: 1 },
                      },
                      sessions: {
                        getDevices: { minArgs: 0, maxArgs: 1 },
                        getRecentlyClosed: { minArgs: 0, maxArgs: 1 },
                        restore: { minArgs: 0, maxArgs: 1 },
                      },
                      storage: {
                        local: {
                          clear: { minArgs: 0, maxArgs: 0 },
                          get: { minArgs: 0, maxArgs: 1 },
                          getBytesInUse: { minArgs: 0, maxArgs: 1 },
                          remove: { minArgs: 1, maxArgs: 1 },
                          set: { minArgs: 1, maxArgs: 1 },
                        },
                        managed: {
                          get: { minArgs: 0, maxArgs: 1 },
                          getBytesInUse: { minArgs: 0, maxArgs: 1 },
                        },
                        sync: {
                          clear: { minArgs: 0, maxArgs: 0 },
                          get: { minArgs: 0, maxArgs: 1 },
                          getBytesInUse: { minArgs: 0, maxArgs: 1 },
                          remove: { minArgs: 1, maxArgs: 1 },
                          set: { minArgs: 1, maxArgs: 1 },
                        },
                      },
                      tabs: {
                        captureVisibleTab: { minArgs: 0, maxArgs: 2 },
                        create: { minArgs: 1, maxArgs: 1 },
                        detectLanguage: { minArgs: 0, maxArgs: 1 },
                        discard: { minArgs: 0, maxArgs: 1 },
                        duplicate: { minArgs: 1, maxArgs: 1 },
                        executeScript: { minArgs: 1, maxArgs: 2 },
                        get: { minArgs: 1, maxArgs: 1 },
                        getCurrent: { minArgs: 0, maxArgs: 0 },
                        getZoom: { minArgs: 0, maxArgs: 1 },
                        getZoomSettings: { minArgs: 0, maxArgs: 1 },
                        goBack: { minArgs: 0, maxArgs: 1 },
                        goForward: { minArgs: 0, maxArgs: 1 },
                        highlight: { minArgs: 1, maxArgs: 1 },
                        insertCSS: { minArgs: 1, maxArgs: 2 },
                        move: { minArgs: 2, maxArgs: 2 },
                        query: { minArgs: 1, maxArgs: 1 },
                        reload: { minArgs: 0, maxArgs: 2 },
                        remove: { minArgs: 1, maxArgs: 1 },
                        removeCSS: { minArgs: 1, maxArgs: 2 },
                        sendMessage: { minArgs: 2, maxArgs: 3 },
                        setZoom: { minArgs: 1, maxArgs: 2 },
                        setZoomSettings: { minArgs: 1, maxArgs: 2 },
                        update: { minArgs: 1, maxArgs: 2 },
                      },
                      topSites: { get: { minArgs: 0, maxArgs: 0 } },
                      webNavigation: {
                        getAllFrames: { minArgs: 1, maxArgs: 1 },
                        getFrame: { minArgs: 1, maxArgs: 1 },
                      },
                      webRequest: {
                        handlerBehaviorChanged: { minArgs: 0, maxArgs: 0 },
                      },
                      windows: {
                        create: { minArgs: 0, maxArgs: 1 },
                        get: { minArgs: 1, maxArgs: 2 },
                        getAll: { minArgs: 0, maxArgs: 1 },
                        getCurrent: { minArgs: 0, maxArgs: 1 },
                        getLastFocused: { minArgs: 0, maxArgs: 1 },
                        remove: { minArgs: 1, maxArgs: 1 },
                        update: { minArgs: 2, maxArgs: 2 },
                      },
                    };
                    if (0 === Object.keys(s).length)
                      throw new Error(
                        "api-metadata.json has not been included in browser-polyfill",
                      );
                    class A extends WeakMap {
                      constructor(e, r = void 0) {
                        super(r), (this.createItem = e);
                      }
                      get(e) {
                        return (
                          this.has(e) || this.set(e, this.createItem(e)),
                          super.get(e)
                        );
                      }
                    }
                    const g =
                        (r, s) =>
                        (...A) => {
                          e.runtime.lastError
                            ? r.reject(new Error(e.runtime.lastError.message))
                            : s.singleCallbackArg ||
                                (A.length <= 1 && !1 !== s.singleCallbackArg)
                              ? r.resolve(A[0])
                              : r.resolve(A);
                        },
                      a = (e) => (1 == e ? "argument" : "arguments"),
                      n = (e, r, s) =>
                        new Proxy(r, {
                          apply: (r, A, g) => s.call(A, e, ...g),
                        });
                    let m = Function.call.bind(Object.prototype.hasOwnProperty);
                    const t = (e, r = {}, s = {}) => {
                        let A = Object.create(null),
                          i = {
                            has: (r, s) => s in e || s in A,
                            get(i, o, l) {
                              if (o in A) return A[o];
                              if (!(o in e)) return;
                              let E = e[o];
                              if ("function" == typeof E)
                                if ("function" == typeof r[o])
                                  E = n(e, e[o], r[o]);
                                else if (m(s, o)) {
                                  let r = ((e, r) =>
                                    function (s, ...A) {
                                      if (A.length < r.minArgs)
                                        throw new Error(
                                          `Expected at least ${r.minArgs} ${a(r.minArgs)} for ${e}(), got ${A.length}`,
                                        );
                                      if (A.length > r.maxArgs)
                                        throw new Error(
                                          `Expected at most ${r.maxArgs} ${a(r.maxArgs)} for ${e}(), got ${A.length}`,
                                        );
                                      return new Promise((a, n) => {
                                        if (r.fallbackToNoCallback)
                                          try {
                                            s[e](
                                              ...A,
                                              g({ resolve: a, reject: n }, r),
                                            );
                                          } catch (g) {
                                            console.warn(
                                              `${e} API method doesn't seem to support the callback parameter, falling back to call it without a callback: `,
                                              g,
                                            ),
                                              s[e](...A),
                                              (r.fallbackToNoCallback = !1),
                                              (r.noCallback = !0),
                                              a();
                                          }
                                        else
                                          r.noCallback
                                            ? (s[e](...A), a())
                                            : s[e](
                                                ...A,
                                                g({ resolve: a, reject: n }, r),
                                              );
                                      });
                                    })(o, s[o]);
                                  E = n(e, e[o], r);
                                } else E = E.bind(e);
                              else if (
                                "object" == typeof E &&
                                null !== E &&
                                (m(r, o) || m(s, o))
                              )
                                E = t(E, r[o], s[o]);
                              else {
                                if (!m(s, "*"))
                                  return (
                                    Object.defineProperty(A, o, {
                                      configurable: !0,
                                      enumerable: !0,
                                      get: () => e[o],
                                      set(r) {
                                        e[o] = r;
                                      },
                                    }),
                                    E
                                  );
                                E = t(E, r[o], s["*"]);
                              }
                              return (A[o] = E), E;
                            },
                            set: (r, s, g, a) => (
                              s in A ? (A[s] = g) : (e[s] = g), !0
                            ),
                            defineProperty: (e, r, s) =>
                              Reflect.defineProperty(A, r, s),
                            deleteProperty: (e, r) =>
                              Reflect.deleteProperty(A, r),
                          },
                          o = Object.create(e);
                        return new Proxy(o, i);
                      },
                      i = (e) => ({
                        addListener(r, s, ...A) {
                          r.addListener(e.get(s), ...A);
                        },
                        hasListener: (r, s) => r.hasListener(e.get(s)),
                        removeListener(r, s) {
                          r.removeListener(e.get(s));
                        },
                      }),
                      o = new A((e) =>
                        "function" != typeof e
                          ? e
                          : function (r) {
                              const s = t(
                                r,
                                {},
                                { getContent: { minArgs: 0, maxArgs: 0 } },
                              );
                              e(s);
                            },
                      ),
                      l = new A((e) =>
                        "function" != typeof e
                          ? e
                          : function (r, s, A) {
                              let g,
                                a,
                                n = !1,
                                m = new Promise((e) => {
                                  g = function (r) {
                                    (n = !0), e(r);
                                  };
                                });
                              try {
                                a = e(r, s, g);
                              } catch (e) {
                                a = Promise.reject(e);
                              }
                              const t =
                                !0 !== a &&
                                (i = a) &&
                                "object" == typeof i &&
                                "function" == typeof i.then;
                              var i;
                              if (!0 !== a && !t && !n) return !1;
                              return (
                                (t ? a : m)
                                  .then(
                                    (e) => {
                                      A(e);
                                    },
                                    (e) => {
                                      let r;
                                      (r =
                                        e &&
                                        (e instanceof Error ||
                                          "string" == typeof e.message)
                                          ? e.message
                                          : "An unexpected error occurred"),
                                        A({
                                          __mozWebExtensionPolyfillReject__: !0,
                                          message: r,
                                        });
                                    },
                                  )
                                  .catch((e) => {
                                    console.error(
                                      "Failed to send onMessage rejected reply",
                                      e,
                                    );
                                  }),
                                !0
                              );
                            },
                      ),
                      E = ({ reject: s, resolve: A }, g) => {
                        e.runtime.lastError
                          ? e.runtime.lastError.message === r
                            ? A()
                            : s(new Error(e.runtime.lastError.message))
                          : g && g.__mozWebExtensionPolyfillReject__
                            ? s(new Error(g.message))
                            : A(g);
                      },
                      T = (e, r, s, ...A) => {
                        if (A.length < r.minArgs)
                          throw new Error(
                            `Expected at least ${r.minArgs} ${a(r.minArgs)} for ${e}(), got ${A.length}`,
                          );
                        if (A.length > r.maxArgs)
                          throw new Error(
                            `Expected at most ${r.maxArgs} ${a(r.maxArgs)} for ${e}(), got ${A.length}`,
                          );
                        return new Promise((e, r) => {
                          const g = E.bind(null, { resolve: e, reject: r });
                          A.push(g), s.sendMessage(...A);
                        });
                      },
                      _ = {
                        devtools: { network: { onRequestFinished: i(o) } },
                        runtime: {
                          onMessage: i(l),
                          onMessageExternal: i(l),
                          sendMessage: T.bind(null, "sendMessage", {
                            minArgs: 1,
                            maxArgs: 3,
                          }),
                        },
                        tabs: {
                          sendMessage: T.bind(null, "sendMessage", {
                            minArgs: 2,
                            maxArgs: 3,
                          }),
                        },
                      },
                      c = {
                        clear: { minArgs: 1, maxArgs: 1 },
                        get: { minArgs: 1, maxArgs: 1 },
                        set: { minArgs: 1, maxArgs: 1 },
                      };
                    return (
                      (s.privacy = {
                        network: { "*": c },
                        services: { "*": c },
                        websites: { "*": c },
                      }),
                      t(e, _, s)
                    );
                  };
                e.exports = s(chrome);
              }
            }),
            void 0 === (A = s.apply(r, [e])) || (e.exports = A);
        },
      },
      r = {};
    function s(A) {
      var g = r[A];
      if (void 0 !== g) return g.exports;
      var a = (r[A] = { exports: {} });
      return e[A].call(a.exports, a, a.exports, s), a.exports;
    }
    (s.n = (e) => {
      var r = e && e.__esModule ? () => e.default : () => e;
      return s.d(r, { a: r }), r;
    }),
      (s.d = (e, r) => {
        for (var A in r)
          s.o(r, A) &&
            !s.o(e, A) &&
            Object.defineProperty(e, A, { enumerable: !0, get: r[A] });
      }),
      (s.o = (e, r) => Object.prototype.hasOwnProperty.call(e, r)),
      (() => {
        "use strict";
        var e,
          r,
          A = s(36518),
          g = s.n(A);
        !(function (e) {
          (e.CREATE_ACCOUNT = "CREATE_ACCOUNT"),
            (e.FUND_ACCOUNT = "FUND_ACCOUNT"),
            (e.ADD_ACCOUNT = "ADD_ACCOUNT"),
            (e.IMPORT_ACCOUNT = "IMPORT_ACCOUNT"),
            (e.IMPORT_HARDWARE_WALLET = "IMPORT_HARDWARE_WALLET"),
            (e.LOAD_ACCOUNT = "LOAD_ACCOUNT"),
            (e.MAKE_ACCOUNT_ACTIVE = "MAKE_ACCOUNT_ACTIVE"),
            (e.UPDATE_ACCOUNT_NAME = "UPDATE_ACCOUNT_NAME"),
            (e.GET_MNEMONIC_PHRASE = "GET_MNEMONIC_PHRASE"),
            (e.CONFIRM_MNEMONIC_PHRASE = "CONFIRM_MNEMONIC_PHRASE"),
            (e.CONFIRM_MIGRATED_MNEMONIC_PHRASE =
              "CONFIRM_MIGRATED_MNEMONIC_PHRASE"),
            (e.RECOVER_ACCOUNT = "RECOVER_ACCOUNT"),
            (e.CONFIRM_PASSWORD = "CONFIRM_PASSWORD"),
            (e.REJECT_ACCESS = "REJECT_ACCESS"),
            (e.GRANT_ACCESS = "GRANT_ACCESS"),
            (e.SIGN_TRANSACTION = "SIGN_TRANSACTION"),
            (e.SIGN_BLOB = "SIGN_BLOB"),
            (e.SIGN_AUTH_ENTRY = "SIGN_AUTH_ENTRY"),
            (e.HANDLE_SIGNED_HW_PAYLOAD = "HANDLE_SIGNED_HW_PAYLOAD"),
            (e.REJECT_TRANSACTION = "REJECT_TRANSACTION"),
            (e.SIGN_FREIGHTER_TRANSACTION = "SIGN_FREIGHTER_TRANSACTION"),
            (e.SIGN_FREIGHTER_SOROBAN_TRANSACTION =
              "SIGN_FREIGHTER_SOROBAN_TRANSACTION"),
            (e.ADD_RECENT_ADDRESS = "ADD_RECENT_ADDRESS"),
            (e.LOAD_RECENT_ADDRESSES = "LOAD_RECENT_ADDRESSES"),
            (e.LOAD_LAST_USED_ACCOUNT = "LOAD_LAST_USED_ACCOUNT"),
            (e.SIGN_OUT = "SIGN_OUT"),
            (e.SHOW_BACKUP_PHRASE = "SHOW_BACKUP_PHRASE"),
            (e.SAVE_ALLOWLIST = "SAVE_ALLOWLIST"),
            (e.SAVE_SETTINGS = "SAVE_SETTINGS"),
            (e.SAVE_EXPERIMENTAL_FEATURES = "SAVE_EXPERIMENTAL_FEATURES"),
            (e.LOAD_SETTINGS = "LOAD_SETTINGS"),
            (e.GET_CACHED_ASSET_ICON = "GET_CACHED_ASSET_ICON"),
            (e.CACHE_ASSET_ICON = "CACHE_ASSET_ICON"),
            (e.GET_CACHED_ASSET_DOMAIN = "GET_CACHED_ASSET_DOMAIN"),
            (e.CACHE_ASSET_DOMAIN = "CACHE_ASSET_DOMAIN"),
            (e.GET_MEMO_REQUIRED_ACCOUNTS = "GET_MEMO_REQUIRED_ACCOUNTS"),
            (e.ADD_CUSTOM_NETWORK = "ADD_CUSTOM_NETWORK"),
            (e.CHANGE_NETWORK = "CHANGE_NETWORK"),
            (e.REMOVE_CUSTOM_NETWORK = "REMOVE_CUSTOM_NETWORK"),
            (e.EDIT_CUSTOM_NETWORK = "EDIT_CUSTOM_NETWORK"),
            (e.RESET_EXP_DATA = "RESET_EXP_DATA"),
            (e.ADD_TOKEN_ID = "ADD_TOKEN_ID"),
            (e.GET_TOKEN_IDS = "GET_TOKEN_IDS"),
            (e.REMOVE_TOKEN_ID = "REMOVE_TOKEN_ID"),
            (e.GET_MIGRATABLE_ACCOUNTS = "GET_MIGRATABLE_ACCOUNTS"),
            (e.GET_MIGRATED_MNEMONIC_PHRASE = "GET_MIGRATED_MNEMONIC_PHRASE"),
            (e.MIGRATE_ACCOUNTS = "MIGRATE_ACCOUNTS"),
            (e.ADD_ASSETS_LIST = "ADD_ASSETS_LIST"),
            (e.MODIFY_ASSETS_LIST = "MODIFY_ASSETS_LIST");
        })(e || (e = {})),
          (function (e) {
            (e.REQUEST_ACCESS = "REQUEST_ACCESS"),
              (e.REQUEST_PUBLIC_KEY = "REQUEST_PUBLIC_KEY"),
              (e.SUBMIT_TRANSACTION = "SUBMIT_TRANSACTION"),
              (e.SUBMIT_BLOB = "SUBMIT_BLOB"),
              (e.SUBMIT_AUTH_ENTRY = "SUBMIT_AUTH_ENTRY"),
              (e.REQUEST_NETWORK = "REQUEST_NETWORK"),
              (e.REQUEST_NETWORK_DETAILS = "REQUEST_NETWORK_DETAILS"),
              (e.REQUEST_CONNECTION_STATUS = "REQUEST_CONNECTION_STATUS"),
              (e.REQUEST_ALLOWED_STATUS = "REQUEST_ALLOWED_STATUS"),
              (e.SET_ALLOWED_STATUS = "SET_ALLOWED_STATUS"),
              (e.REQUEST_USER_INFO = "REQUEST_USER_INFO");
          })(r || (r = {})),
          window.addEventListener(
            "message",
            async (e) => {
              var s;
              const A =
                (null === (s = null == e ? void 0 : e.data) || void 0 === s
                  ? void 0
                  : s.messageId) || 0;
              if (e.source !== window) return;
              if (!Object.keys(r).includes(e.data.type)) return;
              if (
                !e.data.source ||
                "FREIGHTER_EXTERNAL_MSG_REQUEST" !== e.data.source
              )
                return;
              let a = { error: "Unable to send message to extension" };
              try {
                a = await g().runtime.sendMessage(e.data);
              } catch (e) {
                console.error(e);
              }
              window.postMessage(
                {
                  source: "FREIGHTER_EXTERNAL_MSG_RESPONSE",
                  messagedId: A,
                  ...a,
                },
                window.location.origin,
              );
            },
            !1,
          );
      })();
  })();
//# sourceMappingURL=contentScript.min.js.map
