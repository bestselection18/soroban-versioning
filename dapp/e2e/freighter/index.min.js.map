{"version":3,"file":"index.min.js","mappings":"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","sources":["webpack://extension/webpack/runtime/chunk loaded","webpack://extension/webpack/runtime/create fake namespace object","webpack://extension/webpack/runtime/load script","webpack://extension/./src/popup/locales/ lazy ^\\.\\/.*\\/.*\\.json$ namespace object","webpack://extension/./src/constants/localStorageTypes.ts","webpack://extension/../@shared/constants/mercury.ts","webpack://extension/../@shared/constants/stellar.ts","webpack://extension/../@shared/helpers/stellar.ts","webpack://extension/../@shared/helpers/soroban/server.ts","webpack://extension/../@shared/constants/errors.ts","webpack://extension/../@shared/helpers/soroban/token.ts","webpack://extension/../@shared/api/helpers/soroban.ts","webpack://extension/../@shared/api/types.ts","webpack://extension/../@shared/constants/services.ts","webpack://extension/../@shared/constants/applicationState.ts","webpack://extension/../@shared/api/helpers/extensionMessaging.ts","webpack://extension/../@shared/api/helpers/stellarSdkServer.ts","webpack://extension/../@shared/api/helpers/getIconUrlFromIssuer.ts","webpack://extension/../@shared/api/helpers/getDomainFromIssuer.ts","webpack://extension/../@shared/api/internal.ts","webpack://extension/../@shared/constants/soroban/token.ts","webpack://extension/./src/popup/helpers/soroban.ts","webpack://extension/./src/popup/helpers/account.ts","webpack://extension/./src/helpers/urls.ts","webpack://extension/./src/helpers/stellar.ts","webpack://extension/./src/popup/ducks/settings.ts","webpack://extension/./src/helpers/metrics.ts","webpack://extension/./src/constants/env.ts","webpack://extension/../@shared/constants/hardwareWallet.ts","webpack://extension/./src/popup/ducks/accountServices.ts","webpack://extension/./src/popup/constants/metricsNames.ts","webpack://extension/./src/popup/helpers/formatters.ts","webpack://extension/./src/popup/helpers/hardwareConnect.ts","webpack://extension/./src/popup/ducks/transactionSubmission.ts","webpack://extension/./src/popup/helpers/sorobanSwap.ts","webpack://extension/./src/popup/helpers/horizonGetBestPath.ts","webpack://extension/./src/popup/ducks/token-payment.ts","webpack://extension/./src/popup/basics/buttons/BackButton/index.tsx","webpack://extension/./src/popup/helpers/addStyleClasses.ts","webpack://extension/./src/popup/basics/layout/View/index.tsx","webpack://extension/./src/popup/components/Loading/index.tsx","webpack://extension/./src/popup/components/ErrorTracking/index.tsx","webpack://extension/./src/popup/components/ErrorBoundary/index.tsx","webpack://extension/./src/constants/dimensions.ts","webpack://extension/./src/popup/constants/history.ts","webpack://extension/./src/popup/helpers/navigate.ts","webpack://extension/./src/popup/constants/routes.ts","webpack://extension/./src/popup/ducks/views.ts","webpack://extension/./src/popup/components/AppError/index.tsx","webpack://extension/./src/popup/helpers/useIsSwap.ts","webpack://extension/./src/popup/helpers/fetch.ts","webpack://extension/./src/popup/helpers/blockaid.ts","webpack://extension/./src/popup/components/account/ScamAssetIcon/index.tsx","webpack://extension/./src/popup/assets/image-missing.svg","webpack://extension/./src/popup/assets/icon-soroban.svg","webpack://extension/./src/popup/components/account/AccountAssets/index.tsx","webpack://extension/./src/popup/basics/LoadingBackground/index.tsx","webpack://extension/./src/popup/components/identicons/IdenticonImg/index.tsx","webpack://extension/./src/popup/components/identicons/AccountListIdenticon/index.tsx","webpack://extension/./src/popup/components/account/AccountList/index.tsx","webpack://extension/./src/popup/components/account/AccountHeaderModal/index.tsx","webpack://extension/./src/popup/components/manageNetwork/NetworkIcon/index.tsx","webpack://extension/./src/popup/components/account/AccountHeader/index.tsx","webpack://extension/./src/popup/components/account/AccountOptionsDropdown/index.tsx","webpack://extension/./src/popup/helpers/useAssetDomain.ts","webpack://extension/./src/constants/transaction.ts","webpack://extension/./src/popup/components/accountHistory/HistoryItem/index.tsx","webpack://extension/./src/popup/helpers/balance.ts","webpack://extension/./src/popup/components/accountHistory/HistoryList/index.tsx","webpack://extension/./src/popup/components/CopyValue/index.tsx","webpack://extension/./src/popup/components/accountHistory/AssetNetworkInfo/index.tsx","webpack://extension/./src/popup/components/identicons/KeyIdenticon/index.tsx","webpack://extension/./src/popup/components/SubviewHeader/index.tsx","webpack://extension/./src/popup/components/accountHistory/TransactionDetail/index.tsx","webpack://extension/./src/popup/components/SlideupModal/index.tsx","webpack://extension/./src/popup/helpers/getSiteFavicon.ts","webpack://extension/./src/popup/components/PunycodedDomain/index.tsx","webpack://extension/./src/popup/components/ModalInfo/index.tsx","webpack://extension/./src/popup/helpers/useNetworkFees.ts","webpack://extension/./src/popup/components/FullscreenStyle/index.tsx","webpack://extension/./src/popup/views/AddAccount/connect/PluginWallet/index.tsx","webpack://extension/./src/popup/views/AddAccount/connect/DeviceConnect/index.tsx","webpack://extension/./src/popup/components/hardwareConnect/HardwareSign/index.tsx","webpack://extension/./src/popup/helpers/getManageAssetXDR.ts","webpack://extension/./src/popup/helpers/parseTransaction.ts","webpack://extension/./src/popup/components/manageAssets/TrustlineError/index.tsx","webpack://extension/./src/popup/components/manageAssets/ManageAssetRowButton/index.tsx","webpack://extension/./src/popup/helpers/checkForSuspiciousAsset.ts","webpack://extension/./src/popup/components/manageAssets/ManageAssetRows/index.tsx","webpack://extension/./src/popup/helpers/searchAsset.ts","webpack://extension/./src/popup/components/WarningMessages/index.tsx","webpack://extension/./src/popup/components/account/AssetDetail/index.tsx","webpack://extension/./src/popup/components/account/NotFundedMessage/index.tsx","webpack://extension/./src/popup/metrics/authServices.ts","webpack://extension/./src/popup/views/Account/index.tsx","webpack://extension/./src/popup/helpers/isFullscreenMode.ts","webpack://extension/./src/helpers/hooks/useGetHistory.tsx","webpack://extension/./src/popup/views/AccountHistory/index.tsx","webpack://extension/./src/popup/helpers/validators.tsx","webpack://extension/./src/popup/basics/layout/Box/index.tsx","webpack://extension/./src/popup/components/Onboarding/index.tsx","webpack://extension/./src/popup/components/accountCreator/PasswordForm/index.tsx","webpack://extension/./src/popup/components/mnemonicPhrase/CheckButton/index.tsx","webpack://extension/./src/popup/components/mnemonicPhrase/ConfirmMnemonicPhrase/index.tsx","webpack://extension/./src/popup/components/mnemonicPhrase/MnemonicDisplay/index.tsx","webpack://extension/./src/popup/components/mnemonicPhrase/DisplayMnemonicPhrase/index.tsx","webpack://extension/./src/popup/views/MnemonicPhrase/index.tsx","webpack://extension/./src/popup/views/AccountCreator/index.tsx","webpack://extension/./src/popup/components/EnterPassword/index.tsx","webpack://extension/./src/popup/views/AddAccount/AddAccount/index.tsx","webpack://extension/./src/popup/basics/buttons/RemoveButton/index.tsx","webpack://extension/./src/popup/views/ManageConnectedApps/index.tsx","webpack://extension/./src/popup/basics/ListNavLink/index.tsx","webpack://extension/./src/popup/components/manageAssetsLists/AssetLists/index.tsx","webpack://extension/./src/popup/components/manageAssetsLists/DeleteModal/index.tsx","webpack://extension/./src/popup/components/manageAssetsLists/ModifyAssetList/index.tsx","webpack://extension/./src/popup/views/ManageAssetsLists/index.tsx","webpack://extension/./src/popup/basics/Forms/index.tsx","webpack://extension/./src/popup/views/AddAccount/ImportAccount/index.tsx","webpack://extension/./src/popup/views/AddAccount/connect/SelectHardwareWallet/index.tsx","webpack://extension/./src/popup/ducks/access.ts","webpack://extension/./src/popup/basics/Modal/index.tsx","webpack://extension/./src/popup/metrics/access.ts","webpack://extension/./src/popup/views/GrantAccess/index.tsx","webpack://extension/./src/popup/views/FullscreenSuccessMessage/index.tsx","webpack://extension/./src/popup/views/RecoverAccount/index.tsx","webpack://extension/./src/popup/helpers/useSetupSigningFlow.ts","webpack://extension/./src/popup/views/VerifyAccount/index.tsx","webpack://extension/./src/popup/components/Tabs/index.tsx","webpack://extension/./src/popup/views/SignTransaction/Preview/Summary/index.tsx","webpack://extension/./src/popup/components/signTransaction/Operations/KeyVal/index.tsx","webpack://extension/./src/popup/components/signTransaction/Operations/index.tsx","webpack://extension/./src/popup/views/SignTransaction/Preview/Details/index.tsx","webpack://extension/./src/popup/views/SignTransaction/Preview/Data/index.tsx","webpack://extension/./src/popup/views/SignTransaction/index.tsx","webpack://extension/./src/popup/components/signAuthEntry/AuthEntry/index.tsx","webpack://extension/./src/popup/views/SignAuthEntry/index.tsx","webpack://extension/./src/popup/views/UnlockAccount/index.tsx","webpack://extension/./src/popup/views/Welcome/index.tsx","webpack://extension/./src/popup/views/DisplayBackupPhrase/index.tsx","webpack://extension/./src/popup/views/IntegrationTest.tsx","webpack://extension/./src/popup/views/ViewPublicKey/index.tsx","webpack://extension/./src/popup/assets/icon-settings-network.svg","webpack://extension/./src/popup/assets/icon-settings-security.svg","webpack://extension/./src/popup/assets/icon-settings-help.svg","webpack://extension/./src/popup/assets/icon-settings-feedback.svg","webpack://extension/./src/popup/assets/icon-settings-about.svg","webpack://extension/./src/popup/assets/icon-settings-logout.svg","webpack://extension/./src/popup/views/Settings/index.tsx","webpack://extension/./src/popup/components/AutoSave/index.tsx","webpack://extension/./src/popup/views/Preferences/index.tsx","webpack://extension/./src/popup/assets/icon-security-asset-list.svg","webpack://extension/./src/popup/assets/icon-security-phrase.svg","webpack://extension/./src/popup/assets/icon-security-experimental-link.svg","webpack://extension/./src/popup/views/Security/index.tsx","webpack://extension/./src/popup/views/AdvancedSettings/index.tsx","webpack://extension/./src/popup/views/About/index.tsx","webpack://extension/./src/popup/components/sendPayment/SendTo/index.tsx","webpack://extension/./src/popup/components/sendPayment/SendAmount/AssetSelect/index.tsx","webpack://extension/./src/popup/constants/transaction.ts","webpack://extension/./src/popup/components/sendPayment/SendAmount/index.tsx","webpack://extension/./src/popup/helpers/useRunAfterUpdate.tsx","webpack://extension/./src/popup/basics/InfoTooltip/index.tsx","webpack://extension/./src/popup/components/sendPayment/SendAmount/SendType/index.tsx","webpack://extension/./src/popup/components/sendPayment/SendSettings/Settings/index.tsx","webpack://extension/./src/popup/components/sendPayment/SendSettings/SettingsFail/index.tsx","webpack://extension/./src/popup/components/sendPayment/SendSettings/index.tsx","webpack://extension/./src/popup/components/sendPayment/SendSettings/TransactionFee/index.tsx","webpack://extension/./src/popup/components/sendPayment/SendSettings/Slippage/index.tsx","webpack://extension/./src/popup/basics/sendPayment/FedOrGAddress/index.tsx","webpack://extension/./src/popup/components/sendPayment/SendConfirm/SubmitResult/index.tsx","webpack://extension/./src/popup/components/sendPayment/SendConfirm/TransactionDetails/index.tsx","webpack://extension/./src/popup/components/sendPayment/SendConfirm/index.tsx","webpack://extension/./src/popup/components/sendPayment/SendSettings/TxTimeout/index.tsx","webpack://extension/./src/popup/views/SendPayment/index.tsx","webpack://extension/./src/popup/helpers/getAssetDomain.ts","webpack://extension/./src/popup/components/manageAssets/SelectAssetRows/index.tsx","webpack://extension/./src/popup/components/manageAssets/ChooseAsset/index.tsx","webpack://extension/./src/popup/components/manageAssets/AssetResults/index.tsx","webpack://extension/./src/popup/components/manageAssets/SearchAsset/index.tsx","webpack://extension/./src/popup/components/AssetNotification/index.tsx","webpack://extension/./src/popup/components/manageAssets/AddAsset/index.tsx","webpack://extension/./src/popup/views/ManageAssets/index.tsx","webpack://extension/./src/popup/views/Swap/index.tsx","webpack://extension/./src/popup/basics/buttons/PillButton/index.tsx","webpack://extension/./src/popup/components/manageNetwork/NetworkModal/index.tsx","webpack://extension/./src/popup/components/manageNetwork/NetworkForm/index.tsx","webpack://extension/./src/popup/components/manageNetwork/NetworkSettings/index.tsx","webpack://extension/./src/popup/views/ManageNetwork/index.tsx","webpack://extension/./src/popup/views/LeaveFeedback/index.tsx","webpack://extension/./src/popup/components/accountMigration/basics/index.tsx","webpack://extension/./src/popup/components/accountMigration/MigrationStart/index.tsx","webpack://extension/../@shared/helpers/migration.ts","webpack://extension/./src/popup/components/accountMigration/ReviewMigration/index.tsx","webpack://extension/./src/popup/components/accountMigration/MnemonicPhrase/index.tsx","webpack://extension/./src/popup/components/accountMigration/ConfirmMigration/index.tsx","webpack://extension/./src/popup/components/accountMigration/MigrationComplete/index.tsx","webpack://extension/./src/popup/views/AccountMigration/index.tsx","webpack://extension/./src/popup/metrics/views.ts","webpack://extension/./src/popup/components/signMessage/index.tsx","webpack://extension/./src/popup/views/SignMessage/index.tsx","webpack://extension/./src/popup/views/ReviewAuth/index.tsx","webpack://extension/./src/popup/components/BottomNav/index.tsx","webpack://extension/./src/popup/Router.tsx","webpack://extension/./src/popup/App.tsx","webpack://extension/./src/popup/helpers/localizationConfig.ts","webpack://extension/./src/popup/index.tsx","webpack://extension/webpack/bootstrap","webpack://extension/webpack/runtime/compat get default export","webpack://extension/webpack/runtime/define property getters","webpack://extension/webpack/runtime/ensure chunk","webpack://extension/webpack/runtime/get javascript chunk filename","webpack://extension/webpack/runtime/get mini-css chunk filename","webpack://extension/webpack/runtime/global","webpack://extension/webpack/runtime/hasOwnProperty shorthand","webpack://extension/webpack/runtime/make namespace object","webpack://extension/webpack/runtime/node module decorator","webpack://extension/webpack/runtime/publicPath","webpack://extension/webpack/runtime/jsonp chunk loading","webpack://extension/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","var inProgress = {};\nvar dataWebpackPrefix = \"extension:\";\n// loadScript function to load a script via script tag\n__webpack_require__.l = (url, done, key, chunkId) => {\n\tif(inProgress[url]) { inProgress[url].push(done); return; }\n\tvar script, needAttach;\n\tif(key !== undefined) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tfor(var i = 0; i < scripts.length; i++) {\n\t\t\tvar s = scripts[i];\n\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n\t\t}\n\t}\n\tif(!script) {\n\t\tneedAttach = true;\n\t\tscript = document.createElement('script');\n\n\t\tscript.charset = 'utf-8';\n\t\tscript.timeout = 120;\n\t\tif (__webpack_require__.nc) {\n\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n\t\t}\n\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n\n\t\tscript.src = url;\n\t}\n\tinProgress[url] = [done];\n\tvar onScriptComplete = (prev, event) => {\n\t\t// avoid mem leaks in IE.\n\t\tscript.onerror = script.onload = null;\n\t\tclearTimeout(timeout);\n\t\tvar doneFns = inProgress[url];\n\t\tdelete inProgress[url];\n\t\tscript.parentNode && script.parentNode.removeChild(script);\n\t\tdoneFns && doneFns.forEach((fn) => (fn(event)));\n\t\tif(prev) return prev(event);\n\t}\n\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n\tscript.onload = onScriptComplete.bind(null, script.onload);\n\tneedAttach && document.head.appendChild(script);\n};","var map = {\n\t\"./en/translation.json\": [\n\t\t25869,\n\t\t869\n\t],\n\t\"./pt/translation.json\": [\n\t\t75834,\n\t\t834\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(() => {\n\t\treturn __webpack_require__.t(id, 3 | 16);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 87060;\nmodule.exports = webpackAsyncContext;","export const ALLOWLIST_ID = \"allowlist\";\nexport const KEY_ID = \"keyId\";\nexport const KEY_ID_LIST = \"keyIdList\";\nexport const APPLICATION_ID = \"applicationState\";\nexport const DATA_SHARING_ID = \"dataSharingStatus\";\nexport const KEY_DERIVATION_NUMBER_ID = \"keyDerivationNumber\";\nexport const ACCOUNT_NAME_LIST_ID = \"accountNameList\";\nexport const CACHED_MEMO_REQUIRED_ACCOUNTS_ID = \"cachedMemoRequiredAccountsId\";\nexport const CACHED_ASSET_ICONS_ID = \"cachedAssetIconsId\";\nexport const CACHED_ASSET_DOMAINS_ID = \"cachedAssetDomainsId\";\nexport const IS_VALIDATING_MEMO_ID = \"isValidatingMemo\";\nexport const IS_EXPERIMENTAL_MODE_ID = \"isExperimentalMode\";\nexport const RECENT_ADDRESSES = \"recentAddresses\";\nexport const LAST_USED_ACCOUNT = \"lastUsedAccount\";\nexport const NETWORK_ID = \"network\";\nexport const NETWORKS_LIST_ID = \"networksList\";\nexport const METRICS_DATA = \"metricsData\";\nexport const TOKEN_ID_LIST = \"tokenIdList\";\nexport const STORAGE_VERSION = \"storageVersion\";\nexport const HAS_ACCOUNT_SUBSCRIPTION = \"hasAccountSubscription\";\nexport const ASSETS_LISTS_ID = \"assetsLists\";\nexport const IS_HASH_SIGNING_ENABLED_ID = \"isHashSigningEnabled\";\nexport const IS_NON_SSL_ENABLED_ID = \"isNonSSLEnabled\";\nexport const IS_BLOCKAID_ANNOUNCED_ID = \"isBlockaidAnnounced\";\nexport const IS_HIDE_DUST_ENABLED_ID = \"isHideDustEnabled\";\n","export const INDEXER_URL = process.env.INDEXER_URL;\n","import { Networks } from \"stellar-sdk\";\n\nexport enum NETWORK_NAMES {\n  TESTNET = \"Test Net\",\n  PUBNET = \"Main Net\",\n  FUTURENET = \"Future Net\",\n}\n\nexport enum NETWORKS {\n  PUBLIC = \"PUBLIC\",\n  TESTNET = \"TESTNET\",\n  FUTURENET = \"FUTURENET\",\n}\n\nexport enum NETWORK_URLS {\n  PUBLIC = \"https://horizon.stellar.org\",\n  TESTNET = \"https://horizon-testnet.stellar.org\",\n  FUTURENET = \"https://horizon-futurenet.stellar.org\",\n}\n\nexport enum FRIENDBOT_URLS {\n  TESTNET = \"https://friendbot.stellar.org\",\n  FUTURENET = \"https://friendbot-futurenet.stellar.org\",\n}\n\nexport const SOROBAN_RPC_URLS: { [key in NETWORKS]: string } = {\n  [NETWORKS.PUBLIC]:\n    \"http://soroban-rpc-pubnet-prd.soroban-rpc-pubnet-prd.svc.cluster.local:8000\",\n  [NETWORKS.TESTNET]: \"https://soroban-testnet.stellar.org/\",\n  [NETWORKS.FUTURENET]: \"https://rpc-futurenet.stellar.org/\",\n};\n\nexport interface NetworkDetails {\n  network: string;\n  networkName: string;\n  networkUrl: string;\n  networkPassphrase: string;\n  friendbotUrl?: string;\n  sorobanRpcUrl?: string;\n}\n\nexport const MAINNET_NETWORK_DETAILS: NetworkDetails = {\n  network: NETWORKS.PUBLIC,\n  networkName: NETWORK_NAMES.PUBNET,\n  networkUrl: NETWORK_URLS.PUBLIC,\n  networkPassphrase: Networks.PUBLIC,\n  sorobanRpcUrl: SOROBAN_RPC_URLS.PUBLIC,\n};\n\nexport const TESTNET_NETWORK_DETAILS: NetworkDetails = {\n  network: NETWORKS.TESTNET,\n  networkName: NETWORK_NAMES.TESTNET,\n  networkUrl: NETWORK_URLS.TESTNET,\n  networkPassphrase: Networks.TESTNET,\n  sorobanRpcUrl: SOROBAN_RPC_URLS[NETWORKS.TESTNET],\n  friendbotUrl: FRIENDBOT_URLS.TESTNET,\n};\n\nexport const FUTURENET_NETWORK_DETAILS: NetworkDetails = {\n  network: NETWORKS.FUTURENET,\n  networkName: NETWORK_NAMES.FUTURENET,\n  networkUrl: NETWORK_URLS.FUTURENET,\n  networkPassphrase: \"Test SDF Future Network ; October 2022\",\n  sorobanRpcUrl: SOROBAN_RPC_URLS[NETWORKS.FUTURENET],\n  friendbotUrl: FRIENDBOT_URLS.FUTURENET,\n};\n\nexport const DEFAULT_NETWORKS: Array<NetworkDetails> = [\n  MAINNET_NETWORK_DETAILS,\n  TESTNET_NETWORK_DETAILS,\n];\n\nexport const BASE_RESERVE = 0.5 as const;\nexport const BASE_RESERVE_MIN_COUNT = 2 as const;\n","import BigNumber from \"bignumber.js\";\nimport * as StellarSdk from \"stellar-sdk\";\nimport * as StellarSdkNext from \"stellar-sdk-next\";\n\nimport {\n  BalanceMap,\n  AssetBalance,\n  BlockAidScanAssetResult,\n} from \"@shared/api/types\";\nimport {\n  BASE_RESERVE,\n  BASE_RESERVE_MIN_COUNT,\n  NetworkDetails,\n} from \"@shared/constants/stellar\";\nimport { INDEXER_URL } from \"@shared/constants/mercury\";\n\nexport const CUSTOM_NETWORK = \"STANDALONE\";\nexport const LP_ISSUER_KEY = \"lp\";\n\nexport const isNextSdk = (networkPassphrase: string) =>\n  [\"\"].includes(networkPassphrase);\n\nexport const getSdk = (networkPassphrase: string) =>\n  isNextSdk(networkPassphrase) ? StellarSdkNext : StellarSdk;\n\nexport const isCustomNetwork = (networkDetails: NetworkDetails) => {\n  const { network } = networkDetails;\n\n  return network === CUSTOM_NETWORK;\n};\n\nexport function getBalanceIdentifier(\n  balance: StellarSdk.Horizon.HorizonApi.BalanceLine,\n): string {\n  if (\"asset_issuer\" in balance && !balance.asset_issuer) {\n    return \"native\";\n  }\n  switch (balance.asset_type) {\n    case \"credit_alphanum4\":\n    case \"credit_alphanum12\":\n      return `${balance.asset_code}:${balance.asset_issuer}`;\n\n    case \"liquidity_pool_shares\":\n      return `${balance.liquidity_pool_id}:${LP_ISSUER_KEY}`;\n\n    default:\n      return \"native\";\n  }\n}\n\nexport const defaultBlockaidScanAssetResult: BlockAidScanAssetResult = {\n  /* eslint-disable @typescript-eslint/naming-convention */\n  address: \"\",\n  chain: \"stellar\",\n  attack_types: {},\n  fees: {},\n  malicious_score: \"0.0\",\n  metadata: {},\n  financial_stats: {},\n  trading_limits: {},\n  result_type: \"Benign\",\n  features: [{ description: \"\", feature_id: \"METADATA\", type: \"Benign\" }],\n  /* eslint-enable @typescript-eslint/naming-convention */\n};\n\nexport const makeDisplayableBalances = async (\n  accountDetails: StellarSdk.Horizon.ServerApi.AccountRecord,\n  isMainnet: boolean,\n) => {\n  const { balances, subentry_count, num_sponsored, num_sponsoring } =\n    accountDetails;\n\n  const displayableBalances = {} as BalanceMap;\n\n  let blockaidScanResults: { [key: string]: BlockAidScanAssetResult } = {};\n\n  if (isMainnet) {\n    const url = new URL(`${INDEXER_URL}/scan-asset-bulk`);\n    for (const balance of balances) {\n      const balanceId = getBalanceIdentifier(balance);\n      if (balanceId !== \"native\" && !balanceId.includes(\":lp\")) {\n        url.searchParams.append(\"asset_ids\", balanceId.replace(\":\", \"-\"));\n      }\n    }\n\n    try {\n      const response = await fetch(url.href);\n      const data = await response.json();\n      blockaidScanResults = data.data.results;\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  for (let i = 0; i < balances.length; i++) {\n    const balance = balances[i];\n    const identifier = getBalanceIdentifier(balance);\n    const total = new BigNumber(balance.balance);\n\n    let sellingLiabilities = \"0\";\n    let buyingLiabilities = \"0\";\n    let available = new BigNumber(\"0\");\n\n    if (\"selling_liabilities\" in balance) {\n      sellingLiabilities = new BigNumber(\n        balance.selling_liabilities,\n      ).toString();\n      available = total.minus(sellingLiabilities);\n    }\n\n    if (\"buying_liabilities\" in balance) {\n      buyingLiabilities = new BigNumber(balance.buying_liabilities).toString();\n    }\n\n    if (identifier === \"native\") {\n      // define the native balance line later\n\n      displayableBalances.native = {\n        token: {\n          type: \"native\",\n          code: \"XLM\",\n        },\n        total,\n        available,\n        sellingLiabilities,\n        buyingLiabilities,\n        minimumBalance: new BigNumber(BASE_RESERVE_MIN_COUNT)\n          .plus(subentry_count)\n          .plus(num_sponsoring)\n          .minus(num_sponsored)\n          .times(BASE_RESERVE)\n          .plus(sellingLiabilities),\n        blockaidData: defaultBlockaidScanAssetResult,\n      };\n      continue;\n    }\n\n    const liquidityPoolBalance =\n      balance as StellarSdk.Horizon.HorizonApi.BalanceLineLiquidityPool;\n    if (identifier.includes(\":lp\")) {\n      displayableBalances[identifier] = {\n        liquidityPoolId: liquidityPoolBalance.liquidity_pool_id,\n        total,\n        limit: new BigNumber(liquidityPoolBalance.limit),\n      } as AssetBalance;\n      continue;\n    }\n\n    const assetBalance =\n      balance as StellarSdk.Horizon.HorizonApi.BalanceLineAsset;\n    const assetSponsor = assetBalance.sponsor\n      ? { sponsor: assetBalance.sponsor }\n      : {};\n\n    displayableBalances[identifier] = {\n      token: {\n        type: assetBalance.asset_type,\n        code: assetBalance.asset_code,\n        issuer: {\n          key: assetBalance.asset_issuer,\n        },\n      },\n      sellingLiabilities,\n      buyingLiabilities,\n      total,\n      limit: new BigNumber(assetBalance.limit),\n      available: total.minus(sellingLiabilities),\n      blockaidData:\n        blockaidScanResults[identifier.replace(\":\", \"-\")] ||\n        defaultBlockaidScanAssetResult,\n      ...assetSponsor,\n    };\n\n    continue;\n  }\n\n  return displayableBalances;\n};\n","import {\n  Transaction,\n  Memo,\n  MemoType,\n  Operation,\n  SorobanRpc,\n  scValToNative,\n  BASE_FEE,\n} from \"stellar-sdk\";\nimport { NetworkDetails } from \"@shared/constants/stellar\";\nimport { getSdk } from \"@shared/helpers/stellar\";\n\nexport const simulateTx = async <ArgType>(\n  tx: Transaction<Memo<MemoType>, Operation[]>,\n  server: SorobanRpc.Server,\n): Promise<ArgType> => {\n  const simulatedTX = await server.simulateTransaction(tx);\n\n  if (\"result\" in simulatedTX && simulatedTX.result !== undefined) {\n    return scValToNative(simulatedTX.result.retval);\n  }\n\n  throw new Error(\"Invalid response from simulateTransaction\");\n};\n\nexport const buildSorobanServer = (\n  serverUrl: string,\n  networkPassphrase: string,\n) => {\n  const Sdk = getSdk(networkPassphrase);\n\n  return new Sdk.SorobanRpc.Server(serverUrl, {\n    allowHttp: serverUrl.startsWith(\"http://\"),\n  });\n};\n\nexport const getNewTxBuilder = async (\n  publicKey: string,\n  networkDetails: NetworkDetails,\n  server: SorobanRpc.Server,\n  fee = BASE_FEE,\n) => {\n  const Sdk = getSdk(networkDetails.networkPassphrase);\n  const sourceAccount = await server.getAccount(publicKey);\n  return new Sdk.TransactionBuilder(sourceAccount, {\n    fee,\n    networkPassphrase: networkDetails.networkPassphrase,\n  });\n};\n","export class NoExtensionInstalledError extends Error {\n  message = \"Freighter does not appear to be installed.\";\n}\n\nexport class SorobanRpcNotSupportedError extends Error {\n  message = \"No Soroban RPC available\";\n}\n","import {\n  Contract,\n  TransactionBuilder,\n  Memo,\n  SorobanRpc,\n  TimeoutInfinite,\n  xdr,\n} from \"stellar-sdk\";\nimport { buildSorobanServer } from \"@shared/helpers/soroban/server\";\nimport { NetworkDetails } from \"@shared/constants/stellar\";\nimport { INDEXER_URL } from \"@shared/constants/mercury\";\nimport { isCustomNetwork } from \"@shared/helpers/stellar\";\nimport { simulateTx } from \"./server\";\nimport { SorobanRpcNotSupportedError } from \"../../constants/errors\";\n\nexport const transfer = (\n  contractId: string,\n  params: xdr.ScVal[],\n  memo: string | undefined,\n  builder: TransactionBuilder,\n) => {\n  const contract = new Contract(contractId);\n\n  const tx = builder\n    .addOperation(contract.call(\"transfer\", ...params))\n    .setTimeout(TimeoutInfinite);\n\n  if (memo) {\n    tx.addMemo(Memo.text(memo));\n  }\n\n  return tx.build();\n};\n\nexport const getBalance = async (\n  contractId: string,\n  params: xdr.ScVal[],\n  server: SorobanRpc.Server,\n  builder: TransactionBuilder,\n) => {\n  const contract = new Contract(contractId);\n\n  const tx = builder\n    .addOperation(contract.call(\"balance\", ...params))\n    .setTimeout(TimeoutInfinite)\n    .build();\n\n  const result = await simulateTx<number>(tx, server);\n  return result;\n};\n\nexport const getDecimals = async (\n  contractId: string,\n  server: SorobanRpc.Server,\n  builder: TransactionBuilder,\n) => {\n  const contract = new Contract(contractId);\n\n  const tx = builder\n    .addOperation(contract.call(\"decimals\"))\n    .setTimeout(TimeoutInfinite)\n    .build();\n\n  const result = await simulateTx<number>(tx, server);\n  return result;\n};\n\nexport const getName = async (\n  contractId: string,\n  server: SorobanRpc.Server,\n  builder: TransactionBuilder,\n) => {\n  const contract = new Contract(contractId);\n\n  const tx = builder\n    .addOperation(contract.call(\"name\"))\n    .setTimeout(TimeoutInfinite)\n    .build();\n\n  const result = await simulateTx<string>(tx, server);\n  return result;\n};\n\nexport const getSymbol = async (\n  contractId: string,\n  server: SorobanRpc.Server,\n  builder: TransactionBuilder,\n) => {\n  const contract = new Contract(contractId);\n\n  const tx = builder\n    .addOperation(contract.call(\"symbol\"))\n    .setTimeout(TimeoutInfinite)\n    .build();\n\n  const result = await simulateTx<string>(tx, server);\n  return result;\n};\n\n// TODO: move this to TS Wallet SDK Soroban\nexport const isSacContractExecutable = async (\n  contractId: string,\n  networkDetails: NetworkDetails,\n) => {\n  if (isCustomNetwork(networkDetails)) {\n    // verify the contract executable in the instance entry\n    // The SAC has a unique contract executable type\n\n    if (!networkDetails.sorobanRpcUrl) {\n      throw new SorobanRpcNotSupportedError();\n    }\n\n    const server = buildSorobanServer(\n      networkDetails.sorobanRpcUrl || \"\",\n      networkDetails.networkPassphrase,\n    );\n\n    const instance = new Contract(contractId).getFootprint();\n    const ledgerKeyContractCode = instance.toXDR(\"base64\");\n\n    const { entries } = await server.getLedgerEntries(\n      xdr.LedgerKey.fromXDR(ledgerKeyContractCode, \"base64\"),\n    );\n\n    if (entries && entries.length) {\n      const parsed = entries[0].val;\n      const executable = parsed.contractData().val().instance().executable();\n\n      return (\n        executable.switch().name ===\n        xdr.ContractExecutableType.contractExecutableStellarAsset().name\n      );\n    }\n    throw new Error(\"Contract not found in the ledger entries\");\n  }\n\n  try {\n    const url = new URL(\n      `${INDEXER_URL}/is-sac-contract/${contractId}?network=${networkDetails.network}`,\n    );\n    const response = await fetch(url.href);\n\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data);\n    }\n\n    return data.isSacContract;\n  } catch (e) {\n    console.error(e);\n    return false;\n  }\n};\n","import {\n  Address,\n  scValToBigInt,\n  xdr,\n  ScInt,\n  SorobanRpc,\n  contract,\n} from \"stellar-sdk\";\nimport { XdrReader } from \"@stellar/js-xdr\";\n\nexport interface TokenArgsDisplay {\n  contractId: string;\n  amount: string;\n  to: string;\n  from: string;\n}\n\nconst TOKEN_SPEC_DEFINITIONS = {\n  $schema: \"http://json-schema.org/draft-07/schema#\",\n  definitions: {\n    U32: {\n      type: \"integer\",\n      minimum: 0,\n      maximum: 4294967295,\n    },\n    I32: {\n      type: \"integer\",\n      minimum: -2147483648,\n      maximum: 2147483647,\n    },\n    U64: {\n      type: \"string\",\n      pattern: \"^([1-9][0-9]*|0)$\",\n      minLength: 1,\n      maxLength: 20,\n    },\n    I64: {\n      type: \"string\",\n      pattern: \"^(-?[1-9][0-9]*|0)$\",\n      minLength: 1,\n      maxLength: 21,\n    },\n    U128: {\n      type: \"string\",\n      pattern: \"^([1-9][0-9]*|0)$\",\n      minLength: 1,\n      maxLength: 39,\n    },\n    I128: {\n      type: \"string\",\n      pattern: \"^(-?[1-9][0-9]*|0)$\",\n      minLength: 1,\n      maxLength: 40,\n    },\n    U256: {\n      type: \"string\",\n      pattern: \"^([1-9][0-9]*|0)$\",\n      minLength: 1,\n      maxLength: 78,\n    },\n    I256: {\n      type: \"string\",\n      pattern: \"^(-?[1-9][0-9]*|0)$\",\n      minLength: 1,\n      maxLength: 79,\n    },\n    Address: {\n      type: \"string\",\n      format: \"address\",\n      description: \"Address can be a public key or contract id\",\n    },\n    ScString: {\n      type: \"string\",\n      description: \"ScString is a string\",\n    },\n    ScSymbol: {\n      type: \"string\",\n      description: \"ScString is a string\",\n    },\n    DataUrl: {\n      type: \"string\",\n      pattern:\n        \"^(?:[A-Za-z0-9+\\\\/]{4})*(?:[A-Za-z0-9+\\\\/]{2}==|[A-Za-z0-9+\\\\/]{3}=)?$\",\n    },\n    initialize: {\n      properties: {\n        args: {\n          additionalProperties: false,\n          properties: {\n            admin: {\n              $ref: \"#/definitions/Address\",\n            },\n            decimal: {\n              $ref: \"#/definitions/U32\",\n            },\n            name: {\n              $ref: \"#/definitions/ScString\",\n            },\n            symbol: {\n              $ref: \"#/definitions/ScString\",\n            },\n          },\n          type: \"object\",\n          required: [\"admin\", \"decimal\", \"name\", \"symbol\"],\n        },\n      },\n      additionalProperties: false,\n    },\n    mint: {\n      properties: {\n        args: {\n          additionalProperties: false,\n          properties: {\n            to: {\n              $ref: \"#/definitions/Address\",\n            },\n            amount: {\n              $ref: \"#/definitions/I128\",\n            },\n          },\n          type: \"object\",\n          required: [\"to\", \"amount\"],\n        },\n      },\n      additionalProperties: false,\n    },\n    set_admin: {\n      properties: {\n        args: {\n          additionalProperties: false,\n          properties: {\n            new_admin: {\n              $ref: \"#/definitions/Address\",\n            },\n          },\n          type: \"object\",\n          required: [\"new_admin\"],\n        },\n      },\n      additionalProperties: false,\n    },\n    allowance: {\n      properties: {\n        args: {\n          additionalProperties: false,\n          properties: {\n            from: {\n              $ref: \"#/definitions/Address\",\n            },\n            spender: {\n              $ref: \"#/definitions/Address\",\n            },\n          },\n          type: \"object\",\n          required: [\"from\", \"spender\"],\n        },\n      },\n      additionalProperties: false,\n    },\n    approve: {\n      properties: {\n        args: {\n          additionalProperties: false,\n          properties: {\n            from: {\n              $ref: \"#/definitions/Address\",\n            },\n            spender: {\n              $ref: \"#/definitions/Address\",\n            },\n            amount: {\n              $ref: \"#/definitions/I128\",\n            },\n            expiration_ledger: {\n              $ref: \"#/definitions/U32\",\n            },\n          },\n          type: \"object\",\n          required: [\"from\", \"spender\", \"amount\", \"expiration_ledger\"],\n        },\n      },\n      additionalProperties: false,\n    },\n    balance: {\n      properties: {\n        args: {\n          additionalProperties: false,\n          properties: {\n            id: {\n              $ref: \"#/definitions/Address\",\n            },\n          },\n          type: \"object\",\n          required: [\"id\"],\n        },\n      },\n      additionalProperties: false,\n    },\n    transfer: {\n      properties: {\n        args: {\n          additionalProperties: false,\n          properties: {\n            from: {\n              $ref: \"#/definitions/Address\",\n            },\n            to: {\n              $ref: \"#/definitions/Address\",\n            },\n            amount: {\n              $ref: \"#/definitions/I128\",\n            },\n          },\n          type: \"object\",\n          required: [\"from\", \"to\", \"amount\"],\n        },\n      },\n      additionalProperties: false,\n    },\n    transfer_from: {\n      properties: {\n        args: {\n          additionalProperties: false,\n          properties: {\n            spender: {\n              $ref: \"#/definitions/Address\",\n            },\n            from: {\n              $ref: \"#/definitions/Address\",\n            },\n            to: {\n              $ref: \"#/definitions/Address\",\n            },\n            amount: {\n              $ref: \"#/definitions/I128\",\n            },\n          },\n          type: \"object\",\n          required: [\"spender\", \"from\", \"to\", \"amount\"],\n        },\n      },\n      additionalProperties: false,\n    },\n    burn: {\n      properties: {\n        args: {\n          additionalProperties: false,\n          properties: {\n            from: {\n              $ref: \"#/definitions/Address\",\n            },\n            amount: {\n              $ref: \"#/definitions/I128\",\n            },\n          },\n          type: \"object\",\n          required: [\"from\", \"amount\"],\n        },\n      },\n      additionalProperties: false,\n    },\n    burn_from: {\n      properties: {\n        args: {\n          additionalProperties: false,\n          properties: {\n            spender: {\n              $ref: \"#/definitions/Address\",\n            },\n            from: {\n              $ref: \"#/definitions/Address\",\n            },\n            amount: {\n              $ref: \"#/definitions/I128\",\n            },\n          },\n          type: \"object\",\n          required: [\"spender\", \"from\", \"amount\"],\n        },\n      },\n      additionalProperties: false,\n    },\n    decimals: {\n      properties: {\n        args: {\n          additionalProperties: false,\n          properties: {},\n          type: \"object\",\n        },\n      },\n      additionalProperties: false,\n    },\n    name: {\n      properties: {\n        args: {\n          additionalProperties: false,\n          properties: {},\n          type: \"object\",\n        },\n      },\n      additionalProperties: false,\n    },\n    symbol: {\n      properties: {\n        args: {\n          additionalProperties: false,\n          properties: {},\n          type: \"object\",\n        },\n      },\n      additionalProperties: false,\n    },\n    AllowanceDataKey: {\n      description: \"\",\n      properties: {\n        from: {\n          $ref: \"#/definitions/Address\",\n        },\n        spender: {\n          $ref: \"#/definitions/Address\",\n        },\n        additionalProperties: false,\n      },\n      required: [\"from\", \"spender\"],\n      type: \"object\",\n    },\n    AllowanceValue: {\n      description: \"\",\n      properties: {\n        amount: {\n          $ref: \"#/definitions/I128\",\n        },\n        expiration_ledger: {\n          $ref: \"#/definitions/U32\",\n        },\n        additionalProperties: false,\n      },\n      required: [\"amount\", \"expiration_ledger\"],\n      type: \"object\",\n    },\n    DataKey: {\n      oneOf: [\n        {\n          type: \"object\",\n          title: \"Allowance\",\n          properties: {\n            tag: \"Allowance\",\n            values: {\n              type: \"array\",\n              items: [\n                {\n                  $ref: \"#/definitions/AllowanceDataKey\",\n                },\n              ],\n            },\n          },\n          required: [\"tag\", \"values\"],\n          additionalProperties: false,\n        },\n        {\n          type: \"object\",\n          title: \"Balance\",\n          properties: {\n            tag: \"Balance\",\n            values: {\n              type: \"array\",\n              items: [\n                {\n                  $ref: \"#/definitions/Address\",\n                },\n              ],\n            },\n          },\n          required: [\"tag\", \"values\"],\n          additionalProperties: false,\n        },\n        {\n          type: \"object\",\n          title: \"Nonce\",\n          properties: {\n            tag: \"Nonce\",\n            values: {\n              type: \"array\",\n              items: [\n                {\n                  $ref: \"#/definitions/Address\",\n                },\n              ],\n            },\n          },\n          required: [\"tag\", \"values\"],\n          additionalProperties: false,\n        },\n        {\n          type: \"object\",\n          title: \"State\",\n          properties: {\n            tag: \"State\",\n            values: {\n              type: \"array\",\n              items: [\n                {\n                  $ref: \"#/definitions/Address\",\n                },\n              ],\n            },\n          },\n          required: [\"tag\", \"values\"],\n          additionalProperties: false,\n        },\n        {\n          type: \"object\",\n          title: \"Admin\",\n          properties: {\n            tag: \"Admin\",\n          },\n          additionalProperties: false,\n          required: [\"tag\"],\n        },\n      ],\n    },\n    TokenMetadata: {\n      description: \"\",\n      properties: {\n        decimal: {\n          $ref: \"#/definitions/U32\",\n        },\n        name: {\n          $ref: \"#/definitions/ScString\",\n        },\n        symbol: {\n          $ref: \"#/definitions/ScString\",\n        },\n        additionalProperties: false,\n      },\n      required: [\"decimal\", \"name\", \"symbol\"],\n      type: \"object\",\n    },\n  },\n};\n\nexport const accountIdentifier = (account: string) =>\n  new Address(account).toScVal();\n\nexport const valueToI128String = (value: xdr.ScVal) =>\n  scValToBigInt(value).toString();\n\n// How do we decode these in a more generic way?\nexport const decodei128 = (b64: string) => {\n  const value = xdr.ScVal.fromXDR(b64, \"base64\");\n  try {\n    return valueToI128String(value);\n  } catch (error) {\n    console.error(error);\n    return 0;\n  }\n};\n\nexport const decodeStr = (b64: string) =>\n  xdr.ScVal.fromXDR(b64, \"base64\").str().toString();\n\nexport const decodeU32 = (b64: string) =>\n  xdr.ScVal.fromXDR(b64, \"base64\").u32();\n\nexport const numberToI128 = (value: number): xdr.ScVal =>\n  new ScInt(value).toI128();\n\nexport const getLedgerKeyContractCode = (contractId: string) => {\n  const ledgerKey = xdr.LedgerKey.contractData(\n    new xdr.LedgerKeyContractData({\n      contract: new Address(contractId).toScAddress(),\n      key: xdr.ScVal.scvLedgerKeyContractInstance(),\n      durability: xdr.ContractDataDurability.persistent(),\n    }),\n  );\n  return ledgerKey.toXDR(\"base64\");\n};\n\nexport const getLedgerEntries = async (\n  entryKey: string,\n  rpcUrl: string,\n  id: number = new Date().getDate(),\n): Promise<{\n  error: Error;\n  result: SorobanRpc.Api.RawGetLedgerEntriesResponse;\n}> => {\n  let requestBody = {\n    jsonrpc: \"2.0\",\n    id: id,\n    method: \"getLedgerEntries\",\n    params: {\n      keys: [entryKey],\n    },\n  };\n\n  let res = await fetch(rpcUrl, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(requestBody),\n  });\n  let json = await res.json();\n  if (!res.ok) {\n    throw new Error(json);\n  }\n  return json;\n};\n\nexport const getLedgerKeyWasmId = (contractLedgerEntryData: string) => {\n  const contractCodeWasmHash = xdr.LedgerEntryData.fromXDR(\n    contractLedgerEntryData,\n    \"base64\",\n  )\n    .contractData()\n    .val()\n    .instance()\n    .executable()\n    .wasmHash();\n  const ledgerKey = xdr.LedgerKey.contractCode(\n    new xdr.LedgerKeyContractCode({\n      hash: contractCodeWasmHash,\n    }),\n  );\n  return ledgerKey.toXDR(\"base64\");\n};\n\nexport const parseWasmXdr = async (xdrContents: string) => {\n  const wasmBuffer = xdr.LedgerEntryData.fromXDR(xdrContents, \"base64\")\n    .contractCode()\n    .code();\n  const wasmModule = await WebAssembly.compile(wasmBuffer);\n  const reader = new XdrReader(\n    Buffer.from(\n      WebAssembly.Module.customSections(wasmModule, \"contractspecv0\")[0],\n    ),\n  );\n\n  const specs = [];\n  do {\n    specs.push(xdr.ScSpecEntry.read(reader));\n  } while (!reader.eof);\n  const contractSpec = new contract.Spec(specs);\n  return contractSpec.jsonSchema();\n};\n\nexport const getContractSpec = async (\n  contractId: string,\n  serverUrl: string,\n) => {\n  const contractDataKey = getLedgerKeyContractCode(contractId);\n  const { error, result } = await getLedgerEntries(contractDataKey, serverUrl);\n  const entries = result.entries || [];\n  if (error || !entries.length) {\n    throw new Error(\"Unable to fetch contract spec\");\n  }\n\n  const contractCodeLedgerEntryData = entries[0].xdr;\n  const wasmId = getLedgerKeyWasmId(contractCodeLedgerEntryData);\n  const { error: wasmError, result: wasmResult } = await getLedgerEntries(\n    wasmId,\n    serverUrl,\n  );\n  const wasmEntries = wasmResult.entries || [];\n  if (wasmError || !wasmEntries.length) {\n    throw new Error(\"Unable to fetch contract spec\");\n  }\n\n  const spec = await parseWasmXdr(wasmEntries[0].xdr);\n  return spec;\n};\n\nconst isTokenSpec = (spec: Record<string, any>) => {\n  return JSON.stringify(spec) === JSON.stringify(TOKEN_SPEC_DEFINITIONS);\n};\n\nexport const getIsTokenSpec = async (contractId: string, serverUrl: string) => {\n  const spec = await getContractSpec(contractId, serverUrl);\n  return isTokenSpec(spec);\n};\n","import BigNumber from \"bignumber.js\";\nimport { AssetType as SdkAssetType, Horizon } from \"stellar-sdk\";\nimport Blockaid from \"@blockaid/client\";\n\nimport { SERVICE_TYPES, EXTERNAL_SERVICE_TYPES } from \"../constants/services\";\nimport { APPLICATION_STATE } from \"../constants/applicationState\";\nimport { WalletType } from \"../constants/hardwareWallet\";\nimport { NetworkDetails } from \"../constants/stellar\";\nimport { AssetsLists, AssetsListItem } from \"../constants/soroban/token\";\n\nexport enum ActionStatus {\n  IDLE = \"IDLE\",\n  PENDING = \"PENDING\",\n  SUCCESS = \"SUCCESS\",\n  ERROR = \"ERROR\",\n}\n\nexport interface UserInfo {\n  publicKey: string;\n}\n\nexport type MigratableAccount = Account & { keyIdIndex: number };\n\nexport interface Response {\n  error: string;\n  apiError: FreighterApiError;\n  messagedId: number;\n  applicationState: APPLICATION_STATE;\n  publicKey: string;\n  privateKey: string;\n  hasPrivateKey: boolean;\n  mnemonicPhrase: string;\n  isCorrectPhrase: boolean;\n  confirmedPassword: boolean;\n  password: string;\n  mnemonicPhraseToConfirm: string;\n  recoverMnemonic: string;\n  transaction: {\n    sign: (sourceKeys: {}) => void;\n  };\n  transactionXDR: string;\n  signerAddress: string;\n  signedTransaction: string;\n  signedPayload: string | Buffer;\n  signedBlob: Buffer | null;\n  signedAuthEntry: Buffer | null;\n  source: string;\n  type: SERVICE_TYPES;\n  url: string;\n  isDataSharingAllowed: boolean;\n  isTestnet: boolean;\n  isMemoValidationEnabled: boolean;\n  isSafetyValidationEnabled: boolean;\n  isValidatingSafeAssetsEnabled: boolean;\n  isExperimentalModeEnabled: boolean;\n  isHashSigningEnabled: boolean;\n  isSorobanPublicEnabled: boolean;\n  isRpcHealthy: boolean;\n  userNotification: UserNotification;\n  assetsLists: AssetsLists;\n  assetsList: AssetsListItem;\n  isDeleteAssetsList: boolean;\n  settingsState: SettingsState;\n  experimentalFeaturesState: SettingsState;\n  networkDetails: NetworkDetails;\n  sorobanRpcUrl: string;\n  networksList: NetworkDetails[];\n  allAccounts: Account[];\n  migratedAccounts: MigratedAccount[];\n  accountName: string;\n  assetCode: string;\n  assetCanonical: string;\n  iconUrl: string;\n  network: string;\n  networkIndex: number;\n  networkName: string;\n  recentAddresses: string[];\n  lastUsedAccount: string;\n  hardwareWalletType: WalletType;\n  bipPath: string;\n  memoRequiredAccounts: MemoRequiredAccount[];\n  assetDomain: string;\n  contractId: string;\n  tokenId: string;\n  tokenIdList: string[];\n  isConnected: boolean;\n  isAllowed: boolean;\n  userInfo: UserInfo;\n  allowList: string[];\n  migratableAccounts: MigratableAccount[];\n  balancesToMigrate: BalanceToMigrate[];\n  isMergeSelected: boolean;\n  recommendedFee: string;\n  isNonSSLEnabled: boolean;\n  isHideDustEnabled: boolean;\n}\n\nexport interface MemoRequiredAccount {\n  address: string;\n  name: string;\n  domain: string | null;\n  tags: string[];\n}\n\nexport interface ExternalRequestBase {\n  network: string;\n  networkPassphrase: string;\n  accountToSign?: string;\n  address?: string;\n  type: EXTERNAL_SERVICE_TYPES;\n}\n\nexport interface ExternalRequestTx extends ExternalRequestBase {\n  transactionXdr: string;\n}\n\nexport interface ExternalRequestBlob extends ExternalRequestBase {\n  apiVersion: string;\n  blob: string;\n}\n\nexport interface ExternalRequestAuthEntry extends ExternalRequestBase {\n  entryXdr: string;\n}\n\nexport type ExternalRequest =\n  | ExternalRequestTx\n  | ExternalRequestBlob\n  | ExternalRequestAuthEntry;\n\nexport interface Account {\n  publicKey: string;\n  name: string;\n  imported: boolean;\n  hardwareWalletType?: WalletType;\n}\n\nexport enum AccountType {\n  HW = \"HW\",\n  IMPORTED = \"IMPORTED\",\n  FREIGHTER = \"FREIGHTER\",\n}\n\nexport interface Preferences {\n  isDataSharingAllowed: boolean;\n  isMemoValidationEnabled: boolean;\n  networksList: NetworkDetails[];\n  isHideDustEnabled: boolean;\n  error: string;\n}\n\nexport interface ExperimentalFeatures {\n  isExperimentalModeEnabled: boolean;\n  isHashSigningEnabled: boolean;\n  isNonSSLEnabled: boolean;\n  networkDetails: NetworkDetails;\n  networksList: NetworkDetails[];\n  experimentalFeaturesState: SettingsState;\n}\n\nexport enum SettingsState {\n  IDLE = \"IDLE\",\n  LOADING = \"LOADING\",\n  ERROR = \"ERROR\",\n  SUCCESS = \"SUCCESS\",\n}\n\nexport interface UserNotification {\n  enabled: boolean;\n  message: string;\n}\n\nexport interface IndexerSettings {\n  settingsState: SettingsState;\n  isSorobanPublicEnabled: boolean;\n  isRpcHealthy: boolean;\n  userNotification: UserNotification;\n}\n\nexport type Settings = {\n  allowList: string[];\n  networkDetails: NetworkDetails;\n  networksList: NetworkDetails[];\n  error: string;\n} & Preferences;\n\nexport interface AssetIcons {\n  [code: string]: string;\n}\n\nexport interface AssetDomains {\n  [code: string]: string;\n}\n\nexport interface SoroswapToken {\n  code: string;\n  contract: string;\n  decimals: number;\n  icon: string;\n  name: string;\n}\n\nexport interface NativeToken {\n  type: SdkAssetType;\n  code: string;\n}\n\nexport interface Issuer {\n  key: string;\n  name?: string;\n  url?: string;\n  hostName?: string;\n}\n\nexport interface AssetToken {\n  type: SdkAssetType;\n  code: string;\n  issuer: Issuer;\n  anchorAsset?: string;\n  numAccounts?: BigNumber;\n  amount?: BigNumber;\n  bidCount?: BigNumber;\n  askCount?: BigNumber;\n  spread?: BigNumber;\n}\n\nexport type Token = NativeToken | AssetToken;\n\nexport interface Balance {\n  token: Token;\n\n  // for non-native tokens, this should be total - sellingLiabilities\n  // for native, it should also subtract the minimumBalance\n  available: BigNumber;\n  total: BigNumber;\n  buyingLiabilities: string;\n  sellingLiabilities: string;\n  liquidityPoolId?: string;\n  reserves?: Horizon.HorizonApi.Reserve[];\n  contractId?: string;\n  blockaidData: BlockAidScanAssetResult;\n}\n\nexport type BlockAidScanAssetResult = Blockaid.TokenScanResponse;\n\nexport type BlockAidScanSiteResult = Blockaid.SiteScanResponse;\nexport type BlockAidScanTxResult = Blockaid.StellarTransactionScanResponse;\nexport type BlockAidBulkScanAssetResult = Blockaid.TokenBulkScanResponse;\n\nexport interface AssetBalance extends Balance {\n  limit: BigNumber;\n  token: AssetToken;\n  sponsor?: string;\n}\n\nexport interface NativeBalance extends Balance {\n  token: NativeToken;\n  minimumBalance: BigNumber;\n}\n\nexport interface TokenBalance extends AssetBalance {\n  name: string;\n  symbol: string;\n  decimals: number;\n  total: BigNumber;\n}\n\nexport interface BalanceMap {\n  [key: string]: AssetBalance | NativeBalance | TokenBalance;\n  native: NativeBalance;\n}\n\nexport type Balances = BalanceMap | null;\n\nexport interface SorobanBalance {\n  contractId: string;\n  total: BigNumber;\n  name: string;\n  symbol: string;\n  decimals: number;\n  token?: { code: string; issuer: { key: string } };\n}\n\nexport type AssetType = AssetBalance | NativeBalance | TokenBalance;\n\nexport type TokenBalances = SorobanBalance[];\n\n/* eslint-disable camelcase */\nexport type HorizonOperation = Horizon.ServerApi.OperationRecord;\n/* eslint-enable camelcase */\n\nexport interface AccountBalancesInterface {\n  balances: Balances;\n  isFunded: boolean | null;\n  subentryCount: number;\n  error?: { horizon: any; soroban: any };\n}\n\nexport interface AccountHistoryInterface {\n  operations: Array<HorizonOperation> | [];\n}\n\nexport interface ErrorMessage {\n  errorMessage: string;\n  response?: Horizon.HorizonApi.ErrorResponseData.TransactionFailed;\n}\n\nexport interface BalanceToMigrate {\n  publicKey: string;\n  name: string;\n  minBalance: string;\n  xlmBalance: string;\n  trustlineBalances: Horizon.HorizonApi.BalanceLine[];\n  keyIdIndex: number;\n}\n\nexport type MigratedAccount = BalanceToMigrate & {\n  newPublicKey: string;\n  isMigrated: boolean;\n};\n\ndeclare global {\n  interface Window {\n    freighter: boolean;\n    freighterApi: { [key: string]: any };\n  }\n}\n\nexport interface FreighterApiError {\n  code: number;\n  message: string;\n  ext?: string[];\n}\n","export enum SERVICE_TYPES {\n  CREATE_ACCOUNT = \"CREATE_ACCOUNT\",\n  FUND_ACCOUNT = \"FUND_ACCOUNT\",\n  ADD_ACCOUNT = \"ADD_ACCOUNT\",\n  IMPORT_ACCOUNT = \"IMPORT_ACCOUNT\",\n  IMPORT_HARDWARE_WALLET = \"IMPORT_HARDWARE_WALLET\",\n  LOAD_ACCOUNT = \"LOAD_ACCOUNT\",\n  MAKE_ACCOUNT_ACTIVE = \"MAKE_ACCOUNT_ACTIVE\",\n  UPDATE_ACCOUNT_NAME = \"UPDATE_ACCOUNT_NAME\",\n  GET_MNEMONIC_PHRASE = \"GET_MNEMONIC_PHRASE\",\n  CONFIRM_MNEMONIC_PHRASE = \"CONFIRM_MNEMONIC_PHRASE\",\n  CONFIRM_MIGRATED_MNEMONIC_PHRASE = \"CONFIRM_MIGRATED_MNEMONIC_PHRASE\",\n  RECOVER_ACCOUNT = \"RECOVER_ACCOUNT\",\n  CONFIRM_PASSWORD = \"CONFIRM_PASSWORD\",\n  REJECT_ACCESS = \"REJECT_ACCESS\",\n  GRANT_ACCESS = \"GRANT_ACCESS\",\n  SIGN_TRANSACTION = \"SIGN_TRANSACTION\",\n  SIGN_BLOB = \"SIGN_BLOB\",\n  SIGN_AUTH_ENTRY = \"SIGN_AUTH_ENTRY\",\n  HANDLE_SIGNED_HW_PAYLOAD = \"HANDLE_SIGNED_HW_PAYLOAD\",\n  REJECT_TRANSACTION = \"REJECT_TRANSACTION\",\n  SIGN_FREIGHTER_TRANSACTION = \"SIGN_FREIGHTER_TRANSACTION\",\n  SIGN_FREIGHTER_SOROBAN_TRANSACTION = \"SIGN_FREIGHTER_SOROBAN_TRANSACTION\",\n  ADD_RECENT_ADDRESS = \"ADD_RECENT_ADDRESS\",\n  LOAD_RECENT_ADDRESSES = \"LOAD_RECENT_ADDRESSES\",\n  LOAD_LAST_USED_ACCOUNT = \"LOAD_LAST_USED_ACCOUNT\",\n  SIGN_OUT = \"SIGN_OUT\",\n  SHOW_BACKUP_PHRASE = \"SHOW_BACKUP_PHRASE\",\n  SAVE_ALLOWLIST = \"SAVE_ALLOWLIST\",\n  SAVE_SETTINGS = \"SAVE_SETTINGS\",\n  SAVE_EXPERIMENTAL_FEATURES = \"SAVE_EXPERIMENTAL_FEATURES\",\n  LOAD_SETTINGS = \"LOAD_SETTINGS\",\n  GET_CACHED_ASSET_ICON = \"GET_CACHED_ASSET_ICON\",\n  CACHE_ASSET_ICON = \"CACHE_ASSET_ICON\",\n  GET_CACHED_ASSET_DOMAIN = \"GET_CACHED_ASSET_DOMAIN\",\n  CACHE_ASSET_DOMAIN = \"CACHE_ASSET_DOMAIN\",\n  GET_MEMO_REQUIRED_ACCOUNTS = \"GET_MEMO_REQUIRED_ACCOUNTS\",\n  ADD_CUSTOM_NETWORK = \"ADD_CUSTOM_NETWORK\",\n  CHANGE_NETWORK = \"CHANGE_NETWORK\",\n  REMOVE_CUSTOM_NETWORK = \"REMOVE_CUSTOM_NETWORK\",\n  EDIT_CUSTOM_NETWORK = \"EDIT_CUSTOM_NETWORK\",\n  RESET_EXP_DATA = \"RESET_EXP_DATA\",\n  ADD_TOKEN_ID = \"ADD_TOKEN_ID\",\n  GET_TOKEN_IDS = \"GET_TOKEN_IDS\",\n  REMOVE_TOKEN_ID = \"REMOVE_TOKEN_ID\",\n  GET_MIGRATABLE_ACCOUNTS = \"GET_MIGRATABLE_ACCOUNTS\",\n  GET_MIGRATED_MNEMONIC_PHRASE = \"GET_MIGRATED_MNEMONIC_PHRASE\",\n  MIGRATE_ACCOUNTS = \"MIGRATE_ACCOUNTS\",\n  ADD_ASSETS_LIST = \"ADD_ASSETS_LIST\",\n  MODIFY_ASSETS_LIST = \"MODIFY_ASSETS_LIST\",\n}\n\nexport enum EXTERNAL_SERVICE_TYPES {\n  REQUEST_ACCESS = \"REQUEST_ACCESS\",\n  REQUEST_PUBLIC_KEY = \"REQUEST_PUBLIC_KEY\",\n  SUBMIT_TRANSACTION = \"SUBMIT_TRANSACTION\",\n  SUBMIT_BLOB = \"SUBMIT_BLOB\",\n  SUBMIT_AUTH_ENTRY = \"SUBMIT_AUTH_ENTRY\",\n  REQUEST_NETWORK = \"REQUEST_NETWORK\",\n  REQUEST_NETWORK_DETAILS = \"REQUEST_NETWORK_DETAILS\",\n  REQUEST_CONNECTION_STATUS = \"REQUEST_CONNECTION_STATUS\",\n  REQUEST_ALLOWED_STATUS = \"REQUEST_ALLOWED_STATUS\",\n  SET_ALLOWED_STATUS = \"SET_ALLOWED_STATUS\",\n  REQUEST_USER_INFO = \"REQUEST_USER_INFO\",\n}\n\nexport const EXTERNAL_MSG_REQUEST = \"FREIGHTER_EXTERNAL_MSG_REQUEST\";\nexport const EXTERNAL_MSG_RESPONSE = \"FREIGHTER_EXTERNAL_MSG_RESPONSE\";\n\ndeclare const DEV_SERVER: string;\nconst _DEV_SERVER = DEV_SERVER;\nexport { _DEV_SERVER as DEV_SERVER };\n\ndeclare const DEV_EXTENSION: string;\nconst _DEV_EXTENSION = DEV_EXTENSION;\nexport { _DEV_EXTENSION as DEV_EXTENSION };\n","export enum APPLICATION_STATE {\n  APPLICATION_LOADING = \"APPLICATION_LOADING\",\n  APPLICATION_ERROR = \"APPLICATION_ERROR\",\n  APPLICATION_STARTED = \"APPLICATION_STARTED\",\n  PASSWORD_CREATED = \"PASSWORD_CREATED\",\n  MNEMONIC_PHRASE_CONFIRMED = \"MNEMONIC_PHRASE_CONFIRMED\",\n  MNEMONIC_PHRASE_FAILED = \"MNEMONIC_PHRASE_FAILED\",\n}\n","import browser from \"webextension-polyfill\";\nimport {\n  DEV_SERVER,\n  EXTERNAL_MSG_RESPONSE,\n  EXTERNAL_MSG_REQUEST,\n  EXTERNAL_SERVICE_TYPES,\n  SERVICE_TYPES,\n} from \"../../constants/services\";\nimport { Response } from \"../types\";\n\ninterface Msg {\n  [key: string]: any;\n  type: EXTERNAL_SERVICE_TYPES | SERVICE_TYPES;\n}\n\nexport const sendMessageToContentScript = (msg: Msg): Promise<Response> => {\n  /* \n    In the case of multiple calls coming in sequentially, we use this MESSAGE_ID to make sure we're responding to\n    the appropriate message sender. Otherwise, we can run into race conditions where we simply resolve all \n    sent messages with the first thing that comes back.\n  */\n  const MESSAGE_ID = Date.now() + Math.random();\n\n  window.postMessage(\n    { source: EXTERNAL_MSG_REQUEST, messageId: MESSAGE_ID, ...msg },\n    window.location.origin,\n  );\n  return new Promise((resolve) => {\n    let requestTimeout = 0 as any;\n\n    /* \n      In the case that Freighter is not installed at all, any messages to \n      background from freighter-api will hang forever and not respond in any way. \n      This is especially a problem for the isConnected method, because this is \n      likely to be called in a situation where Freighter isn't installed.\n      To prevent this, we add a timeout to automatically resolve in the event \n      Freighter doesn't respond in a timely fashion to this method.\n    */\n    if (\n      msg.type === EXTERNAL_SERVICE_TYPES.REQUEST_CONNECTION_STATUS ||\n      msg.type === EXTERNAL_SERVICE_TYPES.REQUEST_PUBLIC_KEY\n    ) {\n      requestTimeout = setTimeout(() => {\n        resolve({\n          isConnected: false,\n          publicKey: \"\",\n        } as Response);\n        window.removeEventListener(\"message\", messageListener);\n      }, 2000);\n    }\n\n    const messageListener = (event: { source: any; data: Response }) => {\n      // We only accept messages from ourselves\n      if (event.source !== window) return;\n      // Only respond to messages tagged as being from our content script\n      if (event?.data?.source !== EXTERNAL_MSG_RESPONSE) return;\n      // Only respond to messages that this instance of sendMessageToContentScript sent\n      if (event?.data?.messagedId !== MESSAGE_ID) return;\n\n      resolve(event.data);\n      window.removeEventListener(\"message\", messageListener);\n      clearTimeout(requestTimeout);\n    };\n    window.addEventListener(\"message\", messageListener, false);\n  });\n};\n\nexport const sendMessageToBackground = async (msg: Msg): Promise<Response> => {\n  let res;\n  if (DEV_SERVER) {\n    // treat this as an external call because we're making the call from the browser, not the popup\n    res = await sendMessageToContentScript(msg);\n  } else {\n    res = (await browser.runtime.sendMessage(msg)) as Response;\n  }\n\n  return res as Response;\n};\n\nexport const FreighterApiNodeError = {\n  code: -1,\n  message: \"Node environment is not supported\",\n};\n\nexport const FreighterApiInternalError = {\n  code: -1,\n  message:\n    \"The wallet encountered an internal error. Please try again or contact the wallet if the problem persists.\",\n};\n\nexport const FreighterApiDeclinedError = {\n  code: -4,\n  message: \"The user rejected this request.\",\n};\n","import { FeeBumpTransaction, Horizon, Transaction } from \"stellar-sdk\";\nimport { Horizon as HorizonNext } from \"stellar-sdk-next\";\n\nimport { getSdk } from \"@shared/helpers/stellar\";\n\ninterface HorizonError {\n  response: {\n    status: number;\n  };\n}\n\nconst isHorizonError = (val: unknown): val is HorizonError =>\n  typeof val === \"object\" &&\n  val !== null &&\n  \"response\" in val &&\n  typeof val.response == \"object\" &&\n  val.response !== null &&\n  \"status\" in val.response;\n\nexport const getIsAllowHttp = (networkUrl: string) =>\n  !networkUrl.includes(\"https\");\n\nexport const stellarSdkServer = (\n  networkUrl: string,\n  networkPassphrase: string,\n) => {\n  const Sdk = getSdk(networkPassphrase);\n  return new Sdk.Horizon.Server(networkUrl, {\n    allowHttp: getIsAllowHttp(networkUrl),\n  });\n};\n\nexport const submitTx = async ({\n  server,\n  tx,\n}: {\n  server: Horizon.Server | HorizonNext.Server;\n  tx: Transaction | FeeBumpTransaction;\n}): Promise<any> => {\n  let submittedTx;\n\n  try {\n    submittedTx = await server.submitTransaction(tx);\n  } catch (e: unknown) {\n    if (isHorizonError(e) && e.response.status === 504) {\n      // in case of 504, keep retrying this tx until submission succeeds or we get a different error\n      // https://developers.stellar.org/api/errors/http-status-codes/horizon-specific/timeout\n      // https://developers.stellar.org/docs/encyclopedia/error-handling\n      return submitTx({ server, tx });\n    }\n    throw e;\n  }\n\n  return submittedTx;\n};\n","import { StellarToml, StrKey } from \"stellar-sdk\";\nimport { sendMessageToBackground } from \"./extensionMessaging\";\nimport { stellarSdkServer } from \"./stellarSdkServer\";\nimport { SERVICE_TYPES } from \"../../constants/services\";\nimport { NetworkDetails } from \"../../constants/stellar\";\n\n/* \nThis runs a slightly convoluted process to find an icon's url. \nIt's not practical to manually find every possible icon png for every possible asset that exists/can exist \nand save a copy into this repo. Nor is it practical to manually create some sort of list of all icon url's and \nhave to push releases to update it.\n\nIdeally, this will be replaced by a backend server that does all this work for us in the near future.\n\nUntil then, the very first time a user loads a non native asset in the UI, we will check that asset's issuer public key\naccount info to find their listed website. Using the website, we attempt to look at their stellar.toml file to\nsee if it provides an icon url. \n\nSo, on this very first time, this requires 3 roundtrips for an image: \n- first to Horizon to get issuer info, \n- second to the issuer toml file to get the icon url\n- third to get the actual image data from the url\n\nIf any of that fails, we move on with no image and fallback to a generic bullet.\n\nIf we successfully do that, we save the resulting url in our localStorage cache.\n\nSo, any subsequent attempts to load the asset, it requires only 1 roundtrip for an image\n- first, just get the image from the url we already have saved for that asset and load it\n*/\nexport const getIconUrlFromIssuer = async ({\n  key,\n  code,\n  networkDetails,\n}: {\n  key: string;\n  code: string;\n  networkDetails: NetworkDetails;\n}) => {\n  let iconUrl = \"\";\n  let response;\n\n  try {\n    /* First, check our localStorage cache in Background to see if we've found this url before */\n    ({ iconUrl } = await sendMessageToBackground({\n      assetCanonical: `${code}:${key}`,\n      type: SERVICE_TYPES.GET_CACHED_ASSET_ICON,\n    }));\n    if (iconUrl) {\n      /* If we had the url stored in cache, simply return it. We're done. */\n      return iconUrl;\n    }\n  } catch (e) {\n    console.error(e);\n  }\n\n  try {\n    /* Otherwise, 1. load their account from the API */\n    const { networkUrl, networkPassphrase } = networkDetails;\n    const server = stellarSdkServer(networkUrl, networkPassphrase);\n    if (!StrKey.isValidEd25519PublicKey(key)) {\n      return iconUrl;\n    }\n\n    response = await server.loadAccount(key);\n  } catch (e) {\n    return iconUrl;\n  }\n\n  const { home_domain: homeDomain } = response;\n  let toml;\n\n  try {\n    /* 2. Use their domain from their API account and use it attempt to load their stellar.toml */\n    if (!homeDomain) {\n      return iconUrl;\n    }\n    toml = await StellarToml.Resolver.resolve(homeDomain);\n  } catch (e) {\n    console.error(e);\n    return iconUrl;\n  }\n\n  if (toml.CURRENCIES) {\n    /* If we find some currencies listed, check to see if they have the currency we're looking for listed */\n    toml.CURRENCIES.every(async ({ code: currencyCode, issuer, image }) => {\n      if (currencyCode === code && issuer === key && image) {\n        /* We found the currency listing in the toml. 3. Get the image url from it */\n        iconUrl = image;\n        /* And also save into the cache to prevent having to do this process again */\n        await sendMessageToBackground({\n          assetCanonical: `${code}:${key}`,\n          iconUrl,\n          type: SERVICE_TYPES.CACHE_ASSET_ICON,\n        });\n        return false;\n      }\n      return true;\n    });\n  }\n  /* Return the icon url to the UI, if we found it */\n  return iconUrl;\n};\n","import { StrKey } from \"stellar-sdk\";\nimport { getSdk } from \"@shared/helpers/stellar\";\nimport { sendMessageToBackground } from \"./extensionMessaging\";\nimport { SERVICE_TYPES } from \"../../constants/services\";\nimport { NetworkDetails } from \"../../constants/stellar\";\n\nexport const getDomainFromIssuer = async ({\n  key,\n  code,\n  networkDetails,\n}: {\n  key: string;\n  code: string;\n  networkDetails: NetworkDetails;\n}) => {\n  let assetDomain = \"\";\n  let response;\n\n  try {\n    /* First, check our localStorage cache in Background to see if we've found this url before */\n    ({ assetDomain } = await sendMessageToBackground({\n      assetCanonical: `${code}:${key}`,\n      type: SERVICE_TYPES.GET_CACHED_ASSET_DOMAIN,\n    }));\n    if (assetDomain) {\n      /* If we had the url stored in cache, simply return it. We're done. */\n      return assetDomain;\n    }\n  } catch (e) {\n    console.error(e);\n  }\n\n  try {\n    /* Otherwise, 1. load their account from the API */\n    const { networkUrl, networkPassphrase } = networkDetails;\n    const Sdk = getSdk(networkPassphrase);\n\n    const server = new Sdk.Horizon.Server(networkUrl);\n    if (!StrKey.isValidEd25519PublicKey(key)) {\n      return assetDomain;\n    }\n    response = await server.loadAccount(key);\n  } catch (e) {\n    return assetDomain;\n  }\n\n  assetDomain = response.home_domain || \"\";\n\n  /* And also save into the cache to prevent having to do this process again */\n  await sendMessageToBackground({\n    assetCanonical: `${code}:${key}`,\n    assetDomain,\n    type: SERVICE_TYPES.CACHE_ASSET_DOMAIN,\n  });\n  return assetDomain;\n};\n","import { captureException } from \"@sentry/browser\";\nimport {\n  Address,\n  SorobanRpc,\n  Networks,\n  Horizon,\n  FeeBumpTransaction,\n  Transaction,\n  TransactionBuilder,\n  xdr,\n} from \"stellar-sdk\";\nimport BigNumber from \"bignumber.js\";\nimport { INDEXER_URL } from \"@shared/constants/mercury\";\nimport { AssetsListItem, AssetsLists } from \"@shared/constants/soroban/token\";\nimport {\n  getBalance,\n  getDecimals,\n  getName,\n  getSymbol,\n} from \"@shared/helpers/soroban/token\";\nimport {\n  getSdk,\n  isCustomNetwork,\n  makeDisplayableBalances,\n} from \"@shared/helpers/stellar\";\nimport {\n  buildSorobanServer,\n  getNewTxBuilder,\n} from \"@shared/helpers/soroban/server\";\nimport {\n  getContractSpec as getContractSpecHelper,\n  getIsTokenSpec as getIsTokenSpecHelper,\n} from \"./helpers/soroban\";\nimport {\n  Account,\n  AccountBalancesInterface,\n  BalanceToMigrate,\n  Balances,\n  MigratableAccount,\n  MigratedAccount,\n  Settings,\n  IndexerSettings,\n  SettingsState,\n  ExperimentalFeatures,\n} from \"./types\";\nimport {\n  MAINNET_NETWORK_DETAILS,\n  DEFAULT_NETWORKS,\n  NetworkDetails,\n  NETWORKS,\n} from \"../constants/stellar\";\nimport { SERVICE_TYPES } from \"../constants/services\";\nimport { SorobanRpcNotSupportedError } from \"../constants/errors\";\nimport { APPLICATION_STATE } from \"../constants/applicationState\";\nimport { WalletType } from \"../constants/hardwareWallet\";\nimport { sendMessageToBackground } from \"./helpers/extensionMessaging\";\nimport { getIconUrlFromIssuer } from \"./helpers/getIconUrlFromIssuer\";\nimport { getDomainFromIssuer } from \"./helpers/getDomainFromIssuer\";\nimport { stellarSdkServer, submitTx } from \"./helpers/stellarSdkServer\";\n\nconst TRANSACTIONS_LIMIT = 100;\n\nexport const SendTxStatus: {\n  [index: string]: SorobanRpc.Api.SendTransactionStatus;\n} = {\n  Pending: \"PENDING\",\n  Duplicate: \"DUPLICATE\",\n  Retry: \"TRY_AGAIN_LATER\",\n  Error: \"ERROR\",\n};\n\nexport const GetTxStatus: {\n  [index: string]: SorobanRpc.Api.GetTransactionStatus;\n} = {\n  Success: SorobanRpc.Api.GetTransactionStatus.SUCCESS,\n  NotFound: SorobanRpc.Api.GetTransactionStatus.NOT_FOUND,\n  Failed: SorobanRpc.Api.GetTransactionStatus.FAILED,\n};\n\nexport const createAccount = async (\n  password: string,\n): Promise<{\n  publicKey: string;\n  allAccounts: Array<Account>;\n  hasPrivateKey: boolean;\n}> => {\n  let publicKey = \"\";\n  let allAccounts = [] as Array<Account>;\n  let hasPrivateKey = false;\n\n  try {\n    ({ allAccounts, publicKey, hasPrivateKey } = await sendMessageToBackground({\n      password,\n      type: SERVICE_TYPES.CREATE_ACCOUNT,\n    }));\n  } catch (e) {\n    console.error(e);\n  }\n\n  return { allAccounts, publicKey, hasPrivateKey };\n};\n\nexport const fundAccount = async (publicKey: string): Promise<void> => {\n  try {\n    await sendMessageToBackground({\n      publicKey,\n      type: SERVICE_TYPES.FUND_ACCOUNT,\n    });\n  } catch (e) {\n    console.error(e);\n  }\n};\n\nexport const addAccount = async (\n  password: string = \"\",\n): Promise<{\n  publicKey: string;\n  allAccounts: Array<Account>;\n  hasPrivateKey: boolean;\n}> => {\n  let error = \"\";\n  let publicKey = \"\";\n  let allAccounts = [] as Array<Account>;\n  let hasPrivateKey = false;\n\n  try {\n    ({ allAccounts, error, publicKey, hasPrivateKey } =\n      await sendMessageToBackground({\n        password,\n        type: SERVICE_TYPES.ADD_ACCOUNT,\n      }));\n  } catch (e) {\n    console.error(e);\n  }\n\n  if (error) {\n    throw new Error(error);\n  }\n\n  return { allAccounts, publicKey, hasPrivateKey };\n};\n\nexport const importAccount = async (\n  password: string,\n  privateKey: string,\n): Promise<{\n  publicKey: string;\n  allAccounts: Array<Account>;\n  hasPrivateKey: boolean;\n}> => {\n  let error = \"\";\n  let publicKey = \"\";\n  let allAccounts = [] as Array<Account>;\n  let hasPrivateKey = false;\n\n  try {\n    ({ allAccounts, publicKey, error, hasPrivateKey } =\n      await sendMessageToBackground({\n        password,\n        privateKey,\n        type: SERVICE_TYPES.IMPORT_ACCOUNT,\n      }));\n  } catch (e) {\n    console.error(e);\n  }\n\n  // @TODO: should this be universal? See asana ticket.\n  if (error) {\n    throw new Error(error);\n  }\n\n  return { allAccounts, publicKey, hasPrivateKey };\n};\n\nexport const importHardwareWallet = async (\n  publicKey: string,\n  hardwareWalletType: WalletType,\n  bipPath: string,\n) => {\n  let _publicKey = \"\";\n  let allAccounts = [] as Array<Account>;\n  let hasPrivateKey = false;\n  let _bipPath = \"\";\n  try {\n    ({\n      publicKey: _publicKey,\n      allAccounts,\n      hasPrivateKey,\n      bipPath: _bipPath,\n    } = await sendMessageToBackground({\n      publicKey,\n      hardwareWalletType,\n      bipPath,\n      type: SERVICE_TYPES.IMPORT_HARDWARE_WALLET,\n    }));\n  } catch (e) {\n    console.log({ e });\n  }\n  return {\n    allAccounts,\n    publicKey: _publicKey,\n    hasPrivateKey,\n    bipPath: _bipPath,\n  };\n};\n\nexport const makeAccountActive = (\n  publicKey: string,\n): Promise<{ publicKey: string; hasPrivateKey: boolean; bipPath: string }> =>\n  sendMessageToBackground({\n    publicKey,\n    type: SERVICE_TYPES.MAKE_ACCOUNT_ACTIVE,\n  });\n\nexport const updateAccountName = (\n  accountName: string,\n): Promise<{ allAccounts: Array<Account> }> =>\n  sendMessageToBackground({\n    accountName,\n    type: SERVICE_TYPES.UPDATE_ACCOUNT_NAME,\n  });\n\nexport const loadAccount = (): Promise<{\n  hasPrivateKey: boolean;\n  publicKey: string;\n  applicationState: APPLICATION_STATE;\n  allAccounts: Array<Account>;\n  bipPath: string;\n  tokenIdList: string[];\n}> =>\n  sendMessageToBackground({\n    type: SERVICE_TYPES.LOAD_ACCOUNT,\n  });\n\nexport const getMnemonicPhrase = async (): Promise<{\n  mnemonicPhrase: string;\n}> => {\n  let response = { mnemonicPhrase: \"\" };\n\n  try {\n    response = await sendMessageToBackground({\n      type: SERVICE_TYPES.GET_MNEMONIC_PHRASE,\n    });\n  } catch (e) {\n    console.error(e);\n  }\n  return response;\n};\n\nexport const getMigratedMnemonicPhrase = async (): Promise<{\n  mnemonicPhrase: string;\n}> => {\n  let response = { mnemonicPhrase: \"\" };\n\n  try {\n    response = await sendMessageToBackground({\n      type: SERVICE_TYPES.GET_MIGRATED_MNEMONIC_PHRASE,\n    });\n  } catch (e) {\n    console.error(e);\n  }\n  return response;\n};\n\nexport const confirmMnemonicPhrase = async (\n  mnemonicPhraseToConfirm: string,\n): Promise<{\n  isCorrectPhrase: boolean;\n  applicationState: APPLICATION_STATE;\n}> => {\n  let response = {\n    isCorrectPhrase: false,\n    applicationState: APPLICATION_STATE.PASSWORD_CREATED,\n  };\n\n  try {\n    response = await sendMessageToBackground({\n      mnemonicPhraseToConfirm,\n      type: SERVICE_TYPES.CONFIRM_MNEMONIC_PHRASE,\n    });\n  } catch (e) {\n    console.error(e);\n  }\n  return response;\n};\n\nexport const confirmMigratedMnemonicPhrase = async (\n  mnemonicPhraseToConfirm: string,\n): Promise<{\n  isCorrectPhrase: boolean;\n}> => {\n  let response = {\n    isCorrectPhrase: false,\n  };\n\n  try {\n    response = await sendMessageToBackground({\n      mnemonicPhraseToConfirm,\n      type: SERVICE_TYPES.CONFIRM_MIGRATED_MNEMONIC_PHRASE,\n    });\n  } catch (e) {\n    console.error(e);\n  }\n  return response;\n};\n\nexport const recoverAccount = async (\n  password: string,\n  recoverMnemonic: string,\n): Promise<{\n  publicKey: string;\n  allAccounts: Array<Account>;\n  hasPrivateKey: boolean;\n  error: string;\n}> => {\n  let publicKey = \"\";\n  let allAccounts = [] as Array<Account>;\n  let hasPrivateKey = false;\n  let error = \"\";\n\n  try {\n    ({ allAccounts, publicKey, hasPrivateKey, error } =\n      await sendMessageToBackground({\n        password,\n        recoverMnemonic,\n        type: SERVICE_TYPES.RECOVER_ACCOUNT,\n      }));\n  } catch (e) {\n    console.error(e);\n  }\n\n  return { allAccounts, publicKey, hasPrivateKey, error };\n};\n\nexport const confirmPassword = async (\n  password: string,\n): Promise<{\n  publicKey: string;\n  hasPrivateKey: boolean;\n  applicationState: APPLICATION_STATE;\n  allAccounts: Array<Account>;\n  bipPath: string;\n}> => {\n  let response = {\n    publicKey: \"\",\n    hasPrivateKey: false,\n    applicationState: APPLICATION_STATE.MNEMONIC_PHRASE_CONFIRMED,\n    allAccounts: [] as Array<Account>,\n    bipPath: \"\",\n  };\n  try {\n    response = await sendMessageToBackground({\n      password,\n      type: SERVICE_TYPES.CONFIRM_PASSWORD,\n    });\n  } catch (e) {\n    console.error(e);\n  }\n\n  return response;\n};\n\nexport const getAccountInfo = async ({\n  publicKey,\n  networkDetails,\n}: {\n  publicKey: string;\n  networkDetails: NetworkDetails;\n}) => {\n  const { networkUrl } = networkDetails;\n\n  const server = new Horizon.Server(networkUrl);\n\n  let account;\n  let signerArr = { records: [] as Horizon.ServerApi.AccountRecord[] };\n\n  try {\n    account = await server.loadAccount(publicKey);\n    signerArr = await server.accounts().forSigner(publicKey).call();\n  } catch (e) {\n    console.error(e);\n  }\n\n  return {\n    account,\n    isSigner: signerArr.records.length > 1,\n  };\n};\n\nexport const getMigratableAccounts = async () => {\n  let migratableAccounts: MigratableAccount[] = [];\n\n  try {\n    ({ migratableAccounts } = await sendMessageToBackground({\n      type: SERVICE_TYPES.GET_MIGRATABLE_ACCOUNTS,\n    }));\n  } catch (e) {\n    console.error(e);\n  }\n\n  return { migratableAccounts };\n};\n\nexport const migrateAccounts = async ({\n  balancesToMigrate,\n  isMergeSelected,\n  recommendedFee,\n}: {\n  balancesToMigrate: BalanceToMigrate[];\n  isMergeSelected: boolean;\n  recommendedFee: string;\n}): Promise<{\n  publicKey: string;\n  migratedAccounts: Array<MigratedAccount>;\n  allAccounts: Array<Account>;\n  hasPrivateKey: boolean;\n  error: string;\n}> => {\n  let publicKey = \"\";\n  let migratedAccounts = [] as Array<MigratedAccount>;\n  let allAccounts = [] as Array<Account>;\n  let hasPrivateKey = false;\n  let error = \"\";\n\n  try {\n    ({ migratedAccounts, allAccounts, publicKey, hasPrivateKey, error } =\n      await sendMessageToBackground({\n        balancesToMigrate,\n        isMergeSelected,\n        recommendedFee,\n        type: SERVICE_TYPES.MIGRATE_ACCOUNTS,\n      }));\n  } catch (e) {\n    console.error(e);\n  }\n\n  return { migratedAccounts, allAccounts, publicKey, hasPrivateKey, error };\n};\n\nexport const getAccountIndexerBalances = async (\n  publicKey: string,\n  networkDetails: NetworkDetails,\n): Promise<AccountBalancesInterface> => {\n  const contractIds = await getTokenIds(networkDetails.network as NETWORKS);\n  const url = new URL(`${INDEXER_URL}/account-balances/${publicKey}`);\n  url.searchParams.append(\"network\", networkDetails.network);\n  for (const id of contractIds) {\n    url.searchParams.append(\"contract_ids\", id);\n  }\n  const response = await fetch(url.href);\n  const data = (await response.json()) as AccountBalancesInterface;\n  if (!response.ok) {\n    const _err = JSON.stringify(data);\n    captureException(\n      `Failed to fetch account balances - ${response.status}: ${response.statusText}`,\n    );\n    throw new Error(_err);\n  }\n\n  if (\"error\" in data && (data?.error?.horizon || data?.error?.soroban)) {\n    captureException(\n      `Failed to fetch account balances - ${response.status}: ${response.statusText}`,\n    );\n  }\n\n  const formattedBalances = {} as NonNullable<\n    AccountBalancesInterface[\"balances\"]\n  >;\n  const balanceIds = [] as string[];\n  for (const balanceKey of Object.keys(data.balances || {})) {\n    const balance = data.balances![balanceKey];\n    formattedBalances[balanceKey] = {\n      ...balance,\n      available: new BigNumber(balance.available),\n      total: new BigNumber(balance.total),\n    };\n    // track token IDs that come back from the server in order to get\n    // the difference between contractIds set in the client and balances returned from server.\n    const [_, assetId] = balanceKey.split(\":\");\n    if (contractIds.includes(assetId)) {\n      balanceIds.push(assetId);\n    }\n  }\n  return {\n    ...data,\n    balances: formattedBalances,\n  };\n};\n\nexport const getSorobanTokenBalance = async (\n  server: SorobanRpc.Server,\n  contractId: string,\n  txBuilders: {\n    // need a builder per operation, Soroban currently has single op transactions\n    balance: TransactionBuilder;\n    name: TransactionBuilder;\n    decimals: TransactionBuilder;\n    symbol: TransactionBuilder;\n  },\n  balanceParams: xdr.ScVal[],\n) => {\n  // Right now we can only have 1 operation per TX in Soroban\n  // for now we need to do 4 tx simulations to show 1 user balance. :(\n  // TODO: figure out how to fetch ledger keys to do this more efficiently\n  const decimals = await getDecimals(contractId, server, txBuilders.decimals);\n  const name = await getName(contractId, server, txBuilders.name);\n  const symbol = await getSymbol(contractId, server, txBuilders.symbol);\n  const balance = await getBalance(\n    contractId,\n    balanceParams,\n    server,\n    txBuilders.balance,\n  );\n\n  return {\n    balance,\n    decimals,\n    name,\n    symbol,\n  };\n};\n\nexport const getAccountBalancesStandalone = async ({\n  publicKey,\n  networkDetails,\n  isMainnet,\n}: {\n  publicKey: string;\n  networkDetails: NetworkDetails;\n  isMainnet: boolean;\n}) => {\n  const { network, networkUrl, networkPassphrase } = networkDetails;\n\n  let balances = null;\n  let isFunded = null;\n  let subentryCount = 0;\n\n  try {\n    const server = stellarSdkServer(networkUrl, networkPassphrase);\n    const accountSummary = await server.accounts().accountId(publicKey).call();\n\n    const displayableBalances = await makeDisplayableBalances(\n      accountSummary,\n      isMainnet,\n    );\n    const sponsor = accountSummary.sponsor\n      ? { sponsor: accountSummary.sponsor }\n      : {};\n    const resp = {\n      ...sponsor,\n      id: accountSummary.id,\n      subentryCount: accountSummary.subentry_count,\n      sponsoredCount: accountSummary.num_sponsored,\n      sponsoringCount: accountSummary.num_sponsoring,\n      inflationDestination: accountSummary.inflation_destination,\n      thresholds: accountSummary.thresholds,\n      signers: accountSummary.signers,\n      flags: accountSummary.flags,\n      sequenceNumber: accountSummary.sequence,\n      balances: displayableBalances,\n    };\n\n    balances = resp.balances;\n    subentryCount = resp.subentryCount;\n\n    // eslint-disable-next-line no-plusplus\n    for (let i = 0; i < Object.keys(resp.balances).length; i++) {\n      const k = Object.keys(resp.balances)[i];\n      const v = resp.balances[k];\n      if (v.liquidityPoolId) {\n        const server = stellarSdkServer(networkUrl, networkPassphrase);\n        // eslint-disable-next-line no-await-in-loop\n        const lp = await server\n          .liquidityPools()\n          .liquidityPoolId(v.liquidityPoolId)\n          .call();\n        balances[k] = {\n          ...balances[k],\n          liquidityPoolId: v.liquidityPoolId,\n          reserves: lp.reserves,\n        };\n      }\n    }\n    isFunded = true;\n  } catch (e) {\n    console.error(e);\n    return {\n      balances,\n      isFunded: false,\n      subentryCount,\n    };\n  }\n\n  // Get token balances to combine with classic balances\n  const tokenIdList = await getTokenIds(network as NETWORKS);\n\n  const tokenBalances = {} as any;\n\n  if (tokenIdList.length) {\n    if (!networkDetails.sorobanRpcUrl) {\n      throw new SorobanRpcNotSupportedError();\n    }\n\n    const server = buildSorobanServer(\n      networkDetails.sorobanRpcUrl,\n      networkDetails.networkPassphrase,\n    );\n\n    const params = [new Address(publicKey).toScVal()];\n\n    for (let i = 0; i < tokenIdList.length; i += 1) {\n      const tokenId = tokenIdList[i];\n      /*\n        Right now, Soroban transactions only support 1 operation per tx\n        so we need a builder per value from the contract,\n        once/if multi-op transactions are supported this can send\n        1 tx with an operation for each value.\n      */\n      try {\n        /* eslint-disable no-await-in-loop */\n        const { balance, symbol, ...rest } = await getSorobanTokenBalance(\n          server,\n          tokenId,\n          {\n            balance: await getNewTxBuilder(publicKey, networkDetails, server),\n            name: await getNewTxBuilder(publicKey, networkDetails, server),\n            decimals: await getNewTxBuilder(publicKey, networkDetails, server),\n            symbol: await getNewTxBuilder(publicKey, networkDetails, server),\n          },\n          params,\n        );\n        /* eslint-enable no-await-in-loop */\n\n        const total = new BigNumber(balance);\n\n        tokenBalances[`${symbol}:${tokenId}`] = {\n          token: { issuer: { key: tokenId }, code: symbol },\n          contractId: tokenId,\n          total,\n          symbol,\n          ...rest,\n        };\n      } catch (e) {\n        console.error(`Token \"${tokenId}\" missing data on RPC server`);\n      }\n    }\n  }\n\n  return {\n    balances: { ...balances, ...tokenBalances },\n    isFunded,\n    subentryCount,\n  };\n};\n\nexport const getAccountHistoryStandalone = async ({\n  publicKey,\n  networkDetails,\n}: {\n  publicKey: string;\n  networkDetails: NetworkDetails;\n}): Promise<Horizon.ServerApi.OperationRecord[]> => {\n  const { networkUrl, networkPassphrase } = networkDetails;\n\n  let operations = [] as Horizon.ServerApi.OperationRecord[];\n\n  try {\n    const server = stellarSdkServer(networkUrl, networkPassphrase);\n\n    const operationsData = await server\n      .operations()\n      .forAccount(publicKey)\n      .order(\"desc\")\n      .join(\"transactions\")\n      .limit(TRANSACTIONS_LIMIT)\n      .call();\n\n    operations = operationsData.records || [];\n  } catch (e) {\n    console.error(e);\n  }\n\n  return operations;\n};\n\nexport const getIndexerAccountHistory = async ({\n  publicKey,\n  networkDetails,\n}: {\n  publicKey: string;\n  networkDetails: NetworkDetails;\n}): Promise<Horizon.ServerApi.OperationRecord[]> => {\n  try {\n    const url = new URL(\n      `${INDEXER_URL}/account-history/${publicKey}?network=${networkDetails.network}`,\n    );\n    const response = await fetch(url.href);\n\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data);\n    }\n\n    return data;\n  } catch (e) {\n    console.error(e);\n    return [];\n  }\n};\n\nexport const getContractSpec = async ({\n  contractId,\n  networkDetails,\n}: {\n  contractId: string;\n  networkDetails: NetworkDetails;\n}): Promise<Record<string, any>> => {\n  if (isCustomNetwork(networkDetails)) {\n    const data = await getContractSpecHelper(\n      contractId,\n      networkDetails.networkUrl,\n    );\n    return data;\n  }\n  const url = new URL(\n    `${INDEXER_URL}/contract-spec/${contractId}?network=${networkDetails.network}`,\n  );\n  const response = await fetch(url.href);\n  const { data, error } = await response.json();\n  if (!response.ok) {\n    throw new Error(error);\n  }\n\n  return data;\n};\n\nexport const getIsTokenSpec = async ({\n  contractId,\n  networkDetails,\n}: {\n  contractId: string;\n  networkDetails: NetworkDetails;\n}): Promise<boolean> => {\n  if (isCustomNetwork(networkDetails)) {\n    const data = await getIsTokenSpecHelper(\n      contractId,\n      networkDetails.networkUrl,\n    );\n    return data;\n  }\n  const url = new URL(\n    `${INDEXER_URL}/token-spec/${contractId}?network=${networkDetails.network}`,\n  );\n  const response = await fetch(url.href);\n  const { data, error } = await response.json();\n  if (!response.ok) {\n    throw new Error(error);\n  }\n\n  return data;\n};\n\nexport const getAccountHistory = async (\n  publicKey: string,\n  networkDetails: NetworkDetails,\n) => {\n  if (isCustomNetwork(networkDetails)) {\n    return await getAccountHistoryStandalone({\n      publicKey,\n      networkDetails,\n    });\n  }\n  return await getIndexerAccountHistory({\n    publicKey,\n    networkDetails,\n  });\n};\n\nexport const getTokenDetails = async ({\n  contractId,\n  publicKey,\n  networkDetails,\n}: {\n  contractId: string;\n  publicKey: string;\n  networkDetails: NetworkDetails;\n}): Promise<{ name: string; decimals: number; symbol: string } | null> => {\n  try {\n    if (isCustomNetwork(networkDetails)) {\n      if (!networkDetails.sorobanRpcUrl) {\n        throw new SorobanRpcNotSupportedError();\n      }\n\n      // You need one Tx Builder per call in Soroban right now\n      const server = buildSorobanServer(\n        networkDetails.sorobanRpcUrl,\n        networkDetails.networkPassphrase,\n      );\n      const name = await getName(\n        contractId,\n        server,\n        await getNewTxBuilder(publicKey, networkDetails, server),\n      );\n      const symbol = await getSymbol(\n        contractId,\n        server,\n        await getNewTxBuilder(publicKey, networkDetails, server),\n      );\n      const decimals = await getDecimals(\n        contractId,\n        server,\n        await getNewTxBuilder(publicKey, networkDetails, server),\n      );\n\n      return {\n        name,\n        symbol,\n        decimals,\n      };\n    }\n\n    const response = await fetch(\n      `${INDEXER_URL}/token-details/${contractId}?pub_key=${publicKey}&network=${networkDetails.network}`,\n    );\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data);\n    }\n    return data;\n  } catch (error) {\n    console.error(error);\n    captureException(\n      `Failed to fetch token details - ${JSON.stringify(\n        error,\n      )} - ${contractId} - ${networkDetails.network}`,\n    );\n    return null;\n  }\n};\n\nexport const getAssetIcons = async ({\n  balances,\n  networkDetails,\n}: {\n  balances: Balances;\n  networkDetails: NetworkDetails;\n}) => {\n  const assetIcons = {} as { [code: string]: string };\n\n  if (balances) {\n    let icon = \"\";\n    const balanceValues = Object.values(balances);\n    // eslint-disable-next-line no-plusplus\n    for (let i = 0; i < balanceValues.length; i++) {\n      const { token } = balanceValues[i];\n      if (token && \"issuer\" in token) {\n        const {\n          issuer: { key },\n          code,\n        } = token;\n        // eslint-disable-next-line no-await-in-loop\n        icon = await getIconUrlFromIssuer({ key, code, networkDetails });\n        assetIcons[`${code}:${key}`] = icon;\n      }\n    }\n  }\n  return assetIcons;\n};\n\nexport const retryAssetIcon = async ({\n  key,\n  code,\n  assetIcons,\n  networkDetails,\n}: {\n  key: string;\n  code: string;\n  assetIcons: { [code: string]: string };\n  networkDetails: NetworkDetails;\n}) => {\n  const newAssetIcons = { ...assetIcons };\n  try {\n    await sendMessageToBackground({\n      assetCanonical: `${code}:${key}`,\n      iconUrl: null,\n      type: SERVICE_TYPES.CACHE_ASSET_ICON,\n    });\n  } catch (e) {\n    return assetIcons;\n  }\n  const icon = await getIconUrlFromIssuer({ key, code, networkDetails });\n  newAssetIcons[`${code}:${key}`] = icon;\n  return newAssetIcons;\n};\n\nexport const getAssetDomains = async ({\n  balances,\n  networkDetails,\n}: {\n  balances: Balances;\n  networkDetails: NetworkDetails;\n}) => {\n  const assetDomains = {} as { [code: string]: string };\n\n  if (balances) {\n    const balanceValues = Object.values(balances);\n    // eslint-disable-next-line no-plusplus\n    for (let i = 0; i < balanceValues.length; i++) {\n      const { token } = balanceValues[i];\n      if (token && \"issuer\" in token) {\n        const {\n          issuer: { key },\n          code,\n        } = token;\n        // eslint-disable-next-line no-await-in-loop\n        const domain = await getDomainFromIssuer({ key, code, networkDetails });\n        assetDomains[`${code}:${key}`] = domain;\n      }\n    }\n  }\n  return assetDomains;\n};\n\nexport const rejectAccess = async (): Promise<void> => {\n  try {\n    await sendMessageToBackground({\n      type: SERVICE_TYPES.REJECT_ACCESS,\n    });\n  } catch (e) {\n    console.error(e);\n  }\n};\n\nexport const grantAccess = async (url: string): Promise<void> => {\n  try {\n    await sendMessageToBackground({\n      url,\n      type: SERVICE_TYPES.GRANT_ACCESS,\n    });\n  } catch (e) {\n    console.error(e);\n  }\n};\n\nexport const handleSignedHwPayload = async ({\n  signedPayload,\n}: {\n  signedPayload: string | Buffer;\n}): Promise<void> => {\n  try {\n    await sendMessageToBackground({\n      signedPayload,\n      type: SERVICE_TYPES.HANDLE_SIGNED_HW_PAYLOAD,\n    });\n  } catch (e) {\n    console.error(e);\n  }\n};\n\nexport const signTransaction = async (): Promise<void> => {\n  try {\n    await sendMessageToBackground({\n      type: SERVICE_TYPES.SIGN_TRANSACTION,\n    });\n  } catch (e) {\n    console.error(e);\n  }\n};\n\nexport const signBlob = async (): Promise<void> => {\n  try {\n    await sendMessageToBackground({\n      type: SERVICE_TYPES.SIGN_BLOB,\n    });\n  } catch (e) {\n    console.error(e);\n  }\n};\n\nexport const signAuthEntry = async (): Promise<void> => {\n  try {\n    await sendMessageToBackground({\n      type: SERVICE_TYPES.SIGN_AUTH_ENTRY,\n    });\n  } catch (e) {\n    console.error(e);\n  }\n};\n\nexport const signFreighterTransaction = async ({\n  transactionXDR,\n  network,\n}: {\n  transactionXDR: string;\n  network: string;\n}): Promise<{ signedTransaction: string }> => {\n  const { signedTransaction, error } = await sendMessageToBackground({\n    transactionXDR,\n    network,\n    type: SERVICE_TYPES.SIGN_FREIGHTER_TRANSACTION,\n  });\n\n  if (error || !signedTransaction) {\n    throw new Error(error);\n  }\n\n  return { signedTransaction };\n};\n\nexport const signFreighterSorobanTransaction = async ({\n  transactionXDR,\n  network,\n}: {\n  transactionXDR: string;\n  network: string;\n}): Promise<{ signedTransaction: string }> => {\n  const { signedTransaction, error } = await sendMessageToBackground({\n    transactionXDR,\n    network,\n    type: SERVICE_TYPES.SIGN_FREIGHTER_SOROBAN_TRANSACTION,\n  });\n\n  if (error || !signedTransaction) {\n    throw new Error(error);\n  }\n\n  return { signedTransaction };\n};\n\nexport const submitFreighterTransaction = ({\n  signedXDR,\n  networkDetails,\n}: {\n  signedXDR: string;\n  networkDetails: NetworkDetails;\n}) => {\n  const Sdk = getSdk(networkDetails.networkPassphrase);\n  const tx = Sdk.TransactionBuilder.fromXDR(\n    signedXDR,\n    networkDetails.networkPassphrase,\n  );\n  const server = stellarSdkServer(\n    networkDetails.networkUrl,\n    networkDetails.networkPassphrase,\n  );\n\n  return submitTx({ server, tx });\n};\n\nexport const submitFreighterSorobanTransaction = async ({\n  signedXDR,\n  networkDetails,\n}: {\n  signedXDR: string;\n  networkDetails: NetworkDetails;\n}) => {\n  let tx = {} as Transaction | FeeBumpTransaction;\n  const Sdk = getSdk(networkDetails.networkPassphrase);\n  try {\n    tx = Sdk.TransactionBuilder.fromXDR(\n      signedXDR,\n      networkDetails.networkPassphrase,\n    );\n  } catch (e) {\n    console.error(e);\n  }\n\n  if (!networkDetails.sorobanRpcUrl) {\n    throw new SorobanRpcNotSupportedError();\n  }\n\n  const serverUrl = networkDetails.sorobanRpcUrl || \"\";\n\n  const server = new Sdk.SorobanRpc.Server(serverUrl, {\n    allowHttp: !serverUrl.startsWith(\"https\"),\n  });\n\n  const response = await server.sendTransaction(tx);\n\n  if (response.errorResult) {\n    throw new Error(response.errorResult.result().toString());\n  }\n\n  if (response.status === SendTxStatus.Pending) {\n    let txResponse = await server.getTransaction(response.hash);\n\n    // Poll this until the status is not \"NOT_FOUND\"\n    while (txResponse.status === GetTxStatus.NotFound) {\n      // See if the transaction is complete\n      // eslint-disable-next-line no-await-in-loop\n      txResponse = await server.getTransaction(response.hash);\n      // Wait a second\n      // eslint-disable-next-line no-await-in-loop\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n    }\n\n    return response;\n    // eslint-disable-next-line no-else-return\n  } else {\n    throw new Error(\n      `Unabled to submit transaction, status: ${response.status}`,\n    );\n  }\n};\n\nexport const addRecentAddress = async ({\n  publicKey,\n}: {\n  publicKey: string;\n}): Promise<{ recentAddresses: Array<string> }> => {\n  return await sendMessageToBackground({\n    publicKey,\n    type: SERVICE_TYPES.ADD_RECENT_ADDRESS,\n  });\n};\n\nexport const loadRecentAddresses = async (): Promise<{\n  recentAddresses: Array<string>;\n}> => {\n  return await sendMessageToBackground({\n    type: SERVICE_TYPES.LOAD_RECENT_ADDRESSES,\n  });\n};\n\nexport const loadLastUsedAccount = async (): Promise<{\n  lastUsedAccount: string;\n}> => {\n  return await sendMessageToBackground({\n    type: SERVICE_TYPES.LOAD_LAST_USED_ACCOUNT,\n  });\n};\n\nexport const signOut = async (): Promise<{\n  publicKey: string;\n  applicationState: APPLICATION_STATE;\n}> => {\n  let response = {\n    publicKey: \"\",\n    applicationState: APPLICATION_STATE.MNEMONIC_PHRASE_CONFIRMED,\n  };\n  try {\n    response = await sendMessageToBackground({\n      type: SERVICE_TYPES.SIGN_OUT,\n    });\n  } catch (e) {\n    console.error(e);\n  }\n\n  return response;\n};\n\nexport const showBackupPhrase = async (\n  password: string,\n): Promise<{ mnemonicPhrase: string; error: string }> => {\n  let response = { mnemonicPhrase: \"\", error: \"\" };\n  try {\n    response = await sendMessageToBackground({\n      password,\n      type: SERVICE_TYPES.SHOW_BACKUP_PHRASE,\n    });\n  } catch (e) {\n    console.error(e);\n  }\n\n  return response;\n};\n\nexport const saveAllowList = async ({\n  allowList,\n}: {\n  allowList: string[];\n}): Promise<{ allowList: string[] }> => {\n  let response = {\n    allowList: [\"\"],\n  };\n\n  try {\n    response = await sendMessageToBackground({\n      allowList,\n      type: SERVICE_TYPES.SAVE_ALLOWLIST,\n    });\n  } catch (e) {\n    console.error(e);\n  }\n\n  return response;\n};\n\nexport const saveSettings = async ({\n  isDataSharingAllowed,\n  isMemoValidationEnabled,\n  isHideDustEnabled,\n}: {\n  isDataSharingAllowed: boolean;\n  isMemoValidationEnabled: boolean;\n  isHideDustEnabled: boolean;\n}): Promise<Settings & IndexerSettings> => {\n  let response = {\n    allowList: [\"\"],\n    isDataSharingAllowed: false,\n    networkDetails: MAINNET_NETWORK_DETAILS,\n    networksList: DEFAULT_NETWORKS,\n    isMemoValidationEnabled: true,\n    isRpcHealthy: false,\n    userNotification: { enabled: false, message: \"\" },\n    settingsState: SettingsState.IDLE,\n    isSorobanPublicEnabled: false,\n    isNonSSLEnabled: false,\n    isHideDustEnabled: true,\n    error: \"\",\n  };\n\n  try {\n    response = await sendMessageToBackground({\n      isDataSharingAllowed,\n      isMemoValidationEnabled,\n      isHideDustEnabled,\n      type: SERVICE_TYPES.SAVE_SETTINGS,\n    });\n  } catch (e) {\n    console.error(e);\n  }\n\n  return response;\n};\n\nexport const saveExperimentalFeatures = async ({\n  isExperimentalModeEnabled,\n  isHashSigningEnabled,\n  isNonSSLEnabled,\n}: {\n  isExperimentalModeEnabled: boolean;\n  isHashSigningEnabled: boolean;\n  isNonSSLEnabled: boolean;\n}): Promise<ExperimentalFeatures> => {\n  let response = {\n    isExperimentalModeEnabled: false,\n    isHashSigningEnabled: false,\n    isNonSSLEnabled: false,\n    networkDetails: MAINNET_NETWORK_DETAILS,\n    networksList: DEFAULT_NETWORKS,\n    experimentalFeaturesState: SettingsState.IDLE,\n    error: \"\",\n  };\n\n  try {\n    response = await sendMessageToBackground({\n      isExperimentalModeEnabled,\n      isHashSigningEnabled,\n      isNonSSLEnabled,\n      type: SERVICE_TYPES.SAVE_EXPERIMENTAL_FEATURES,\n    });\n  } catch (e) {\n    console.error(e);\n  }\n\n  return response;\n};\n\nexport const changeNetwork = async (\n  networkName: string,\n): Promise<{ networkDetails: NetworkDetails; isRpcHealthy: boolean }> => {\n  let networkDetails = MAINNET_NETWORK_DETAILS;\n  let isRpcHealthy = false;\n\n  try {\n    ({ networkDetails, isRpcHealthy } = await sendMessageToBackground({\n      networkName,\n      type: SERVICE_TYPES.CHANGE_NETWORK,\n    }));\n  } catch (e) {\n    console.error(e);\n  }\n\n  return { networkDetails, isRpcHealthy };\n};\n\nexport const addCustomNetwork = async (\n  networkDetails: NetworkDetails,\n): Promise<{\n  networksList: NetworkDetails[];\n}> => {\n  let response = {\n    error: \"\",\n    networksList: [] as NetworkDetails[],\n  };\n\n  try {\n    response = await sendMessageToBackground({\n      networkDetails,\n      type: SERVICE_TYPES.ADD_CUSTOM_NETWORK,\n    });\n  } catch (e) {\n    console.error(e);\n  }\n\n  if (response.error) {\n    throw new Error(response.error);\n  }\n\n  return response;\n};\n\nexport const removeCustomNetwork = async (\n  networkName: string,\n): Promise<{\n  networkDetails: NetworkDetails;\n  networksList: NetworkDetails[];\n}> => {\n  let response = {\n    networkDetails: MAINNET_NETWORK_DETAILS,\n    networksList: [] as NetworkDetails[],\n  };\n\n  try {\n    response = await sendMessageToBackground({\n      networkName,\n      type: SERVICE_TYPES.REMOVE_CUSTOM_NETWORK,\n    });\n  } catch (e) {\n    console.error(e);\n  }\n\n  return response;\n};\n\nexport const editCustomNetwork = async ({\n  networkDetails,\n  networkIndex,\n}: {\n  networkDetails: NetworkDetails;\n  networkIndex: number;\n}): Promise<{\n  networkDetails: NetworkDetails;\n  networksList: NetworkDetails[];\n}> => {\n  let response = {\n    networkDetails: MAINNET_NETWORK_DETAILS,\n    networksList: [] as NetworkDetails[],\n  };\n\n  try {\n    response = await sendMessageToBackground({\n      networkDetails,\n      networkIndex,\n      type: SERVICE_TYPES.EDIT_CUSTOM_NETWORK,\n    });\n  } catch (e) {\n    console.error(e);\n  }\n\n  return response;\n};\n\nexport const loadSettings = (): Promise<\n  Settings &\n    IndexerSettings &\n    ExperimentalFeatures & { assetsLists: AssetsLists }\n> =>\n  sendMessageToBackground({\n    type: SERVICE_TYPES.LOAD_SETTINGS,\n  });\n\nexport const getMemoRequiredAccounts = async () => {\n  const resp = await sendMessageToBackground({\n    type: SERVICE_TYPES.GET_MEMO_REQUIRED_ACCOUNTS,\n  });\n  return resp;\n};\n\nexport const addTokenId = async (\n  publicKey: string,\n  tokenId: string,\n  network: Networks,\n): Promise<{\n  tokenIdList: string[];\n}> => {\n  let error = \"\";\n  let tokenIdList = [] as string[];\n\n  try {\n    ({ tokenIdList, error } = await sendMessageToBackground({\n      publicKey,\n      tokenId,\n      network,\n      type: SERVICE_TYPES.ADD_TOKEN_ID,\n    }));\n  } catch (e) {\n    console.error(e);\n  }\n\n  if (error) {\n    throw new Error(error);\n  }\n\n  return { tokenIdList };\n};\n\nexport const getTokenIds = async (network: NETWORKS): Promise<string[]> => {\n  const resp = await sendMessageToBackground({\n    type: SERVICE_TYPES.GET_TOKEN_IDS,\n    network,\n  });\n  return resp.tokenIdList;\n};\n\nexport const removeTokenId = async ({\n  contractId,\n  network,\n}: {\n  contractId: string;\n  network: NETWORKS;\n}): Promise<string[]> => {\n  const resp = await sendMessageToBackground({\n    type: SERVICE_TYPES.REMOVE_TOKEN_ID,\n    contractId,\n    network,\n  });\n  return resp.tokenIdList;\n};\n\nexport const addAssetsList = async ({\n  assetsList,\n  network,\n}: {\n  assetsList: AssetsListItem;\n  network: NETWORKS;\n}) => {\n  let response = {\n    error: \"\",\n    assetsLists: {} as AssetsLists,\n  };\n\n  response = await sendMessageToBackground({\n    type: SERVICE_TYPES.ADD_ASSETS_LIST,\n    assetsList,\n    network,\n  });\n\n  return { assetsLists: response.assetsLists, error: response.error };\n};\n\nexport const modifyAssetsList = async ({\n  assetsList,\n  network,\n  isDeleteAssetsList,\n}: {\n  assetsList: AssetsListItem;\n  network: NETWORKS;\n  isDeleteAssetsList: boolean;\n}) => {\n  let response = {\n    error: \"\",\n    assetsLists: {} as AssetsLists,\n  };\n\n  response = await sendMessageToBackground({\n    type: SERVICE_TYPES.MODIFY_ASSETS_LIST,\n    assetsList,\n    network,\n    isDeleteAssetsList,\n  });\n\n  return { assetsLists: response.assetsLists, error: response.error };\n};\n\nexport const simulateTokenTransfer = async (args: {\n  address: string;\n  publicKey: string;\n  memo?: string;\n  params: {\n    publicKey: string;\n    destination: string;\n    amount: number;\n  };\n  networkDetails: NetworkDetails;\n  transactionFee: string;\n}) => {\n  const { address, publicKey, memo, params, networkDetails } = args;\n  const options = {\n    method: \"POST\",\n    headers: {\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      address,\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      pub_key: publicKey,\n      memo,\n      params,\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      network_url: networkDetails.sorobanRpcUrl,\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      network_passphrase: networkDetails.networkPassphrase,\n    }),\n  };\n  const res = await fetch(`${INDEXER_URL}/simulate-token-transfer`, options);\n  const response = await res.json();\n  return {\n    ok: res.ok,\n    response,\n  };\n};\n\nexport const simulateTransaction = async (args: {\n  xdr: string;\n  networkDetails: NetworkDetails;\n}) => {\n  const { xdr, networkDetails } = args;\n  const options = {\n    method: \"POST\",\n    headers: {\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      xdr,\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      network_url: networkDetails.sorobanRpcUrl,\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      network_passphrase: networkDetails.networkPassphrase,\n    }),\n  };\n  const res = await fetch(`${INDEXER_URL}/simulate-tx`, options);\n  const response = await res.json();\n  return {\n    ok: res.ok,\n    response,\n  };\n};\n","import { NETWORKS } from \"@shared/constants/stellar\";\n\n// https://github.com/stellar/soroban-examples/blob/main/token/src/contract.rs\nexport enum SorobanTokenInterface {\n  transfer = \"transfer\",\n  mint = \"mint\",\n}\n\nexport type ArgsForTokenInvocation = {\n  from: string;\n  to: string;\n  amount: bigint | number;\n};\n\nexport type TokenInvocationArgs = ArgsForTokenInvocation & {\n  fnName: SorobanTokenInterface;\n  contractId: string;\n};\n\n// TODO: can we generate this at build time using the cli TS generator? Also should we?\nexport interface SorobanToken {\n  // only currently holds fields we care about\n  transfer: (from: string, to: string, amount: number) => void;\n  mint: (to: string, amount: number) => void;\n  // values below are in storage\n  name: string;\n  balance: number;\n  symbol: string;\n  decimals: number;\n}\n\nexport type AssetsListKey = NETWORKS.PUBLIC | NETWORKS.TESTNET;\n\nexport type AssetsLists = {\n  [K in AssetsListKey]: AssetsListItem[];\n};\n\nexport interface AssetsListItem {\n  url: string;\n  isEnabled: boolean;\n}\n\nexport const DEFAULT_ASSETS_LISTS: AssetsLists = {\n  [NETWORKS.PUBLIC]: [\n    {\n      url: \"https://api.stellar.expert/explorer/public/asset-list/top50\",\n      isEnabled: true,\n    },\n    {\n      url: \"https://raw.githubusercontent.com/soroswap/token-list/main/tokenList.json\",\n      isEnabled: true,\n    },\n    {\n      url: \"https://lobstr.co/api/v1/sep/assets/curated.json\",\n      isEnabled: true,\n    },\n  ],\n  [NETWORKS.TESTNET]: [\n    {\n      url: \"https://api.stellar.expert/explorer/testnet/asset-list/top50\",\n      isEnabled: true,\n    },\n  ],\n};\n","import BigNumber from \"bignumber.js\";\nimport {\n  Address,\n  Asset,\n  Memo,\n  MemoType,\n  Operation,\n  StrKey,\n  Transaction,\n  TransactionBuilder,\n  scValToNative,\n  xdr,\n  walkInvocationTree,\n} from \"stellar-sdk\";\n\nimport {\n  AccountBalancesInterface,\n  Balances,\n  HorizonOperation,\n  SorobanBalance,\n} from \"@shared/api/types\";\nimport { NetworkDetails } from \"@shared/constants/stellar\";\nimport {\n  ArgsForTokenInvocation,\n  SorobanTokenInterface,\n  TokenInvocationArgs,\n} from \"@shared/constants/soroban/token\";\n\nexport const SOROBAN_OPERATION_TYPES = [\n  \"invoke_host_function\",\n  \"invokeHostFunction\",\n];\n\n// All assets on the classic side have 7 decimals\n// https://developers.stellar.org/docs/fundamentals-and-concepts/stellar-data-structures/assets#amount-precision\nexport const CLASSIC_ASSET_DECIMALS = 7;\n\nexport const getAssetDecimals = (\n  asset: string,\n  balances: AccountBalancesInterface,\n  isToken: boolean,\n) => {\n  if (isToken) {\n    const _balances = balances.balances || ({} as NonNullable<Balances>);\n    const balance = _balances[asset];\n\n    if (balance && \"decimals\" in balance) {\n      return Number(balance.decimals);\n    }\n  }\n\n  return CLASSIC_ASSET_DECIMALS;\n};\n\nexport const getTokenBalance = (tokenBalance: SorobanBalance) =>\n  formatTokenAmount(\n    new BigNumber(tokenBalance.total),\n    Number(tokenBalance.decimals),\n  );\n\n// Adopted from https://github.com/ethers-io/ethers.js/blob/master/packages/bignumber/src.ts/fixednumber.ts#L27\nexport const formatTokenAmount = (amount: BigNumber, decimals: number) => {\n  let formatted = amount.toString();\n\n  if (decimals > 0) {\n    formatted = amount.shiftedBy(-decimals).toFixed(decimals).toString();\n\n    // Trim trailing zeros\n    while (formatted[formatted.length - 1] === \"0\") {\n      formatted = formatted.substring(0, formatted.length - 1);\n    }\n\n    if (formatted.endsWith(\".\")) {\n      formatted = formatted.substring(0, formatted.length - 1);\n    }\n  }\n\n  return formatted;\n};\n\nexport const parseTokenAmount = (value: string, decimals: number) => {\n  const comps = value.split(\".\");\n\n  let whole = comps[0];\n  let fraction = comps[1];\n  if (!whole) {\n    whole = \"0\";\n  }\n  if (!fraction) {\n    fraction = \"0\";\n  }\n\n  // Trim trailing zeros\n  while (fraction[fraction.length - 1] === \"0\") {\n    fraction = fraction.substring(0, fraction.length - 1);\n  }\n\n  // If decimals is 0, we have an empty string for fraction\n  if (fraction === \"\") {\n    fraction = \"0\";\n  }\n\n  // Fully pad the string with zeros to get to value\n  while (fraction.length < decimals) {\n    fraction += \"0\";\n  }\n\n  const wholeValue = new BigNumber(whole);\n  const fractionValue = new BigNumber(fraction);\n\n  return wholeValue.shiftedBy(decimals).plus(fractionValue);\n};\n\nexport const addressToString = (address: xdr.ScAddress) => {\n  if (address.switch().name === \"scAddressTypeAccount\") {\n    return StrKey.encodeEd25519PublicKey(address.accountId().ed25519());\n  }\n  return StrKey.encodeContract(address.contractId());\n};\n\nexport const getArgsForTokenInvocation = (\n  fnName: string,\n  args: xdr.ScVal[],\n): ArgsForTokenInvocation => {\n  let amount: bigint | number;\n  let from = \"\";\n  let to = \"\";\n\n  switch (fnName) {\n    case SorobanTokenInterface.transfer:\n      from = addressToString(args[0].address());\n      to = addressToString(args[1].address());\n      amount = scValToNative(args[2]);\n      break;\n    case SorobanTokenInterface.mint:\n      to = addressToString(args[0].address());\n      amount = scValToNative(args[1]);\n      break;\n    default:\n      amount = BigInt(0);\n  }\n\n  return { from, to, amount };\n};\n\nconst isSorobanOp = (operation: HorizonOperation) =>\n  SOROBAN_OPERATION_TYPES.includes(operation.type);\n\nexport const getTokenInvocationArgs = (\n  hostFn: Operation.InvokeHostFunction,\n): TokenInvocationArgs | null => {\n  if (!hostFn?.func?.invokeContract) {\n    return null;\n  }\n\n  let invokedContract: xdr.InvokeContractArgs;\n\n  try {\n    invokedContract = hostFn.func.invokeContract();\n  } catch (e) {\n    return null;\n  }\n\n  const contractId = StrKey.encodeContract(\n    invokedContract.contractAddress().contractId(),\n  );\n  const fnName = invokedContract.functionName().toString();\n  const args = invokedContract.args();\n\n  if (\n    fnName !== SorobanTokenInterface.transfer &&\n    fnName !== SorobanTokenInterface.mint\n  ) {\n    return null;\n  }\n\n  let opArgs: ArgsForTokenInvocation;\n\n  try {\n    opArgs = getArgsForTokenInvocation(fnName, args);\n  } catch (e) {\n    return null;\n  }\n\n  return {\n    fnName,\n    contractId,\n    ...opArgs,\n  };\n};\n\nexport const getAttrsFromSorobanHorizonOp = (\n  operation: HorizonOperation,\n  networkDetails: NetworkDetails,\n) => {\n  if (!isSorobanOp(operation)) {\n    return null;\n  }\n\n  // operation record from Mercury\n  // why does transaction_attr not exist on any horizon types?\n  const _op = operation as any;\n  if (_op.transaction_attr.contractId) {\n    return {\n      contractId: _op.transaction_attr.contractId,\n      fnName: _op.transaction_attr.fnName,\n      ..._op.transaction_attr.args,\n    };\n  }\n\n  const txEnvelope = TransactionBuilder.fromXDR(\n    _op.transaction_attr.envelope_xdr as string,\n    networkDetails.networkPassphrase,\n  ) as Transaction<Memo<MemoType>, Operation.InvokeHostFunction[]>;\n\n  const invokeHostFn = txEnvelope.operations[0]; // only one op per tx in Soroban right now\n\n  return getTokenInvocationArgs(invokeHostFn);\n};\n\nexport const isContractId = (contractId: string) => {\n  try {\n    StrKey.decodeContract(contractId);\n    return true;\n  } catch (error) {\n    return false;\n  }\n};\n\nexport interface InvocationTree {\n  type: string;\n  args: any;\n  invocations: InvocationTree[];\n}\n\nexport function buildInvocationTree(root: xdr.SorobanAuthorizedInvocation) {\n  const fn = root.function();\n  const output = {} as InvocationTree;\n  const inner = fn.value();\n\n  switch (fn.switch().value) {\n    // sorobanAuthorizedFunctionTypeContractFn\n    case 0: {\n      const _inner = inner as xdr.InvokeContractArgs;\n      output.type = \"execute\";\n      output.args = {\n        source: Address.fromScAddress(_inner.contractAddress()).toString(),\n        function: _inner.functionName().toString(),\n        args: _inner.args().map((arg) => scValToNative(arg)),\n      };\n      break;\n    }\n\n    // sorobanAuthorizedFunctionTypeCreateContractHostFn\n    case 2:\n    case 1: {\n      const _inner = inner as xdr.CreateContractArgs | xdr.CreateContractArgsV2;\n      output.type = \"create\";\n      output.args = {} as {\n        type: string;\n        wasm: any;\n      };\n\n      // If the executable is a WASM, the preimage MUST be an address. If it's a\n      // token, the preimage MUST be an asset. This is a cheeky way to check\n      // that, because wasm=0, token=1 and address=0, asset=1 in the XDR switch\n      // values.\n      //\n      // The first part may not be true in V2, but we'd need to update this code\n      // anyway so it can still be an error.\n      const [exec, preimage] = [\n        _inner.executable(),\n        _inner.contractIdPreimage(),\n      ];\n      if (!!exec.switch().value !== !!preimage.switch().value) {\n        throw new Error(\n          `creation function appears invalid: ${JSON.stringify(\n            inner,\n          )} (should be wasm+address or token+asset)`,\n        );\n      }\n\n      switch (exec.switch().value) {\n        // contractExecutableWasm\n        case 0: {\n          /** @type {xdr.ContractIdPreimageFromAddress} */\n          const details = preimage.fromAddress();\n\n          output.args.type = \"wasm\";\n          output.args.wasm = {\n            salt: details.salt().toString(\"hex\"),\n            hash: exec.wasmHash().toString(\"hex\"),\n            address: Address.fromScAddress(details.address()).toString(),\n          };\n          // create contract V2\n          if (fn.switch().value === 2) {\n            const v2Args = _inner as xdr.CreateContractArgsV2;\n            output.args.constructorArgs = v2Args.constructorArgs();\n          }\n          break;\n        }\n\n        // contractExecutableStellarAsset\n        case 1:\n          output.args.type = \"sac\";\n          output.args.asset = Asset.fromOperation(\n            preimage.fromAsset(),\n          ).toString();\n          // create contract V2\n          if (fn.switch().value === 2) {\n            const v2Args = _inner as xdr.CreateContractArgsV2;\n            output.args.constructorArgs = v2Args.constructorArgs();\n          }\n          break;\n\n        default:\n          throw new Error(`unknown creation type: ${JSON.stringify(exec)}`);\n      }\n\n      break;\n    }\n\n    default:\n      throw new Error(\n        `unknown invocation type (${fn.switch()}): ${JSON.stringify(fn)}`,\n      );\n  }\n\n  output.invocations = root.subInvocations().map((i) => buildInvocationTree(i));\n  return output;\n}\n\nexport const scValByType = (scVal: xdr.ScVal) => {\n  switch (scVal.switch()) {\n    case xdr.ScValType.scvAddress(): {\n      const address = scVal.address();\n      const addressType = address.switch();\n      if (addressType.name === \"scAddressTypeAccount\") {\n        return StrKey.encodeEd25519PublicKey(address.accountId().ed25519());\n      }\n      return StrKey.encodeContract(address.contractId());\n    }\n\n    case xdr.ScValType.scvBool(): {\n      return scVal.b();\n    }\n\n    case xdr.ScValType.scvBytes(): {\n      return scVal\n        .bytes()\n        .toJSON()\n        .data.map((d) => d.toString(16).padStart(2, \"0\"))\n        .join(\"\");\n    }\n\n    case xdr.ScValType.scvContractInstance(): {\n      const instance = scVal.instance();\n      return instance.executable().wasmHash()?.toString();\n    }\n\n    case xdr.ScValType.scvError(): {\n      const error = scVal.error();\n      return error.value();\n    }\n\n    case xdr.ScValType.scvTimepoint():\n    case xdr.ScValType.scvDuration():\n    case xdr.ScValType.scvI128():\n    case xdr.ScValType.scvI256():\n    case xdr.ScValType.scvI32():\n    case xdr.ScValType.scvI64():\n    case xdr.ScValType.scvU128():\n    case xdr.ScValType.scvU256():\n    case xdr.ScValType.scvU32():\n    case xdr.ScValType.scvU64(): {\n      return scValToNative(scVal).toString();\n    }\n\n    case xdr.ScValType.scvLedgerKeyNonce():\n    case xdr.ScValType.scvLedgerKeyContractInstance(): {\n      if (scVal.switch().name === \"scvLedgerKeyNonce\") {\n        const val = scVal.nonceKey().nonce();\n        return val.toString();\n      }\n      return scVal.value();\n    }\n\n    case xdr.ScValType.scvVec():\n    case xdr.ScValType.scvMap(): {\n      return JSON.stringify(\n        scValToNative(scVal),\n        (_, val) => (typeof val === \"bigint\" ? val.toString() : val),\n        2,\n      );\n    }\n\n    case xdr.ScValType.scvString():\n    case xdr.ScValType.scvSymbol(): {\n      const native = scValToNative(scVal);\n      if (native.constructor === \"Uint8Array\") {\n        return native.toString();\n      }\n      return native;\n    }\n\n    case xdr.ScValType.scvVoid(): {\n      return null;\n    }\n\n    default:\n      return null;\n  }\n};\n\nexport function getInvocationDetails(\n  invocation: xdr.SorobanAuthorizedInvocation,\n) {\n  const invocations = [] as InvocationArgs[];\n\n  walkInvocationTree(invocation, (inv) => {\n    const args = getInvocationArgs(inv);\n    if (args) {\n      invocations.push(args);\n    }\n\n    return null;\n  });\n\n  return invocations.filter(isInvocationArg);\n}\n\nexport interface FnArgsInvoke {\n  type: \"invoke\";\n  fnName: string;\n  contractId: string;\n  args: xdr.ScVal[];\n}\n\nexport interface FnArgsCreateWasm {\n  type: \"wasm\";\n  salt: string;\n  hash: string;\n  address: string;\n  args?: xdr.ScVal[];\n}\n\nexport interface FnArgsCreateSac {\n  type: \"sac\";\n  asset: string;\n  args?: xdr.ScVal[];\n}\n\ntype InvocationArgs = FnArgsInvoke | FnArgsCreateWasm | FnArgsCreateSac;\n\nconst isInvocationArg = (\n  invocation: InvocationArgs | undefined,\n): invocation is InvocationArgs => !!invocation;\n\nexport function getInvocationArgs(\n  invocation: xdr.SorobanAuthorizedInvocation,\n): InvocationArgs | undefined {\n  const fn = invocation.function();\n\n  switch (fn.switch().value) {\n    // sorobanAuthorizedFunctionTypeContractFn\n    case 0: {\n      const _invocation = fn.contractFn();\n      const contractId = StrKey.encodeContract(\n        _invocation.contractAddress().contractId(),\n      );\n      const fnName = _invocation.functionName().toString();\n      const args = _invocation.args();\n      return { fnName, contractId, args, type: \"invoke\" };\n    }\n\n    // sorobanAuthorizedFunctionTypeCreateContractV2HostFn\n    // sorobanAuthorizedFunctionTypeCreateContractHostFn\n    case 2:\n    case 1: {\n      const _invocation =\n        fn.switch().value === 2\n          ? fn.createContractV2HostFn()\n          : fn.createContractHostFn();\n      const [exec, preimage] = [\n        _invocation.executable(),\n        _invocation.contractIdPreimage(),\n      ];\n\n      switch (exec.switch().value) {\n        // contractExecutableWasm\n        case 0: {\n          const details = preimage.fromAddress();\n\n          const contractDetails = {\n            type: \"wasm\",\n            salt: details.salt().toString(\"hex\"),\n            hash: exec.wasmHash().toString(\"hex\"),\n            address: Address.fromScAddress(details.address()).toString(),\n          } as FnArgsCreateWasm;\n\n          if (fn.switch().value === 2) {\n            contractDetails.args = (\n              _invocation as xdr.CreateContractArgsV2\n            ).constructorArgs();\n          }\n\n          return contractDetails;\n        }\n\n        // contractExecutableStellarAsset\n        case 1: {\n          const sacDetails = {\n            type: \"sac\",\n            asset: Asset.fromOperation(preimage.fromAsset()).toString(),\n          } as FnArgsCreateSac;\n\n          if (fn.switch().value === 2) {\n            sacDetails.args = (\n              _invocation as xdr.CreateContractArgsV2\n            ).constructorArgs();\n          }\n\n          return sacDetails;\n        }\n\n        default:\n          throw new Error(`unknown creation type: ${JSON.stringify(exec)}`);\n      }\n    }\n\n    default: {\n      return undefined;\n    }\n  }\n}\n\nexport const getCreateContractArgs = (hostFn: xdr.HostFunction) => {\n  if (\n    hostFn.switch() !== xdr.HostFunctionType.hostFunctionTypeCreateContractV2()\n  ) {\n    const args = hostFn.createContract();\n    return {\n      contractIdPreimage: args.contractIdPreimage(),\n      executable: args.executable(),\n    };\n  }\n  const argsV2 = hostFn.createContractV2();\n  return {\n    contractIdPreimage: argsV2.contractIdPreimage(),\n    executable: argsV2.executable(),\n    constructorArgs: argsV2.constructorArgs(),\n  };\n};\n","import { Horizon } from \"stellar-sdk\";\nimport { BigNumber } from \"bignumber.js\";\nimport {\n  AssetType,\n  Balances,\n  HorizonOperation,\n  SorobanBalance,\n  TokenBalances,\n} from \"@shared/api/types\";\nimport { NetworkDetails } from \"@shared/constants/stellar\";\nimport { SorobanTokenInterface } from \"@shared/constants/soroban/token\";\n\nimport {\n  getAssetFromCanonical,\n  getCanonicalFromAsset,\n  isTestnet,\n} from \"helpers/stellar\";\nimport { getAttrsFromSorobanHorizonOp } from \"./soroban\";\n\nexport const LP_IDENTIFIER = \":lp\";\n\nexport const sortBalances = (\n  balances: Balances,\n  sorobanBalances?: TokenBalances,\n): AssetType[] => {\n  const collection = [] as any[];\n  const lpBalances = [] as any[];\n  const _sorobanBalances = sorobanBalances || [];\n  if (!balances) {\n    return collection;\n  }\n\n  // put XLM at the top of the balance list, LP shares last\n  Object.entries(balances).forEach(([k, v]) => {\n    if (k === \"native\") {\n      collection.unshift(v);\n    } else if (k.includes(LP_IDENTIFIER)) {\n      lpBalances.push(v);\n    } else {\n      collection.push(v);\n    }\n  });\n  return collection.concat(_sorobanBalances).concat(lpBalances);\n};\n\nexport const getIsPayment = (type: Horizon.HorizonApi.OperationResponseType) =>\n  [\n    Horizon.HorizonApi.OperationResponseType.payment,\n    Horizon.HorizonApi.OperationResponseType.pathPayment,\n    Horizon.HorizonApi.OperationResponseType.pathPaymentStrictSend,\n  ].includes(type);\n\nexport const getIsSupportedSorobanOp = (\n  operation: HorizonOperation,\n  networkDetails: NetworkDetails,\n) => {\n  const attrs = getAttrsFromSorobanHorizonOp(operation, networkDetails);\n  return (\n    !!attrs &&\n    Object.values(SorobanTokenInterface).includes(\n      attrs.fnName as SorobanTokenInterface,\n    )\n  );\n};\n\nexport const getIsSwap = (operation: HorizonOperation) =>\n  operation.type_i === 13 && operation.source_account === operation.to;\n\ninterface SortOperationsByAsset {\n  operations: HorizonOperation[];\n  balances: AssetType[] | SorobanBalance[];\n  networkDetails: NetworkDetails;\n  publicKey: string;\n}\n\nexport interface AssetOperations {\n  [key: string]: HorizonOperation[];\n}\n\nexport const sortOperationsByAsset = ({\n  balances,\n  operations,\n  networkDetails,\n  publicKey,\n}: SortOperationsByAsset) => {\n  const assetOperationMap = {} as AssetOperations;\n\n  balances.forEach((bal) => {\n    if (\"token\" in bal) {\n      const issuer =\n        bal.token !== undefined && \"issuer\" in bal.token\n          ? bal.token.issuer.key\n          : \"\";\n      const code =\n        bal.token !== undefined && \"code\" in bal.token ? bal.token.code : \"\";\n      assetOperationMap[getCanonicalFromAsset(code, issuer)] = [];\n    }\n    if (\"contractId\" in bal && \"symbol\" in bal) {\n      assetOperationMap[\n        getCanonicalFromAsset(bal.symbol, bal.contractId || \"\")\n      ] = [];\n    }\n  });\n\n  operations.forEach((op) => {\n    if (getIsPayment(op.type)) {\n      Object.keys(assetOperationMap).forEach((assetKey) => {\n        const asset = getAssetFromCanonical(assetKey);\n        const assetCode = asset.code === \"XLM\" ? \"native\" : asset.code;\n        const assetIssuer = asset.issuer;\n\n        if (\n          (\"asset_code\" in op &&\n            \"asset_issuer\" in op &&\n            op.asset_code === assetCode &&\n            op.asset_issuer === assetIssuer) ||\n          (\"asset_type\" in op && op.asset_type === assetCode)\n        ) {\n          assetOperationMap[assetKey].push(op);\n        } else if (\"source_asset_type\" in op || \"source_asset_code\" in op) {\n          if (\n            (\"source_asset_type\" in op && op.source_asset_type === assetCode) ||\n            (op.source_asset_code === assetCode &&\n              \"source_asset_issuer\" in op &&\n              op.source_asset_issuer === assetIssuer)\n          ) {\n            assetOperationMap[assetKey].push(op);\n          }\n        }\n      });\n    }\n\n    if (getIsSupportedSorobanOp(op, networkDetails)) {\n      Object.keys(assetOperationMap).forEach((assetKey) => {\n        const asset = getAssetFromCanonical(assetKey);\n        const attrs = getAttrsFromSorobanHorizonOp(op, networkDetails);\n        if (\n          attrs &&\n          op.source_account === publicKey &&\n          asset.issuer === attrs.contractId\n        ) {\n          assetOperationMap[assetKey].push(op);\n        }\n      });\n    }\n  });\n\n  return assetOperationMap;\n};\n\nexport const getStellarExpertUrl = (networkDetails: NetworkDetails) =>\n  `https://stellar.expert/explorer/${\n    isTestnet(networkDetails) ? \"testnet\" : \"public\"\n  }`;\n\nexport const getApiStellarExpertUrl = (networkDetails: NetworkDetails) =>\n  `https://api.stellar.expert/explorer/${\n    isTestnet(networkDetails) ? \"testnet\" : \"public\"\n  }`;\n\ninterface GetAvailableBalance {\n  accountBalances: AssetType[];\n  selectedAsset: string;\n  recommendedFee?: string;\n  subentryCount: number;\n}\n\nexport const getAvailableBalance = ({\n  accountBalances,\n  selectedAsset,\n  recommendedFee,\n  subentryCount,\n}: GetAvailableBalance) => {\n  let availBalance = \"0\";\n  if (accountBalances.length) {\n    const balance = getRawBalance(accountBalances, selectedAsset);\n    if (!balance) {\n      return availBalance;\n    }\n    if (selectedAsset === \"native\") {\n      // take base reserve into account for XLM payments\n      const baseReserve = (2 + subentryCount) * 0.5;\n\n      // needed for different wallet-sdk bignumber.js version\n      const currentBal = new BigNumber(balance.total.toFixed());\n      let newBalance = currentBal.minus(new BigNumber(baseReserve));\n\n      if (recommendedFee) {\n        newBalance = newBalance.minus(new BigNumber(Number(recommendedFee)));\n      }\n\n      availBalance = newBalance.toFixed();\n    } else {\n      availBalance = balance.total.toFixed();\n    }\n  }\n\n  return availBalance;\n};\n\nexport const getRawBalance = (accountBalances: AssetType[], asset: string) =>\n  accountBalances.find((balance) => {\n    if (\"token\" in balance) {\n      if (balance.token.type === \"native\") {\n        return asset === balance.token.type;\n      }\n\n      if (\"issuer\" in balance.token) {\n        return asset === `${balance.token.code}:${balance.token.issuer.key}`;\n      }\n    }\n    throw new Error(\"Asset type not supported\");\n  });\n\nexport const getIssuerFromBalance = (balance: AssetType) => {\n  if (\"token\" in balance && \"issuer\" in balance?.token) {\n    return balance.token.issuer.key.toString();\n  }\n\n  return \"\";\n};\n\nexport const isNetworkUrlValid = (\n  networkUrl: string,\n  isHttpAllowed: boolean,\n) => {\n  let isValid = true;\n\n  try {\n    // eslint-disable-next-line no-new\n    new Horizon.Server(networkUrl, { allowHttp: isHttpAllowed });\n  } catch (e) {\n    console.error(e);\n    isValid = false;\n  }\n  return isValid;\n};\n\nexport const displaySorobanId = (\n  fullStr: string,\n  strLen: number,\n  separator = \"...\",\n) => {\n  if (fullStr.length <= strLen) {\n    return fullStr;\n  }\n\n  const sepLen = separator.length;\n  const charsToShow = strLen - sepLen;\n  const frontChars = Math.ceil(charsToShow / 2);\n  const backChars = Math.floor(charsToShow / 2);\n\n  return (\n    fullStr.substring(0, frontChars) +\n    separator +\n    fullStr.substring(fullStr.length - backChars)\n  );\n};\n\nexport const isSorobanIssuer = (issuer: string) => !issuer.startsWith(\"G\");\n","import punycode from \"punycode\";\nimport browser from \"webextension-polyfill\";\nimport { TransactionInfo } from \"../types/transactions\";\n\nexport interface MessageToSign {\n  isDomainListedAllowed: boolean;\n  domain: string;\n  tab?: browser.Tabs.Tab;\n  message: string;\n  url: string;\n  accountToSign: string;\n  networkPassphrase?: string;\n}\n\nexport interface EntryToSign {\n  isDomainListedAllowed: boolean;\n  domain: string;\n  tab?: browser.Tabs.Tab;\n  entry: string;\n  url: string;\n  accountToSign: string;\n  networkPassphrase?: string;\n}\n\nexport const encodeObject = (obj: object) =>\n  btoa(unescape(encodeURIComponent(JSON.stringify(obj))));\n\nexport const decodeString = (str: string) =>\n  decodeURIComponent(escape(atob(str)));\n\nexport const newTabHref = (path = \"\", queryParams = \"\") =>\n  `index.html#${path}${queryParams ? \"?\" : \"\"}${queryParams}`;\n\nexport const removeQueryParam = (url = \"\") => url.replace(/\\?(.*)/, \"\");\n\nexport const parsedSearchParam = (\n  param: string,\n): TransactionInfo | MessageToSign | EntryToSign => {\n  const decodedSearchParam = decodeString(param.replace(\"?\", \"\"));\n  return decodedSearchParam ? JSON.parse(decodedSearchParam) : {};\n};\n\nexport const getUrlHostname = (url: string) => {\n  try {\n    const u = new URL(url);\n    return u.hostname;\n  } catch {\n    return \"\";\n  }\n};\n\nexport const getUrlDomain = (url: string) => {\n  try {\n    const u = new URL(url);\n    const split = u.hostname.split(\".\");\n    if (split.length > 2) {\n      return `${split[split.length - 2]}.${split[split.length - 1]}`;\n    }\n    return u.hostname;\n  } catch {\n    return \"\";\n  }\n};\n\nexport const getPunycodedDomain = (url: string) => punycode.toASCII(url);\n","import BigNumber from \"bignumber.js\";\nimport { Asset, Networks } from \"stellar-sdk\";\nimport isEqual from \"lodash/isEqual\";\n\nimport { isSorobanIssuer } from \"popup/helpers/account\";\nimport {\n  FUTURENET_NETWORK_DETAILS,\n  NETWORK_URLS,\n  NetworkDetails,\n} from \"@shared/constants/stellar\";\n\nimport { TransactionInfo } from \"types/transactions\";\nimport { parsedSearchParam, getUrlHostname } from \"./urls\";\n\nexport const truncateString = (str: string, charCount = 4) =>\n  str ? `${str.slice(0, charCount)}…${str.slice(-charCount)}` : \"\";\n\nexport const truncatedPublicKey = (publicKey: string, charCount = 4) =>\n  truncateString(publicKey, charCount);\n\nexport const truncatedFedAddress = (addr: string) => {\n  if (!addr || addr.indexOf(\"*\") === -1) {\n    return addr;\n  }\n  const domain = addr.split(\"*\")[1];\n  return `${addr[0]}...*${domain}`;\n};\n\nexport const truncatedPoolId = (poolId: string) => truncateString(poolId);\n\nexport const getTransactionInfo = (search: string) => {\n  const searchParams = parsedSearchParam(search) as TransactionInfo;\n\n  const {\n    accountToSign,\n    url,\n    transaction,\n    transactionXdr,\n    isDomainListedAllowed,\n    flaggedKeys,\n    tab: { title = \"\" },\n  } = searchParams;\n  const hostname = getUrlHostname(url);\n  const isHttpsDomain = url.startsWith(\"https\");\n  const { _operations = [] } = transaction;\n  const operationTypes = _operations.map(\n    (operation: { type: string }) => operation.type,\n  );\n\n  return {\n    accountToSign,\n    transaction,\n    transactionXdr,\n    domain: hostname,\n    domainTitle: title,\n    isHttpsDomain,\n    operations: _operations,\n    operationTypes,\n    isDomainListedAllowed,\n    flaggedKeys,\n  };\n};\n\nexport const getAssetFromCanonical = (canonical: string) => {\n  if (canonical === \"native\") {\n    return Asset.native();\n  }\n  if (canonical.includes(\":\")) {\n    const [code, issuer] = canonical.split(\":\");\n\n    if (isSorobanIssuer(issuer)) {\n      return {\n        code,\n        issuer,\n      };\n    }\n    return new Asset(code, issuer);\n  }\n\n  throw new Error(`invalid asset canonical id: ${canonical}`);\n};\n\nexport const getCanonicalFromAsset = (\n  assetCode: string,\n  assetIssuer: string,\n) => {\n  if (assetCode === \"XLM\" && !assetIssuer) {\n    return \"native\";\n  }\n  if (!assetIssuer) {\n    return assetCode;\n  }\n  return `${assetCode}:${assetIssuer}`;\n};\n\nexport const stroopToXlm = (\n  stroops: BigNumber | string | number,\n): BigNumber => {\n  if (stroops instanceof BigNumber) {\n    return stroops.dividedBy(1e7);\n  }\n  return new BigNumber(Number(stroops) / 1e7);\n};\n\nexport const xlmToStroop = (lumens: BigNumber | string): BigNumber => {\n  if (lumens instanceof BigNumber) {\n    return lumens.times(1e7);\n  }\n  // round to nearest stroop\n  return new BigNumber(Math.round(Number(lumens) * 1e7));\n};\n\nexport const getConversionRate = (\n  sourceAmount: string,\n  destAmount: string,\n): BigNumber => new BigNumber(destAmount).div(new BigNumber(sourceAmount));\n\nexport const formatDomain = (domain: string) => {\n  if (domain) {\n    domain.replace(\"https://\", \"\").replace(\"www.\", \"\");\n    return domain;\n  }\n  return \"Stellar Network\";\n};\n\nexport const isMuxedAccount = (publicKey: string) => publicKey.startsWith(\"M\");\n\nexport const isFederationAddress = (address: string) => address.includes(\"*\");\n\nexport const isMainnet = (networkDetails: NetworkDetails) => {\n  const { networkPassphrase } = networkDetails;\n\n  return networkPassphrase === Networks.PUBLIC;\n};\n\nexport const isTestnet = (networkDetails: NetworkDetails) => {\n  const { networkPassphrase, networkUrl } = networkDetails;\n\n  return (\n    networkPassphrase === Networks.TESTNET &&\n    networkUrl === NETWORK_URLS.TESTNET\n  );\n};\n\nexport const isFuturenet = (networkDetails: NetworkDetails) => {\n  const { networkPassphrase, networkUrl } = networkDetails;\n\n  return (\n    networkPassphrase === FUTURENET_NETWORK_DETAILS.networkPassphrase &&\n    networkUrl === NETWORK_URLS.FUTURENET\n  );\n};\n\nexport const isActiveNetwork = (\n  networkA: NetworkDetails,\n  networkB: NetworkDetails,\n) => isEqual(networkA, networkB);\n","import {\n  createSelector,\n  createAsyncThunk,\n  createSlice,\n  PayloadAction,\n} from \"@reduxjs/toolkit\";\n\nimport {\n  saveAllowList as saveAllowListService,\n  saveSettings as saveSettingsService,\n  saveExperimentalFeatures as saveExperimentalFeaturesService,\n  loadSettings as loadSettingsService,\n  changeNetwork as changeNetworkService,\n  addCustomNetwork as addCustomNetworkService,\n  removeCustomNetwork as removeCustomNetworkService,\n  editCustomNetwork as editCustomNetworkService,\n  addAssetsList as addAssetsListService,\n  modifyAssetsList as modifyAssetsListService,\n} from \"@shared/api/internal\";\nimport {\n  NETWORKS,\n  NetworkDetails,\n  DEFAULT_NETWORKS,\n  MAINNET_NETWORK_DETAILS,\n} from \"@shared/constants/stellar\";\nimport {\n  AssetsListItem,\n  AssetsLists,\n  DEFAULT_ASSETS_LISTS,\n} from \"@shared/constants/soroban/token\";\n\nimport {\n  Settings,\n  IndexerSettings,\n  SettingsState,\n  ExperimentalFeatures,\n} from \"@shared/api/types\";\n\nimport { isMainnet } from \"helpers/stellar\";\n\ninterface ErrorMessage {\n  errorMessage: string;\n}\n\nconst settingsInitialState: Settings = {\n  allowList: [],\n  isDataSharingAllowed: false,\n  networkDetails: {\n    network: \"\",\n    networkName: \"\",\n    networkUrl: \"\",\n    networkPassphrase: \"\",\n    sorobanRpcUrl: \"\",\n  } as NetworkDetails,\n  networksList: DEFAULT_NETWORKS,\n  isMemoValidationEnabled: true,\n  isHideDustEnabled: true,\n  error: \"\",\n};\n\nconst experimentalFeaturesInitialState = {\n  isExperimentalModeEnabled: false,\n  isHashSigningEnabled: false,\n  isNonSSLEnabled: false,\n  experimentalFeaturesState: SettingsState.IDLE,\n};\n\nconst indexerInitialState: IndexerSettings = {\n  settingsState: SettingsState.IDLE,\n  isSorobanPublicEnabled: false,\n  isRpcHealthy: false,\n  userNotification: { enabled: false, message: \"\" },\n};\n\nconst initialState = {\n  ...settingsInitialState,\n  ...indexerInitialState,\n  ...experimentalFeaturesInitialState,\n  assetsLists: DEFAULT_ASSETS_LISTS,\n};\n\nexport const loadSettings = createAsyncThunk(\"settings/loadSettings\", () =>\n  loadSettingsService(),\n);\n\nexport const saveAllowList = createAsyncThunk<\n  { allowList: string[] },\n  {\n    allowList: string[];\n  },\n  { rejectValue: ErrorMessage }\n>(\"settings/saveAllowList\", async ({ allowList }, thunkApi) => {\n  let res = { allowList: settingsInitialState.allowList };\n\n  try {\n    res = await saveAllowListService({\n      allowList,\n    });\n  } catch (e) {\n    console.error(e);\n    const message = e instanceof Error ? e.message : JSON.stringify(e);\n    return thunkApi.rejectWithValue({\n      errorMessage: message,\n    });\n  }\n\n  return res;\n});\n\nexport const saveSettings = createAsyncThunk<\n  Settings & IndexerSettings,\n  {\n    isDataSharingAllowed: boolean;\n    isMemoValidationEnabled: boolean;\n    isHideDustEnabled: boolean;\n  },\n  { rejectValue: ErrorMessage }\n>(\n  \"settings/saveSettings\",\n  async (\n    { isDataSharingAllowed, isMemoValidationEnabled, isHideDustEnabled },\n    thunkApi,\n  ) => {\n    let res = {\n      ...settingsInitialState,\n      isSorobanPublicEnabled: false,\n      isRpcHealthy: false,\n      userNotification: { enabled: false, message: \"\" },\n      settingsState: SettingsState.IDLE,\n      isHideDustEnabled: true,\n    };\n\n    try {\n      res = await saveSettingsService({\n        isDataSharingAllowed,\n        isMemoValidationEnabled,\n        isHideDustEnabled,\n      });\n    } catch (e) {\n      console.error(e);\n      const message = e instanceof Error ? e.message : JSON.stringify(e);\n      return thunkApi.rejectWithValue({\n        errorMessage: message,\n      });\n    }\n\n    return res;\n  },\n);\n\nexport const saveExperimentalFeatures = createAsyncThunk<\n  ExperimentalFeatures,\n  {\n    isExperimentalModeEnabled: boolean;\n    isHashSigningEnabled: boolean;\n    isNonSSLEnabled: boolean;\n  },\n  { rejectValue: ErrorMessage }\n>(\n  \"settings/saveExperimentalFeaturss\",\n  async (\n    { isExperimentalModeEnabled, isHashSigningEnabled, isNonSSLEnabled },\n    thunkApi,\n  ) => {\n    let res = {\n      ...experimentalFeaturesInitialState,\n      networkDetails: settingsInitialState.networkDetails,\n      networksList: settingsInitialState.networksList,\n    };\n\n    try {\n      res = await saveExperimentalFeaturesService({\n        isExperimentalModeEnabled,\n        isHashSigningEnabled,\n        isNonSSLEnabled,\n      });\n    } catch (e) {\n      console.error(e);\n      const message = e instanceof Error ? e.message : JSON.stringify(e);\n      return thunkApi.rejectWithValue({\n        errorMessage: message,\n      });\n    }\n\n    return res;\n  },\n);\n\nexport const changeNetwork = createAsyncThunk<\n  { networkDetails: NetworkDetails; isRpcHealthy: boolean },\n  { networkName: string },\n  { rejectValue: ErrorMessage }\n>(\"settings/changeNetwork\", ({ networkName }) =>\n  changeNetworkService(networkName),\n);\n\nexport const addCustomNetwork = createAsyncThunk<\n  { networksList: NetworkDetails[] },\n  { networkDetails: NetworkDetails },\n  { rejectValue: ErrorMessage }\n>(\"settings/addCustomNetwork\", async ({ networkDetails }, thunkApi) => {\n  let res;\n  try {\n    res = await addCustomNetworkService(networkDetails);\n  } catch (e) {\n    console.error(e);\n    const message = e instanceof Error ? e.message : JSON.stringify(e);\n    return thunkApi.rejectWithValue({\n      errorMessage: message,\n    });\n  }\n\n  return res;\n});\n\nexport const removeCustomNetwork = createAsyncThunk<\n  { networkDetails: NetworkDetails; networksList: NetworkDetails[] },\n  { networkName: string },\n  { rejectValue: ErrorMessage }\n>(\"settings/removeCustomNetwork\", ({ networkName }) =>\n  removeCustomNetworkService(networkName),\n);\n\nexport const editCustomNetwork = createAsyncThunk<\n  { networkDetails: NetworkDetails; networksList: NetworkDetails[] },\n  { networkDetails: NetworkDetails; networkIndex: number },\n  { rejectValue: ErrorMessage }\n>(\"settings/editCustomNetwork\", ({ networkDetails, networkIndex }) =>\n  editCustomNetworkService({ networkDetails, networkIndex }),\n);\n\nexport const addAssetsList = createAsyncThunk<\n  { assetsLists: AssetsLists; error: string },\n  { assetsList: AssetsListItem; network: NETWORKS },\n  { rejectValue: ErrorMessage }\n>(\"settings/addAssetsList\", async ({ assetsList, network }, thunkApi) => {\n  const res = await addAssetsListService({ assetsList, network });\n\n  if (res.error) {\n    return thunkApi.rejectWithValue({\n      errorMessage: res.error || \"Unable to add asset list\",\n    });\n  }\n\n  return res;\n});\n\nexport const modifyAssetsList = createAsyncThunk<\n  { assetsLists: AssetsLists; error: string },\n  {\n    assetsList: AssetsListItem;\n    network: NETWORKS;\n    isDeleteAssetsList: boolean;\n  },\n  { rejectValue: ErrorMessage }\n>(\n  \"settings/modifyAssetsList\",\n  async ({ assetsList, network, isDeleteAssetsList }, thunkApi) => {\n    const res = await modifyAssetsListService({\n      assetsList,\n      network,\n      isDeleteAssetsList,\n    });\n\n    if (res.error) {\n      return thunkApi.rejectWithValue({\n        errorMessage: res.error || \"Unable to modify asset list\",\n      });\n    }\n\n    return res;\n  },\n);\n\nconst settingsSlice = createSlice({\n  name: \"settings\",\n  initialState,\n  reducers: {\n    clearSettingsError(state) {\n      state.error = \"\";\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(\n      saveAllowList.fulfilled,\n      (\n        state,\n        action: PayloadAction<{\n          allowList: string[];\n        }>,\n      ) => {\n        const { allowList } = action?.payload || {\n          networksList: initialState.allowList,\n        };\n\n        return {\n          ...state,\n          allowList,\n        };\n      },\n    );\n    builder.addCase(saveSettings.fulfilled, (state, action) => {\n      const {\n        isDataSharingAllowed,\n        networkDetails,\n        isMemoValidationEnabled,\n        networksList,\n        isRpcHealthy,\n        isSorobanPublicEnabled,\n        isHideDustEnabled,\n      } = action?.payload || {\n        ...initialState,\n      };\n\n      return {\n        ...state,\n        isDataSharingAllowed,\n        isMemoValidationEnabled,\n        networkDetails,\n        networksList,\n        isRpcHealthy,\n        isSorobanPublicEnabled,\n        isHideDustEnabled,\n      };\n    });\n    builder.addCase(saveExperimentalFeatures.pending, (state) => ({\n      ...state,\n      experimentalFeaturesState: SettingsState.LOADING,\n    }));\n    builder.addCase(saveExperimentalFeatures.fulfilled, (state, action) => {\n      const {\n        isExperimentalModeEnabled,\n        isHashSigningEnabled,\n        isNonSSLEnabled,\n        networkDetails,\n        networksList,\n      } = action?.payload || {\n        ...initialState,\n      };\n\n      return {\n        ...state,\n        isExperimentalModeEnabled,\n        isHashSigningEnabled,\n        isNonSSLEnabled,\n        networkDetails,\n        networksList,\n        experimentalFeaturesState: SettingsState.SUCCESS,\n      };\n    });\n    builder.addCase(\n      loadSettings.fulfilled,\n      (\n        state,\n        action: PayloadAction<\n          Settings &\n            IndexerSettings &\n            ExperimentalFeatures & { assetsLists: AssetsLists }\n        >,\n      ) => {\n        const {\n          allowList,\n          isDataSharingAllowed,\n          networkDetails,\n          networksList,\n          isMemoValidationEnabled,\n          isExperimentalModeEnabled,\n          isHashSigningEnabled,\n          isSorobanPublicEnabled,\n          isRpcHealthy,\n          userNotification,\n          assetsLists,\n          isNonSSLEnabled,\n          isHideDustEnabled,\n        } = action?.payload || {\n          ...initialState,\n        };\n\n        return {\n          ...state,\n          allowList,\n          isDataSharingAllowed,\n          networkDetails,\n          networksList,\n          isMemoValidationEnabled,\n          isExperimentalModeEnabled,\n          isHashSigningEnabled,\n          isSorobanPublicEnabled,\n          isRpcHealthy,\n          userNotification,\n          assetsLists,\n          isNonSSLEnabled,\n          isHideDustEnabled,\n          settingsState: SettingsState.SUCCESS,\n        };\n      },\n    );\n    builder.addCase(loadSettings.pending, (state) => ({\n      ...state,\n      indexerState: SettingsState.LOADING,\n    }));\n    builder.addCase(loadSettings.rejected, (state) => ({\n      ...state,\n      indexerState: SettingsState.ERROR,\n      isRpcHealthy: false,\n    }));\n    builder.addCase(\n      changeNetwork.fulfilled,\n      (\n        state,\n        action: PayloadAction<{\n          networkDetails: NetworkDetails;\n          isRpcHealthy: boolean;\n        }>,\n      ) => {\n        const { networkDetails, isRpcHealthy } = action?.payload || {\n          networkDetails: MAINNET_NETWORK_DETAILS,\n          isRpcHealthy: false,\n        };\n\n        return {\n          ...state,\n          networkDetails,\n          isRpcHealthy,\n          settingsState: SettingsState.SUCCESS,\n        };\n      },\n    );\n    builder.addCase(changeNetwork.pending, (state) => ({\n      ...state,\n      settingsState: SettingsState.LOADING,\n    }));\n    builder.addCase(changeNetwork.rejected, (state) => ({\n      ...state,\n      settingsState: SettingsState.ERROR,\n    }));\n    builder.addCase(\n      addCustomNetwork.fulfilled,\n      (\n        state,\n        action: PayloadAction<{\n          networksList: NetworkDetails[];\n        }>,\n      ) => {\n        const { networksList } = action?.payload || {\n          networksList: DEFAULT_NETWORKS,\n        };\n\n        return {\n          ...state,\n          networksList,\n        };\n      },\n    );\n    builder.addCase(addCustomNetwork.rejected, (state, action) => {\n      const { errorMessage } = action.payload || { errorMessage: \"\" };\n\n      return {\n        ...state,\n        error: errorMessage,\n      };\n    });\n    builder.addCase(\n      removeCustomNetwork.fulfilled,\n      (\n        state,\n        action: PayloadAction<{\n          networksList: NetworkDetails[];\n        }>,\n      ) => {\n        const { networksList } = action?.payload || {\n          networksList: DEFAULT_NETWORKS,\n        };\n\n        return {\n          ...state,\n          networksList,\n        };\n      },\n    );\n    builder.addCase(\n      editCustomNetwork.fulfilled,\n      (\n        state,\n        action: PayloadAction<{\n          networkDetails: NetworkDetails;\n          networksList: NetworkDetails[];\n        }>,\n      ) => {\n        const { networkDetails, networksList } = action?.payload || {\n          networkDetails: MAINNET_NETWORK_DETAILS,\n          networksList: DEFAULT_NETWORKS,\n        };\n\n        return {\n          ...state,\n          networkDetails,\n          networksList,\n        };\n      },\n    );\n    builder.addCase(\n      addAssetsList.fulfilled,\n      (\n        state,\n        action: PayloadAction<{\n          assetsLists: AssetsLists;\n        }>,\n      ) => {\n        const { assetsLists } = action?.payload || {\n          assetsLists: initialState.assetsLists,\n        };\n\n        return {\n          ...state,\n          assetsLists,\n        };\n      },\n    );\n    builder.addCase(\n      modifyAssetsList.fulfilled,\n      (\n        state,\n        action: PayloadAction<{\n          assetsLists: AssetsLists;\n        }>,\n      ) => {\n        const { assetsLists } = action?.payload || {\n          assetsLists: initialState.assetsLists,\n        };\n\n        return {\n          ...state,\n          assetsLists,\n        };\n      },\n    );\n  },\n});\n\nexport const { reducer } = settingsSlice;\n\nexport const { clearSettingsError } = settingsSlice.actions;\n\nexport const settingsSelector = (state: {\n  settings: Settings &\n    IndexerSettings &\n    ExperimentalFeatures & { assetsLists: AssetsLists };\n}) => state.settings;\n\nexport const settingsDataSharingSelector = createSelector(\n  settingsSelector,\n  (settings) => settings.isDataSharingAllowed,\n);\n\nexport const settingsExperimentalModeSelector = createSelector(\n  settingsSelector,\n  (settings) => settings.isExperimentalModeEnabled,\n);\n\nexport const settingsSorobanSupportedSelector = createSelector(\n  settingsSelector,\n  (settings) =>\n    settings.networkDetails.network === MAINNET_NETWORK_DETAILS.network\n      ? settings.isSorobanPublicEnabled && settings.isRpcHealthy\n      : settings.isRpcHealthy,\n);\n\nexport const settingsNetworkDetailsSelector = createSelector(\n  settingsSelector,\n  (settings) => settings.networkDetails,\n);\n\nexport const settingsNetworksListSelector = createSelector(\n  settingsSelector,\n  (settings) => settings.networksList,\n);\n\nexport const settingsPreferencesSelector = createSelector(\n  settingsSelector,\n  ({\n    isDataSharingAllowed,\n    isMemoValidationEnabled,\n    isExperimentalModeEnabled,\n  }) => ({\n    isDataSharingAllowed,\n    isMemoValidationEnabled,\n    isExperimentalModeEnabled,\n  }),\n);\n\nexport const settingsErrorSelector = createSelector(\n  settingsSelector,\n  (settings) => settings.error,\n);\n\nexport const settingsStateSelector = createSelector(\n  settingsSelector,\n  (settings) => settings.settingsState,\n);\n\nexport const isNonSSLEnabledSelector = createSelector(\n  settingsSelector,\n  (settings) => !isMainnet(settings.networkDetails) || settings.isNonSSLEnabled,\n);\n","import throttle from \"lodash/throttle\";\nimport { Middleware, AnyAction } from \"redux\";\n\nimport { store } from \"popup/App\";\nimport { METRICS_DATA } from \"constants/localStorageTypes\";\nimport { AMPLITUDE_KEY } from \"constants/env\";\nimport { settingsDataSharingSelector } from \"popup/ducks/settings\";\nimport { AccountType } from \"@shared/api/types\";\nimport { captureException } from \"@sentry/browser\";\n\ntype MetricHandler<AppState> = (state: AppState, action: AnyAction) => void;\nconst handlersLookup: { [key: string]: MetricHandler<any>[] } = {};\n\n/*\n * metricsMiddleware is a redux middleware that calls handlers specified to\n * respond to a specific action type. For each action dispatched, it gets a list\n * of registered handlers and passes the current state and action. These are\n * intended for metrics emission, nothing else.\n */\nexport function metricsMiddleware<State>(): Middleware<object, State> {\n  return ({ getState }) =>\n    (next) =>\n    (action: AnyAction) => {\n      const state = getState();\n      (handlersLookup[action.type] || []).forEach((handler) =>\n        handler(state, action),\n      );\n      return next(action);\n    };\n}\n\n/**\n * registerHandler registers a new function to be called any time the specified\n * action has been dispatched. This should be used to emit metrics.\n * @param {ActionType} actionType The action type. This can be a thunk action\n * type or a string.\n * @param {function} handler A callback to run when the actionType has been\n * dispatched.\n * @returns {void}\n */\nexport function registerHandler<State>(\n  actionType: string | { type: string },\n  handler: (state: State, action: AnyAction) => void,\n) {\n  const type = typeof actionType === \"string\" ? actionType : actionType.type;\n  if (handlersLookup[type]) {\n    handlersLookup[type].push(handler);\n  } else {\n    handlersLookup[type] = [handler];\n  }\n}\n\ninterface Event {\n  /* eslint-disable camelcase */\n  event_type: string;\n  event_properties: { [key: string]: any };\n  user_id: string;\n  device_id: string;\n  freighter_account_funded: boolean;\n  hw_connected: boolean;\n  secret_key_account: boolean;\n  secret_key_account_funded: boolean;\n  /* eslint-enable camelcase */\n}\n\nexport interface MetricsData {\n  accountType: AccountType;\n  hwExists: boolean;\n  importedExists: boolean;\n  hwFunded: boolean;\n  importedFunded: boolean;\n  freighterFunded: boolean;\n  unfundedFreighterAccounts: string[];\n}\n\nconst METRICS_ENDPOINT = \"https://api.amplitude.com/2/httpapi\";\nlet cache: Event[] = [];\n\nconst uploadMetrics = throttle(async () => {\n  const toUpload = cache;\n  cache = [];\n  if (!AMPLITUDE_KEY) {\n    // eslint-disable-next-line no-console\n    console.log(\"Not uploading metrics\", toUpload);\n    return;\n  }\n\n  try {\n    const amplitudeFetchRes = await fetch(METRICS_ENDPOINT, {\n      method: \"POST\",\n      headers: {\n        // eslint-disable-next-line\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        // eslint-disable-next-line\n        api_key: AMPLITUDE_KEY,\n        events: toUpload,\n      }),\n    });\n\n    if (!amplitudeFetchRes.ok) {\n      const amplitudeFetchResJson = await amplitudeFetchRes.json();\n      captureException(\n        `Error uploading to Amplitude with error: ${JSON.stringify(\n          amplitudeFetchResJson,\n        )} | cache size: ${toUpload.length} | cache contents: ${JSON.stringify(\n          toUpload,\n        )}`,\n      );\n    }\n  } catch (e) {\n    captureException(\n      `Amplitude fetch threw error: ${JSON.stringify(e)} | cache size: ${\n        toUpload.length\n      } | cache contents: ${JSON.stringify(toUpload)}`,\n    );\n  }\n}, 500);\n\nconst getUserId = () => {\n  const storedId = localStorage.getItem(\"metrics_user_id\");\n  if (!storedId) {\n    // Create a random ID by taking the decimal portion of a random number\n    const newId = Math.random().toString().split(\".\")[1];\n    localStorage.setItem(\"metrics_user_id\", newId);\n    return newId;\n  }\n  return storedId;\n};\n\n/**\n *\n * @param {string} name The name (in plain language, thoughtfully considered) of\n * the event. This is long-lived and appears in the metrics dashboard, so\n * logically related events should be presented predictably.\n * @param {object?} body An optional object containing event metadata\n * @returns {void}\n */\nexport const emitMetric = async (name: string, body?: any) => {\n  const isDataSharingAllowed = settingsDataSharingSelector(store.getState());\n  if (!isDataSharingAllowed) {\n    return;\n  }\n\n  const metricsData: MetricsData = JSON.parse(\n    localStorage.getItem(METRICS_DATA) || \"{}\",\n  );\n\n  cache.push({\n    /* eslint-disable */\n    event_type: name,\n    event_properties: body,\n    user_id: getUserId(),\n    device_id: window.navigator.userAgent,\n    freighter_account_funded: metricsData.freighterFunded,\n    hw_connected: metricsData.hwExists,\n    secret_key_account: metricsData.importedExists,\n    secret_key_account_funded: metricsData.importedFunded,\n    /* eslint-enable */\n  });\n  await uploadMetrics();\n};\n","declare const AMPLITUDE_KEY: string;\nconst _AMPLITUDE_KEY = AMPLITUDE_KEY;\n\ndeclare const SENTRY_KEY: string;\nconst _SENTRY_KEY = SENTRY_KEY;\nexport { _AMPLITUDE_KEY as AMPLITUDE_KEY, _SENTRY_KEY as SENTRY_KEY };\n","export enum WalletType {\n  LEDGER = \"Ledger\",\n  NONE = \"\",\n}\n\nexport type ConfigurableWalletType = Exclude<WalletType, WalletType.NONE>;\n","import {\n  createAsyncThunk,\n  createSelector,\n  createSlice,\n} from \"@reduxjs/toolkit\";\nimport * as Sentry from \"@sentry/browser\";\nimport { Networks } from \"stellar-sdk\";\n\nimport { APPLICATION_STATE } from \"@shared/constants/applicationState\";\nimport {\n  addAccount as addAccountService,\n  importAccount as importAccountService,\n  importHardwareWallet as importHardwareWalletService,\n  makeAccountActive as makeAccountActiveService,\n  updateAccountName as updateAccountNameService,\n  loadLastUsedAccount as loadLastUsedAccountService,\n  confirmMnemonicPhrase as confirmMnemonicPhraseService,\n  confirmMigratedMnemonicPhrase as confirmMigratedMnemonicPhraseService,\n  createAccount as createAccountService,\n  fundAccount as fundAccountService,\n  recoverAccount as recoverAccountService,\n  loadAccount as loadAccountService,\n  confirmPassword as confirmPasswordService,\n  signOut as signOutService,\n  addTokenId as addTokenIdService,\n  migrateAccounts as migrateAccountsService,\n} from \"@shared/api/internal\";\nimport {\n  Account,\n  AccountType,\n  ActionStatus,\n  BalanceToMigrate,\n  ErrorMessage,\n  MigratedAccount,\n} from \"@shared/api/types\";\nimport { WalletType } from \"@shared/constants/hardwareWallet\";\n\nimport { AppState } from \"popup/App\";\nimport { METRICS_DATA } from \"constants/localStorageTypes\";\nimport { MetricsData } from \"helpers/metrics\";\n\nexport const createAccount = createAsyncThunk<\n  { allAccounts: Account[]; publicKey: string; hasPrivateKey: boolean },\n  string,\n  { rejectValue: ErrorMessage }\n>(\"auth/createAccount\", async (password, thunkApi) => {\n  let res = {\n    allAccounts: [] as Account[],\n    publicKey: \"\",\n    hasPrivateKey: false,\n  };\n\n  try {\n    res = await createAccountService(password);\n  } catch (e) {\n    const message = e instanceof Error ? e.message : JSON.stringify(e);\n    console.error(\"Failed when creating an account: \", message);\n    return thunkApi.rejectWithValue({\n      errorMessage: message,\n    });\n  }\n  return res;\n});\n\nexport const fundAccount = createAsyncThunk(\n  \"auth/fundAccount\",\n  async (publicKey: string) => {\n    try {\n      await fundAccountService(publicKey);\n    } catch (e) {\n      const message = e instanceof Error ? e.message : JSON.stringify(e);\n      console.error(\"Failed when funding an account: \", message);\n    }\n  },\n);\n\nexport const addAccount = createAsyncThunk<\n  { publicKey: string; allAccounts: Account[]; hasPrivateKey: boolean },\n  string,\n  { rejectValue: ErrorMessage }\n>(\"auth/addAccount\", async (password = \"\", thunkApi) => {\n  let res = {\n    publicKey: \"\",\n    allAccounts: [] as Account[],\n    hasPrivateKey: false,\n  };\n\n  try {\n    res = await addAccountService(password);\n  } catch (e) {\n    const message = e instanceof Error ? e.message : JSON.stringify(e);\n    console.error(\"Failed when creating an account: \", message);\n    return thunkApi.rejectWithValue({\n      errorMessage: message,\n    });\n  }\n  return res;\n});\n\nexport const importAccount = createAsyncThunk<\n  { publicKey: string; allAccounts: Account[]; hasPrivateKey: boolean },\n  { password: string; privateKey: string },\n  { rejectValue: ErrorMessage }\n>(\"auth/importAccount\", async ({ password, privateKey }, thunkApi) => {\n  let res = {\n    publicKey: \"\",\n    allAccounts: [] as Account[],\n    hasPrivateKey: false,\n  };\n\n  try {\n    res = await importAccountService(password, privateKey);\n  } catch (e) {\n    console.error(\"Failed when importing an account: \", e);\n    const message = e instanceof Error ? e.message : JSON.stringify(e);\n    return thunkApi.rejectWithValue({\n      errorMessage: message,\n    });\n  }\n  return res;\n});\n\nexport const importHardwareWallet = createAsyncThunk<\n  {\n    publicKey: string;\n    allAccounts: Account[];\n    hasPrivateKey: boolean;\n    bipPath: string;\n  },\n  { publicKey: string; hardwareWalletType: WalletType; bipPath: string },\n  { rejectValue: ErrorMessage }\n>(\n  \"auth/importHardwareWallet\",\n  async ({ publicKey, hardwareWalletType, bipPath }, thunkApi) => {\n    let res = {\n      publicKey: \"\",\n      allAccounts: [] as Account[],\n      hasPrivateKey: false,\n      bipPath: \"\",\n    };\n    try {\n      res = await importHardwareWalletService(\n        publicKey,\n        hardwareWalletType,\n        bipPath,\n      );\n    } catch (e) {\n      console.error(\"Failed when importing hardware wallet: \", e);\n      const message = e instanceof Error ? e.message : JSON.stringify(e);\n      return thunkApi.rejectWithValue({ errorMessage: message });\n    }\n    return res;\n  },\n);\n\nexport const makeAccountActive = createAsyncThunk<\n  { publicKey: string; hasPrivateKey: boolean; bipPath: string },\n  string,\n  { rejectValue: ErrorMessage; state: AppState }\n>(\"auth/makeAccountActive\", async (publicKey: string, thunkApi) => {\n  try {\n    const res = await makeAccountActiveService(publicKey);\n    const { allAccounts } = authSelector(thunkApi.getState());\n    storeAccountMetricsData(publicKey, allAccounts);\n    return res;\n  } catch (e) {\n    return thunkApi.rejectWithValue({ errorMessage: e as string });\n  }\n});\n\nexport const updateAccountName = createAsyncThunk(\n  \"auth/updateAccountName\",\n  (accountName: string) => updateAccountNameService(accountName),\n);\n\nexport const loadLastUsedAccount = createAsyncThunk<\n  { lastUsedAccount: string },\n  undefined,\n  { rejectValue: ErrorMessage }\n>(\"auth/loadLastUsedAccount\", async (_: any, thunkApi) => {\n  try {\n    return await loadLastUsedAccountService();\n  } catch (e) {\n    const message = e instanceof Error ? e.message : JSON.stringify(e);\n    return thunkApi.rejectWithValue({ errorMessage: message });\n  }\n});\n\nexport const recoverAccount = createAsyncThunk<\n  {\n    allAccounts: Account[];\n    hasPrivateKey: boolean;\n    publicKey: string;\n    error: string;\n  },\n  {\n    password: string;\n    mnemonicPhrase: string;\n  },\n  { rejectValue: ErrorMessage }\n>(\"auth/recoverAccount\", async ({ password, mnemonicPhrase }, thunkApi) => {\n  let res = {\n    allAccounts: [] as Account[],\n    publicKey: \"\",\n    hasPrivateKey: false,\n    error: \"\",\n  };\n\n  try {\n    res = await recoverAccountService(password, mnemonicPhrase);\n  } catch (e) {\n    const message = e instanceof Error ? e.message : JSON.stringify(e);\n    console.error(\"Failed when recovering an account: \", message);\n    return thunkApi.rejectWithValue({\n      errorMessage: message,\n    });\n  }\n\n  if (!res.publicKey || res.error) {\n    return thunkApi.rejectWithValue({\n      errorMessage: res.error || \"The phrase you entered is incorrect\",\n    });\n  }\n\n  return res;\n});\n\nexport const confirmMnemonicPhrase = createAsyncThunk<\n  { applicationState: APPLICATION_STATE; isCorrectPhrase: boolean },\n  string,\n  { rejectValue: ErrorMessage & { applicationState: APPLICATION_STATE } }\n>(\n  \"auth/confirmMnemonicPhrase\",\n\n  async (phrase: string, thunkApi) => {\n    let res = {\n      isCorrectPhrase: false,\n      applicationState: APPLICATION_STATE.MNEMONIC_PHRASE_FAILED,\n    };\n    try {\n      res = await confirmMnemonicPhraseService(phrase);\n    } catch (e) {\n      const message = e instanceof Error ? e.message : JSON.stringify(e);\n      console.error(\"Failed when confirming Mnemonic Phrase: \", message);\n      return thunkApi.rejectWithValue({\n        applicationState: res.applicationState,\n        errorMessage: message,\n      });\n    }\n\n    if (res.isCorrectPhrase) {\n      res = {\n        isCorrectPhrase: true,\n        applicationState: APPLICATION_STATE.MNEMONIC_PHRASE_CONFIRMED,\n      };\n    } else {\n      return thunkApi.rejectWithValue({\n        applicationState: res.applicationState,\n        errorMessage: \"The secret phrase you entered is incorrect.\",\n      });\n    }\n\n    return res;\n  },\n);\n\nexport const confirmMigratedMnemonicPhrase = createAsyncThunk<\n  { isCorrectPhrase: boolean },\n  string,\n  { rejectValue: ErrorMessage }\n>(\n  \"auth/confirmMigratedMnemonicPhrase\",\n\n  async (phrase: string, thunkApi) => {\n    let res = {\n      isCorrectPhrase: false,\n    };\n    try {\n      res = await confirmMigratedMnemonicPhraseService(phrase);\n    } catch (e) {\n      const message = e instanceof Error ? e.message : JSON.stringify(e);\n      console.error(\"Failed when confirming Mnemonic Phrase: \", message);\n      return thunkApi.rejectWithValue({\n        errorMessage: message,\n      });\n    }\n\n    if (res.isCorrectPhrase) {\n      res = {\n        isCorrectPhrase: true,\n      };\n    } else {\n      return thunkApi.rejectWithValue({\n        errorMessage: \"The secret phrase you entered is incorrect.\",\n      });\n    }\n\n    return res;\n  },\n);\n\nexport const confirmPassword = createAsyncThunk<\n  {\n    publicKey: string;\n    hasPrivateKey: boolean;\n    applicationState: APPLICATION_STATE;\n    allAccounts: Account[];\n    bipPath: string;\n  },\n  string,\n  { rejectValue: ErrorMessage }\n>(\"auth/confirmPassword\", async (phrase: string, thunkApi) => {\n  let res = {\n    publicKey: \"\",\n    hasPrivateKey: false,\n    applicationState: APPLICATION_STATE.MNEMONIC_PHRASE_CONFIRMED,\n    allAccounts: [] as Account[],\n    bipPath: \"\",\n  };\n  try {\n    res = await confirmPasswordService(phrase);\n  } catch (e) {\n    const message = e instanceof Error ? e.message : JSON.stringify(e);\n    console.error(\"Failed when confirming a password: \", message);\n    return thunkApi.rejectWithValue({\n      errorMessage: message,\n    });\n  }\n  if (!res.publicKey) {\n    return thunkApi.rejectWithValue({\n      errorMessage: \"Incorrect Password\",\n    });\n  }\n\n  return res;\n});\n\nconst storeAccountMetricsData = (publicKey: string, allAccounts: Account[]) => {\n  const metricsData: MetricsData = JSON.parse(\n    localStorage.getItem(METRICS_DATA) || \"{}\",\n  );\n\n  let accountType = AccountType.FREIGHTER;\n  allAccounts.forEach((acc: Account) => {\n    if (acc.hardwareWalletType) {\n      metricsData.hwExists = true;\n    } else if (acc.imported) {\n      metricsData.importedExists = true;\n    }\n\n    if (acc.publicKey === publicKey) {\n      if (acc.hardwareWalletType) {\n        accountType = AccountType.HW;\n      } else if (acc.imported) {\n        accountType = AccountType.IMPORTED;\n      } else {\n        accountType = AccountType.FREIGHTER;\n      }\n    }\n  });\n  metricsData.accountType = accountType;\n  localStorage.setItem(METRICS_DATA, JSON.stringify(metricsData));\n};\n\nexport const loadAccount = createAsyncThunk(\n  \"auth/loadAccount\",\n  async (_arg, thunkApi) => {\n    let res;\n    let error;\n    try {\n      res = await loadAccountService();\n      storeAccountMetricsData(res.publicKey, res.allAccounts);\n      return res;\n    } catch (e) {\n      console.error(e);\n      error = e;\n      Sentry.captureException(`Error loading account: ${error}`);\n    }\n\n    if (!res) {\n      return thunkApi.rejectWithValue({ errorMessage: error });\n    }\n\n    return res;\n  },\n);\n\nexport const signOut = createAsyncThunk<\n  APPLICATION_STATE,\n  void,\n  { rejectValue: ErrorMessage }\n>(\"auth/signOut\", async (_arg, thunkApi) => {\n  let res = {\n    publicKey: \"\",\n    applicationState: APPLICATION_STATE.MNEMONIC_PHRASE_CONFIRMED,\n  };\n  try {\n    res = await signOutService();\n  } catch (e) {\n    console.error(e);\n  }\n\n  if (res?.publicKey) {\n    return thunkApi.rejectWithValue({\n      errorMessage: \"Unable to sign out\",\n    });\n  }\n\n  return res?.applicationState;\n});\n\nexport const addTokenId = createAsyncThunk<\n  { tokenIdList: string[] },\n  { publicKey: string; tokenId: string; network: Networks },\n  { rejectValue: ErrorMessage }\n>(\"auth/addToken\", async ({ publicKey, tokenId, network }, thunkApi) => {\n  let res = {\n    tokenIdList: [] as string[],\n  };\n\n  try {\n    res = await addTokenIdService(publicKey, tokenId, network);\n  } catch (e) {\n    const message = e instanceof Error ? e.message : JSON.stringify(e);\n    console.error(\"Failed when adding a token: \", message);\n    return thunkApi.rejectWithValue({\n      errorMessage: message,\n    });\n  }\n  return res;\n});\n\nexport const migrateAccounts = createAsyncThunk<\n  {\n    allAccounts: Account[];\n    migratedAccounts: MigratedAccount[];\n    hasPrivateKey: boolean;\n    publicKey: string;\n    error: string;\n  },\n  {\n    balancesToMigrate: BalanceToMigrate[];\n    isMergeSelected: boolean;\n    recommendedFee: string;\n  },\n  { rejectValue: ErrorMessage }\n>(\n  \"auth/migrateAccounts\",\n  async ({ balancesToMigrate, isMergeSelected, recommendedFee }, thunkApi) => {\n    let res = {\n      migratedAccounts: [] as MigratedAccount[],\n      allAccounts: [] as Account[],\n      publicKey: \"\",\n      hasPrivateKey: false,\n      error: \"\",\n    };\n\n    try {\n      res = await migrateAccountsService({\n        balancesToMigrate,\n        isMergeSelected,\n        recommendedFee,\n      });\n    } catch (e) {\n      const message = e instanceof Error ? e.message : JSON.stringify(e);\n      console.error(\"Failed when migrating an account: \", message);\n      return thunkApi.rejectWithValue({\n        errorMessage: message,\n      });\n    }\n\n    return res;\n  },\n);\n\ninterface InitialState {\n  allAccounts: Account[];\n  migratedAccounts: MigratedAccount[];\n  applicationState: APPLICATION_STATE;\n  hasPrivateKey: boolean;\n  publicKey: string;\n  connectingWalletType: WalletType;\n  bipPath: string;\n  tokenIdList: string[];\n  error: string;\n  accountStatus: ActionStatus;\n}\n\nconst initialState: InitialState = {\n  allAccounts: [],\n  migratedAccounts: [],\n  applicationState: APPLICATION_STATE.APPLICATION_LOADING,\n  hasPrivateKey: false,\n  publicKey: \"\",\n  connectingWalletType: WalletType.NONE,\n  bipPath: \"\",\n  tokenIdList: [],\n  error: \"\",\n  accountStatus: ActionStatus.IDLE,\n};\n\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState,\n  reducers: {\n    clearApiError(state) {\n      state.error = \"\";\n    },\n    setConnectingWalletType(state, action) {\n      state.connectingWalletType = action.payload;\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(createAccount.fulfilled, (state, action) => {\n      const { allAccounts, publicKey, hasPrivateKey } = action.payload || {\n        publicKey: \"\",\n        allAccounts: [],\n        hasPrivateKey: false,\n      };\n\n      return {\n        ...state,\n        allAccounts,\n        applicationState: APPLICATION_STATE.PASSWORD_CREATED,\n        hasPrivateKey,\n        publicKey,\n      };\n    });\n    builder.addCase(createAccount.rejected, (state, action) => {\n      const { errorMessage } = action.payload || { errorMessage: \"\" };\n\n      return {\n        ...state,\n        error: errorMessage,\n      };\n    });\n    builder.addCase(addAccount.fulfilled, (state, action) => {\n      const { publicKey, allAccounts, hasPrivateKey } = action.payload || {\n        publicKey: \"\",\n        allAccounts: [],\n        hasPrivateKey: false,\n      };\n\n      return {\n        ...state,\n        error: \"\",\n        // to be safe lets clear bipPath here, which is only for hWs\n        bipPath: \"\",\n        publicKey,\n        allAccounts,\n        hasPrivateKey,\n      };\n    });\n    builder.addCase(addAccount.rejected, (state, action) => {\n      const { errorMessage } = action.payload || { errorMessage: \"\" };\n\n      return {\n        ...state,\n        error: errorMessage,\n      };\n    });\n    builder.addCase(importAccount.fulfilled, (state, action) => {\n      const { publicKey, allAccounts, hasPrivateKey } = action.payload || {\n        publicKey: \"\",\n        allAccounts: [],\n        hasPrivateKey: false,\n      };\n\n      return {\n        ...state,\n        error: \"\",\n        // to be safe lets clear bipPath here, which is only for hWs\n        bipPath: \"\",\n        publicKey,\n        allAccounts,\n        hasPrivateKey,\n      };\n    });\n    builder.addCase(importAccount.rejected, (state, action) => {\n      const { errorMessage } = action.payload || { errorMessage: \"\" };\n\n      return {\n        ...state,\n        error: errorMessage,\n      };\n    });\n    builder.addCase(importHardwareWallet.fulfilled, (state, action) => {\n      const { publicKey, allAccounts, hasPrivateKey, bipPath } = action.payload;\n      return {\n        ...state,\n        error: \"\",\n        publicKey,\n        allAccounts,\n        hasPrivateKey,\n        bipPath,\n      };\n    });\n    builder.addCase(importHardwareWallet.rejected, (state, action) => {\n      const { errorMessage } = action.payload || { errorMessage: \"\" };\n\n      return {\n        ...state,\n        error: errorMessage,\n      };\n    });\n    builder.addCase(makeAccountActive.pending, (state) => ({\n      ...state,\n      accountStatus: ActionStatus.PENDING,\n    }));\n    builder.addCase(makeAccountActive.fulfilled, (state, action) => {\n      const { publicKey, hasPrivateKey, bipPath } = action.payload || {\n        publicKey: \"\",\n        hasPrivateKey: false,\n        bipPath: \"\",\n      };\n\n      return {\n        ...state,\n        publicKey,\n        hasPrivateKey,\n        bipPath,\n        accountStatus: ActionStatus.SUCCESS,\n      };\n    });\n    builder.addCase(makeAccountActive.rejected, (state, action) => {\n      const { message = \"Freighter was unable to switch to this account\" } =\n        action.error;\n\n      return {\n        ...state,\n        error: message,\n        accountStatus: ActionStatus.ERROR,\n      };\n    });\n    builder.addCase(updateAccountName.fulfilled, (state, action) => {\n      const { allAccounts } = action.payload || {\n        allAccounts: [],\n      };\n\n      return {\n        ...state,\n        allAccounts,\n      };\n    });\n    builder.addCase(updateAccountName.rejected, (state, action) => {\n      const { message = \"Freighter was unable update this account's name\" } =\n        action.error;\n\n      return {\n        ...state,\n        error: message,\n      };\n    });\n    builder.addCase(recoverAccount.fulfilled, (state, action) => {\n      const { publicKey, allAccounts, hasPrivateKey } = action.payload || {\n        publicKey: \"\",\n        allAccounts: [],\n        hasPrivateKey: false,\n      };\n\n      return {\n        ...state,\n        error: \"\",\n        allAccounts,\n        hasPrivateKey,\n        applicationState: APPLICATION_STATE.MNEMONIC_PHRASE_CONFIRMED,\n        publicKey,\n      };\n    });\n    builder.addCase(recoverAccount.rejected, (state, action) => {\n      const { errorMessage } = action.payload || { errorMessage: \"\" };\n\n      return {\n        ...state,\n        error: errorMessage,\n      };\n    });\n    builder.addCase(confirmMnemonicPhrase.rejected, (state, action) => {\n      const { applicationState, errorMessage } = action.payload || {\n        errorMessage: \"\",\n        applicationState: APPLICATION_STATE.MNEMONIC_PHRASE_FAILED,\n      };\n\n      return {\n        ...state,\n        applicationState,\n        error: errorMessage,\n      };\n    });\n    builder.addCase(confirmMnemonicPhrase.fulfilled, (state, action) => ({\n      ...state,\n      applicationState: action.payload.applicationState,\n    }));\n    builder.addCase(confirmMigratedMnemonicPhrase.rejected, (state, action) => {\n      const { errorMessage } = action.payload || {\n        errorMessage: \"\",\n      };\n\n      return {\n        ...state,\n        error: errorMessage,\n      };\n    });\n    builder.addCase(loadAccount.fulfilled, (state, action) => {\n      const {\n        hasPrivateKey,\n        publicKey,\n        applicationState,\n        allAccounts,\n        bipPath,\n        tokenIdList,\n      } = action.payload || {\n        hasPrivateKey: false,\n        publicKey: \"\",\n        applicationState: APPLICATION_STATE.APPLICATION_STARTED,\n        allAccounts: [],\n        bipPath: \"\",\n        tokenIdList: [],\n      };\n      return {\n        ...state,\n        hasPrivateKey,\n        applicationState:\n          applicationState || APPLICATION_STATE.APPLICATION_STARTED,\n        publicKey,\n        allAccounts,\n        bipPath,\n        tokenIdList,\n      };\n    });\n    builder.addCase(loadAccount.rejected, (state, action) => {\n      const {\n        message = \"An unknown error occurred when loading your account\",\n      } = action.error;\n      return {\n        ...state,\n        applicationState: APPLICATION_STATE.APPLICATION_ERROR,\n        error: message,\n      };\n    });\n    builder.addCase(confirmPassword.rejected, (state, action) => {\n      const { errorMessage } = action.payload || { errorMessage: \"\" };\n\n      return {\n        ...state,\n        error: errorMessage,\n      };\n    });\n    builder.addCase(confirmPassword.fulfilled, (state, action) => {\n      const {\n        publicKey,\n        applicationState,\n        hasPrivateKey,\n        allAccounts,\n        bipPath,\n      } = action.payload || {\n        publicKey: \"\",\n        hasPrivateKey: false,\n        applicationState: APPLICATION_STATE.MNEMONIC_PHRASE_CONFIRMED,\n        allAccounts: [\"\"],\n        bipPath: \"\",\n      };\n      return {\n        ...state,\n        hasPrivateKey,\n        applicationState:\n          applicationState || APPLICATION_STATE.MNEMONIC_PHRASE_CONFIRMED,\n        publicKey,\n        allAccounts,\n        bipPath,\n        error: \"\",\n      };\n    });\n    builder.addCase(signOut.fulfilled, (_state, action) => {\n      const applicationState = action.payload || {\n        applicationState: APPLICATION_STATE.MNEMONIC_PHRASE_CONFIRMED,\n      };\n      return {\n        ...initialState,\n        applicationState:\n          applicationState || APPLICATION_STATE.MNEMONIC_PHRASE_CONFIRMED,\n      };\n    });\n    builder.addCase(addTokenId.fulfilled, (state, action) => {\n      const { tokenIdList } = action.payload || {\n        tokenIdList: [],\n      };\n\n      return {\n        ...state,\n        error: \"\",\n        tokenIdList,\n      };\n    });\n    builder.addCase(addTokenId.rejected, (state, action) => {\n      const { errorMessage } = action.payload || { errorMessage: \"\" };\n\n      return {\n        ...state,\n        error: errorMessage,\n      };\n    });\n    builder.addCase(migrateAccounts.fulfilled, (state, action) => {\n      const { publicKey, allAccounts, migratedAccounts, hasPrivateKey } =\n        action.payload || {\n          publicKey: \"\",\n          allAccounts: [],\n          migratedAccounts: [],\n          hasPrivateKey: false,\n        };\n\n      return {\n        ...state,\n        error: \"\",\n        allAccounts,\n        migratedAccounts,\n        hasPrivateKey,\n        publicKey,\n      };\n    });\n    builder.addCase(migrateAccounts.rejected, (state, action) => {\n      const { errorMessage } = action.payload || { errorMessage: \"\" };\n\n      return {\n        ...state,\n        error: errorMessage,\n      };\n    });\n  },\n});\n\nconst { reducer } = authSlice;\nconst authSelector = (state: { auth: InitialState }) => state.auth;\nexport const hasPrivateKeySelector = createSelector(\n  authSelector,\n  (auth: InitialState) => auth.hasPrivateKey,\n);\nexport const allAccountsSelector = createSelector(\n  authSelector,\n  (auth: InitialState) => auth.allAccounts,\n);\nexport const applicationStateSelector = createSelector(\n  authSelector,\n  (auth: InitialState) => auth.applicationState,\n);\nexport const authErrorSelector = createSelector(\n  authSelector,\n  (auth: InitialState) => auth.error,\n);\nexport const publicKeySelector = createSelector(\n  authSelector,\n  (auth: InitialState) => auth.publicKey,\n);\nexport const bipPathSelector = createSelector(\n  authSelector,\n  (auth: InitialState) => auth.bipPath,\n);\nexport const migratedAccountsSelector = createSelector(\n  authSelector,\n  (auth: InitialState) => auth.migratedAccounts,\n);\n\nexport const accountNameSelector = createSelector(\n  publicKeySelector,\n  allAccountsSelector,\n  (publicKey, allAccounts) => {\n    const { name } = allAccounts.find(\n      ({ publicKey: accountPublicKey }) => accountPublicKey === publicKey,\n    ) || { publicKey: \"\", name: \"\" };\n\n    return name;\n  },\n);\n\nexport const hardwareWalletTypeSelector = createSelector(\n  publicKeySelector,\n  allAccountsSelector,\n  (publicKey, allAccounts) => {\n    const account = allAccounts.find(\n      ({ publicKey: accountPublicKey }) => accountPublicKey === publicKey,\n    ) || { hardwareWalletType: WalletType.NONE };\n    return account.hardwareWalletType;\n  },\n);\n\nexport const accountStatusSelector = createSelector(\n  authSelector,\n  (auth: InitialState) => auth.accountStatus,\n);\n\nexport const { clearApiError, setConnectingWalletType } = authSlice.actions;\n\nexport { reducer };\n","export const METRIC_NAMES = {\n  viewDebug: \"loaded screen: debug\",\n  viewIntegrationTest: \"loaded screen: integration test\",\n  viewWelcome: \"loaded screen: welcome\",\n  viewAccount: \"loaded screen: account\",\n  viewAccountHistory: \"loaded screen: account history\",\n  viewAccountCreator: \"loaded screen: account creator\",\n  viewAddAccount: \"loaded screen: add account\",\n  viewImportAccount: \"loaded screen: import account\",\n  viewConnectWallet: \"loaded screen: connect wallet\",\n  viewConnectWalletPlugin: \"loaded screen: connect wallet plugin\",\n  viewConnectDevice: \"loaded screen: connect device\",\n  viewGrantAccess: \"loaded screen: grant access\",\n  viewLoading: \"loaded screen: loading\",\n  viewMnemonicPhrase: \"loaded screen: mnemonic phrase\",\n  viewMnemonicPhraseConfirm: \"loaded screen: confirm mnemonic phrase\",\n  viewMnemonicPhraseConfirmed: \"loaded screen: account creator finished\",\n  viewRecoverAccount: \"loaded screen: recover account\",\n  viewRecoverAccountSuccess: \"loaded screen: recover account: success\",\n  viewSignTransaction: \"loaded screen: sign transaction\",\n  viewReviewAuthorization: \"loaded screen: review authorization\",\n  viewSignMessage: \"loaded screen: sign message\",\n  viewSignAuthEntry: \"loaded screen: sign auth entry\",\n  viewUnlockAccount: \"loaded screen: unlock account\",\n  viewVerifyAccount: \"loaded screen: verify account\",\n  viewUnlockBackupPhrase: \"loaded screen: unlock backup phrase\",\n  viewDisplayBackupPhrase: \"loaded screen: display backup phrase\",\n  viewPublicKey: \"loaded screen: view public key generator\",\n  viewSettings: \"loaded screen: settings\",\n  viewPreferences: \"loaded screen: preferences\",\n  viewSecurity: \"loaded screen: security\",\n  viewManageConnectedApps: \"loaded screen: manage connected apps\",\n  viewAbout: \"loaded screen: about\",\n  viewManageAssetsLists: \"loaded screen: manage assets lists\",\n  viewAdvancedSettings: \"loaded screen: advanced settings\",\n\n  viewSendPayment: \"loaded screen: send payment\",\n  sendPaymentTo: \"loaded screen: send payment to\",\n  sendPaymentAmount: \"loaded screen: send payment amount\",\n  sendPaymentType: \"loaded screen: send payment type\",\n  sendPaymentSettings: \"loaded screen: send payment settings\",\n  sendPaymentSettingsFee: \"loaded screen: send payment settings fee\",\n  sendPaymentSettingsSlippage: \"loaded screen: send payment settings slippage\",\n  sendPaymentSettingsTimeout: \"loaded screen: send payment settings timeout\",\n  sendPaymentConfirm: \"loaded screen: send payment confirm\",\n\n  viewAccountMigration: \"loaded screen: account migration\",\n  viewAccountMigrationReviewMigration:\n    \"loaded screen: account migration review migration\",\n  viewAccountMigrationMnemonicPhrase:\n    \"loaded screen: account migration mnemonic phrase\",\n  viewAccountMigrationConfirmMigration:\n    \"loaded screen: account migration confirm migration\",\n  viewAccountMigrationMigrationComplete:\n    \"loaded screen: account migration migration complete\",\n\n  sendPaymentRecentAddress: \"send payment: recent address\",\n  sendPaymentSetMax: \"send payment: set max\",\n  sendPaymentTypePayment: \"send payment: selected type payment\",\n  sendPaymentTypePathPayment: \"send payment: selected type path payment\",\n  sendPaymentSuccess: \"send payment: payment success\",\n  sendPaymentPathPaymentSuccess: \"send payment: path payment success\",\n  sendPaymentError: \"send payment: error\",\n  simuilateTokenPaymentError: \"failed to simulate token payment\",\n\n  viewSwap: \"loaded screen: swap\",\n  swapAmount: \"loaded screen: swap amount\",\n  swapSettings: \"loaded screen: swap settings\",\n  swapSettingsFee: \"loaded screen: swap settings fee\",\n  swapSettingsSlippage: \"loaded screen: swap settings slippage\",\n  swapSettingsTimeout: \"loaded screen: swap settings timeout\",\n  swapConfirm: \"loaded screen: swap confirm\",\n\n  viewManageAssets: \"loaded screen: manage assets\",\n  viewSearchAsset: \"loaded screen: search asset\",\n  viewTrustlineError: \"loaded screen: trustline error\",\n  viewAddAsset: \"loaded screen: add asset manually\",\n\n  viewManageNetwork: \"loaded screen: manage network\",\n  viewAddNetwork: \"loaded screen: add network\",\n  viewEditNetwork: \"loaded screen: edit network\",\n  viewNetworkSettings: \"loaded screen: network settings\",\n\n  manageAssetAddAsset: \"manage asset: add asset\",\n  manageAssetAddToken: \"manage asset: add token\",\n  manageAssetAddUnsafeAsset: \"manage asset: add unsafe asset\",\n  manageAssetRemoveAsset: \"manage asset: remove asset\",\n  manageAssetError: \"manage asset: error\",\n\n  manageAssetListsModifyAssetList: \"manage asset list: modify asset list\",\n\n  accountCreatorSuccess: \"account creator: create password: success\",\n  accountCreatorReject: \"account creator: create password: error\",\n\n  accountCreatorMnemonicViewPhrase: \"account creator: viewed phrase\",\n\n  accountCreatorMnemonicConfirmPhrase:\n    \"account creator: confirm phrase: confirmed phrase\",\n  accountCreatorConfirmMnemonicFail:\n    \"account creator: confirm phrase: error confirming\",\n  accountCreatorConfirmMnemonicBack:\n    \"account creator: confirm phrase: back to phrase\",\n\n  accountCreatorFinished:\n    \"account creator finished: closed account creator flow\",\n\n  accountScreenAddAccount: \"account screen: created new account\",\n  accountScreenCopyPublickKey: \"account screen: copied public key\",\n  accountScreenImportAccount: \"account screen: imported new account\",\n  accountScreenImportAccountFail: \"account screen: imported new account: error\",\n\n  freighterAccountFunded: \"freighter created account funded\",\n\n  confirmPasswordSuccess: \"re-auth: success\",\n  confirmPasswordFail: \"re-auth: error\",\n\n  historyOpenFullHistory: \"history: opened full history on external website\",\n  historyOpenItem: \"history: opened item on external website\",\n\n  recoverAccountSuccess: \"recover account: success\",\n  recoverAccountFail: \"recover account: error\",\n  recoverAccountFinished:\n    \"recover account finished: closed recover account flow\",\n\n  grantAccessSuccess: \"grant access: granted\",\n  grantAccessFail: \"grant access: rejected\",\n\n  signTransaction: \"sign transaction: confirmed\",\n  signTransactionMemoRequired: \"sign transaction: memo required error\",\n  rejectTransaction: \"sign transaction: rejected\",\n\n  signBlob: \"sign blob: confirmed\",\n  rejectBlob: \"sign blob: rejected\",\n\n  signAuthEntry: \"sign auth entry: confirmed\",\n  rejectAuthEntry: \"sign auth entry: rejected\",\n\n  backupPhraseSuccess: \"backup phrase: success\",\n  backupPhraseFail: \"backup phrase: error\",\n\n  backupPhraseDownload: \"backup phrase: downloaded phrase\",\n  backupPhraseCopy: \"backup phrase: copied phrase\",\n\n  viewPublicKeyAccountRenamed: \"viewPublicKey: renamed account\",\n  viewPublicKeyCopy: \"viewPublicKey: copied public key\",\n  viewPublicKeyClickedStellarExpert: \"viewPublicKey: clicked StellarExpert\",\n\n  viewLeaveFeedback: \"loaded screen: leave feedback\",\n\n  invalidAuthEntry: \"invalid authorization entry\",\n\n  rejectSigning: \"user cancelled signing flow\",\n  approveSign: \"user signed transaction\",\n  reviewedAuthEntry: \"reviewed authorization entry\",\n\n  trustlineErrorBuyingLiability:\n    \"trustline removal error: asset has buying liabilties\",\n  trustlineErrorHasBalance: \"trustline removal error: asset has balance\",\n  trustlineErrorLowReserve: \"trustline removal error: asset has low reserve\",\n\n  blockaidDomainScan: \"blockaid: scanned domain\",\n  blockaidTxScan: \"blockaid: scanned transaction\",\n  blockaidAssetScan: \"blockaid: scanned asset\",\n};\n","import { truncatedPublicKey } from \"helpers/stellar\";\nimport { CLASSIC_ASSET_DECIMALS } from \"./soroban\";\n\n// remove non digits and decimal\nexport const cleanAmount = (s: string) => s.replace(/[^0-9.]/g, \"\");\n\n// This assumes the specific formatting being done is Intl.NumberFormat of decimal type,\n// other formats may not work out of the box\nexport const preserveCursor = (\n  val: string, // raw value from input,\n  previousVal: string, // previous state for val\n  cleanedVal: string, // string after format/sanitize\n) => {\n  const decimal = new Intl.NumberFormat(\"en-US\", { style: \"decimal\" });\n  const formatted = cleanedVal.includes(\",\")\n    ? cleanedVal\n    : decimal.format(Number(cleanedVal)).toString();\n  const previousCommas = (previousVal.match(/,/g) || []).length;\n  const newCommas = (formatted.match(/,/g) || []).length;\n  const commaDiff = Math.abs(newCommas - previousCommas);\n  const cleanedDiff = val.includes(\",\") // compare formatted vals if previous val had formatting\n    ? val.length - formatted.length\n    : val.length - cleanedVal.length;\n\n  return {\n    commaDiff,\n    cleanedDiff,\n  };\n};\n\n/*\nLogic for tracking where the cursor should be after updates/clean/sanitize.\n\nDetermine wether we need to sanitize digits and/or decimals.\nFor digits only, compare the previous value with the newly formatted value and move the cursor according to the difference in number of commas, and difference in number of characters in the raw value vs the cleaned/sanitized(even though we filter out anything but numbers, invalid chars still move the cursor).\nIf digits & decimals, do previous step on chars before the dot and also account for characters after the dot that are cleaned out but have moved the cursor.\n*/\nexport const formatAmountPreserveCursor = (\n  val: string,\n  staleVal: string,\n  decimals: number = CLASSIC_ASSET_DECIMALS,\n  cursorPosition: number = 1,\n) => {\n  const decimal = new Intl.NumberFormat(\"en-US\", { style: \"decimal\" });\n  const maxDigits = 12;\n  const cleaned = cleanAmount(val);\n  // add commas to pre decimal digits\n  if (cleaned.indexOf(\".\") !== -1) {\n    const parts = cleaned.split(\".\");\n    parts[0] = decimal.format(Number(parts[0].slice(0, maxDigits))).toString();\n    parts[1] = parts[1].slice(0, decimals);\n\n    // To preserve cursor -\n    // need to account for commas and filtered chars before dot\n    // and need to account for filtered chars after dot\n    const uncleanedCurrentAmount = val.split(\".\");\n    const previousVal = staleVal.split(\".\");\n\n    const { commaDiff, cleanedDiff } = preserveCursor(\n      uncleanedCurrentAmount[0],\n      previousVal[0],\n      parts[0].slice(0, maxDigits),\n    );\n\n    // after dot, need to account for filtered chars moving the cursor\n    const afterDotCleanedDiff =\n      uncleanedCurrentAmount[1].length - parts[1].length;\n    return {\n      amount: `${parts[0]}.${parts[1]}`,\n      newCursor: cursorPosition + commaDiff - cleanedDiff - afterDotCleanedDiff,\n    };\n  }\n\n  // no decimals, need to account for newly added commas and for chars lost to cleanAmount which moved the cursor\n  const { commaDiff: _commaDiff, cleanedDiff: _cleanDiff } = preserveCursor(\n    val,\n    staleVal,\n    cleaned.slice(0, maxDigits),\n  );\n\n  return {\n    amount: decimal.format(Number(cleaned.slice(0, maxDigits))).toString(),\n    newCursor: cursorPosition + _commaDiff - _cleanDiff,\n  };\n};\n\nexport const formatAmount = (val: string) => {\n  const decimal = new Intl.NumberFormat(\"en-US\", { style: \"decimal\" });\n  const [wholeVal, remainderVal] = val.split(\".\");\n  const formattedWholeVal = decimal.format(Number(wholeVal)).toString();\n\n  if (remainderVal) {\n    return `${formattedWholeVal}.${remainderVal}`;\n  }\n\n  return formattedWholeVal;\n};\n\nexport const formattedBuffer = (data: Buffer) =>\n  truncatedPublicKey(Buffer.from(data).toString(\"hex\").toUpperCase());\n\nexport const scrubPathGkey = (route: string, url: string) => {\n  try {\n    const [base, slug] = url.split(route);\n    const end = slug.indexOf(\"?\") === -1 ? slug.length : slug.indexOf(\"?\");\n    return `${base}${route}${\"REDACTED\"}${slug.substring(end)}`;\n  } catch (error) {\n    return url;\n  }\n};\n","import {\n  FeeBumpTransaction,\n  Memo,\n  MemoType,\n  Operation,\n  Transaction,\n  StrKey,\n} from \"stellar-sdk\";\nimport {\n  ConfigurableWalletType,\n  WalletType,\n} from \"@shared/constants/hardwareWallet\";\n\n/* Ledger Imports */\nimport TransportWebUSB from \"@ledgerhq/hw-transport-webusb\";\nimport LedgerApi from \"@ledgerhq/hw-app-str\";\n\nimport LedgerLogo from \"popup/assets/ledger-logo.png\";\n/* end Ledger imports */\n\n/*\n ** HELPER METHODS\n */\n\ntype CreateWalletConnection = {\n  [key in ConfigurableWalletType]: (bipPath?: string) => Promise<string>;\n};\n\n/*\n * Establishes a connection to the hardware wallet's account using the wallet's API\n * @param {string} bipPath - The bip path to pass to the API (optional).\n * @returns {string} A string representation of the public key.\n */\nexport const createWalletConnection: CreateWalletConnection = {\n  [WalletType.LEDGER]: async (bipPath = \"\") => {\n    const transport = await TransportWebUSB.request();\n    const ledgerApi = new LedgerApi(transport);\n    const response = await ledgerApi.getPublicKey(bipPath);\n\n    return StrKey.encodeEd25519PublicKey(response.rawPublicKey);\n  },\n};\n\ntype GetWalletPublicKey = {\n  [key in ConfigurableWalletType]: (bipPath?: string) => Promise<string>;\n};\n\n/*\n * Retrieves a public key after the connection to the wallet has been established\n * @param {string} bipPath - The bip path to pass to the API (optional).\n * @returns {string} A string representation of the public key.\n */\nexport const getWalletPublicKey: GetWalletPublicKey = {\n  [WalletType.LEDGER]: async (bipPath = \"\") => {\n    const transport = await TransportWebUSB.create();\n    const ledgerApi = new LedgerApi(transport);\n    const response = await ledgerApi.getPublicKey(bipPath);\n\n    return StrKey.encodeEd25519PublicKey(response.rawPublicKey);\n  },\n};\n\ninterface HardwareSignParams {\n  bipPath?: string;\n  tx: Transaction<Memo<MemoType>, Operation[]> | FeeBumpTransaction;\n  isHashSigningEnabled?: boolean;\n}\n\ntype HardwareSign = {\n  [key in ConfigurableWalletType]: ({\n    bipPath,\n    tx,\n  }: HardwareSignParams) => Promise<Buffer>;\n};\n\n/*\n * Returns a signature from the hardware wallet\n * @param {string} bipPath - The bip path to pass to the API (optional).\n * @param {Transaction} tx - The transaction that will be signed by the wallet.\n * @returns {Buffer} A signature that will be added to the Transaction.\n */\nexport const hardwareSign: HardwareSign = {\n  [WalletType.LEDGER]: async ({\n    bipPath = \"\",\n    tx,\n    isHashSigningEnabled,\n  }: HardwareSignParams) => {\n    const transport = await TransportWebUSB.create();\n    const ledgerApi = new LedgerApi(transport);\n    let result = { signature: Buffer.from([]) };\n\n    if (isHashSigningEnabled) {\n      result = await ledgerApi.signHash(bipPath, tx.hash());\n    } else {\n      result = await ledgerApi.signTransaction(bipPath, tx.signatureBase());\n    }\n    return result.signature;\n  },\n};\n\ninterface HardwareSignAuthParams {\n  bipPath?: string;\n  auth: Buffer;\n  isHashSigningEnabled?: boolean;\n}\n\ntype HardwareSignAuth = {\n  [key in ConfigurableWalletType]: ({\n    bipPath,\n    auth,\n  }: HardwareSignAuthParams) => Promise<Buffer>;\n};\n\n/*\n * Returns a Soroban auth entry signature from the hardware wallet\n * @param {string} bipPath - The bip path to pass to the API (optional).\n * @param {Buffer} auth - The authorization that will be signed by the wallet.\n * @returns {Buffer} A signature that will be added to the Transaction.\n */\nexport const hardwareSignAuth: HardwareSignAuth = {\n  [WalletType.LEDGER]: async ({\n    bipPath = \"\",\n    auth,\n  }: HardwareSignAuthParams) => {\n    const transport = await TransportWebUSB.create();\n    const ledgerApi = new LedgerApi(transport);\n    let result = { signature: Buffer.from([]) };\n\n    result = await ledgerApi.signSorobanAuthorization(bipPath, auth);\n    return result.signature;\n  },\n};\n\n/*\n ** UI ELEMENTS\n */\n\ntype WalletAssets = {\n  [key in ConfigurableWalletType]: {\n    // hardware wallet's logo. Recommended size: 223 x 60\n    logo: string;\n  };\n};\n\n/*\n  Hardware wallet image for UI \n*/\nexport const walletAssets: WalletAssets = {\n  [WalletType.LEDGER]: {\n    logo: LedgerLogo,\n  },\n};\n\ntype PluginWalletInfo = {\n  [key in ConfigurableWalletType]: {\n    // brieflly describe how a user should connec their wallet\n    instruction: string;\n    link: {\n      // a link to the wallet's website for more info\n      href: string;\n      // Call To Action text for the above the link\n      text: string;\n    };\n  };\n};\n\n/*\n  Hardware wallet instructions\n*/\nexport const pluginWalletInfo: PluginWalletInfo = {\n  [WalletType.LEDGER]: {\n    instruction:\n      \"Make sure your Ledger wallet is connected to your computer and the Stellar app is open on the Ledger wallet.\",\n    link: {\n      href: \"https://www.ledger.com/stellar-wallet\",\n      text: \"Learn more about using Ledger\",\n    },\n  },\n};\n\ntype ParseWalletError = {\n  [key in ConfigurableWalletType]: (err: any) => string;\n};\n\n/*\n * Parses errors from the wallet's API and presents a user readable message\n * @param {any} error - The error surfaced from the wallet's API.\n * @returns {string} A short string describing the error.\n */\nexport const parseWalletError: ParseWalletError = {\n  [WalletType.LEDGER]: (err: any) => {\n    const message = err.message || err;\n    const defaultErr = \"Error connecting. Please try again.\";\n    if (!message) {\n      return defaultErr;\n    }\n    if (message.indexOf(\"No device selected\") > -1) {\n      return \"No device detected. Please make sure your device is connected and the Stellar app is open on it.\";\n    }\n    if (message.indexOf(\"Incorrect length\") > -1) {\n      return \"Connect device to computer and open the Stellar app on it.\";\n    }\n    if (message.indexOf(\"Transaction approval request was rejected\") > -1) {\n      return \"Transaction Rejected.\";\n    }\n    return message;\n  },\n};\n","import {\n  Horizon,\n  Keypair,\n  SorobanRpc,\n  TransactionBuilder,\n  xdr,\n} from \"stellar-sdk\";\nimport { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n\nimport {\n  signFreighterTransaction as internalSignFreighterTransaction,\n  signFreighterSorobanTransaction as internalSignFreighterSorobanTransaction,\n  addRecentAddress as internalAddRecentAddress,\n  loadRecentAddresses as internalLoadRecentAddresses,\n  getAccountIndexerBalances as internalgetAccountIndexerBalances,\n  getAccountBalancesStandalone as internalGetAccountBalancesStandalone,\n  getAssetIcons as getAssetIconsService,\n  getAssetDomains as getAssetDomainsService,\n  getMemoRequiredAccounts as internalGetMemoRequiredAccounts,\n  removeTokenId as internalRemoveTokenId,\n  submitFreighterTransaction as internalSubmitFreighterTransaction,\n  submitFreighterSorobanTransaction as internalSubmitFreighterSorobanTransaction,\n} from \"@shared/api/internal\";\n\nimport {\n  AccountBalancesInterface,\n  AssetIcons,\n  AssetDomains,\n  Balances,\n  ErrorMessage,\n  AccountType,\n  ActionStatus,\n  MemoRequiredAccount,\n  BalanceToMigrate,\n  SoroswapToken,\n} from \"@shared/api/types\";\n\nimport { NETWORKS, NetworkDetails } from \"@shared/constants/stellar\";\nimport { ConfigurableWalletType } from \"@shared/constants/hardwareWallet\";\nimport { isCustomNetwork } from \"@shared/helpers/stellar\";\n\nimport {\n  getCanonicalFromAsset,\n  isMainnet as isMainnetHelper,\n} from \"helpers/stellar\";\nimport { METRICS_DATA } from \"constants/localStorageTypes\";\nimport { MetricsData, emitMetric } from \"helpers/metrics\";\nimport { METRIC_NAMES } from \"popup/constants/metricsNames\";\nimport { INDEXER_URL } from \"@shared/constants/mercury\";\nimport { horizonGetBestPath } from \"popup/helpers/horizonGetBestPath\";\nimport {\n  soroswapGetBestPath,\n  getSoroswapTokens as getSoroswapTokensService,\n} from \"popup/helpers/sorobanSwap\";\nimport { hardwareSign, hardwareSignAuth } from \"popup/helpers/hardwareConnect\";\n\nexport const signFreighterTransaction = createAsyncThunk<\n  { signedTransaction: string },\n  { transactionXDR: string; network: string },\n  { rejectValue: ErrorMessage }\n>(\"signFreighterTransaction\", async ({ transactionXDR, network }, thunkApi) => {\n  try {\n    return await internalSignFreighterTransaction({\n      transactionXDR,\n      network,\n    });\n  } catch (e) {\n    const message = e instanceof Error ? e.message : JSON.stringify(e);\n    return thunkApi.rejectWithValue({ errorMessage: message });\n  }\n});\n\nexport const signFreighterSorobanTransaction = createAsyncThunk<\n  { signedTransaction: string },\n  { transactionXDR: string; network: string },\n  { rejectValue: ErrorMessage }\n>(\n  \"signFreighterSorobanTransaction\",\n  async ({ transactionXDR, network }, thunkApi) => {\n    try {\n      return await internalSignFreighterSorobanTransaction({\n        transactionXDR,\n        network,\n      });\n    } catch (e) {\n      const message = e instanceof Error ? e.message : JSON.stringify(e);\n      return thunkApi.rejectWithValue({ errorMessage: message });\n    }\n  },\n);\n\nexport const submitFreighterTransaction = createAsyncThunk<\n  Horizon.HorizonApi.TransactionResponse,\n  {\n    publicKey: string;\n    signedXDR: string;\n    networkDetails: NetworkDetails;\n  },\n  {\n    rejectValue: ErrorMessage;\n  }\n>(\n  \"submitFreighterTransaction\",\n  async ({ publicKey, signedXDR, networkDetails }, thunkApi) => {\n    if (isCustomNetwork(networkDetails)) {\n      try {\n        const txRes = await internalSubmitFreighterTransaction({\n          signedXDR,\n          networkDetails,\n        });\n\n        thunkApi.dispatch(getAccountBalances({ publicKey, networkDetails }));\n\n        return txRes;\n      } catch (e) {\n        const message = e instanceof Error ? e.message : JSON.stringify(e);\n        return thunkApi.rejectWithValue({\n          errorMessage: message,\n        });\n      }\n    } else {\n      try {\n        const options = {\n          method: \"POST\",\n          headers: {\n            // eslint-disable-next-line @typescript-eslint/naming-convention\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            // eslint-disable-next-line @typescript-eslint/naming-convention\n            signed_xdr: signedXDR,\n            // eslint-disable-next-line @typescript-eslint/naming-convention\n            network_url: networkDetails.networkUrl,\n            // eslint-disable-next-line @typescript-eslint/naming-convention\n            network_passphrase: networkDetails.networkPassphrase,\n          }),\n        };\n        const res = await fetch(`${INDEXER_URL}/submit-tx`, options);\n        const response = await res.json();\n\n        if (!res.ok) {\n          return thunkApi.rejectWithValue({\n            errorMessage: response,\n            response,\n          });\n        }\n        return response;\n      } catch (e) {\n        const message = e instanceof Error ? e.message : JSON.stringify(e);\n        return thunkApi.rejectWithValue({\n          errorMessage: message,\n          response: e as any,\n        });\n      }\n    }\n  },\n);\n\nexport const submitFreighterSorobanTransaction = createAsyncThunk<\n  SorobanRpc.Api.SendTransactionResponse,\n  {\n    publicKey: string;\n    signedXDR: string;\n    networkDetails: NetworkDetails;\n  },\n  {\n    rejectValue: ErrorMessage;\n  }\n>(\n  \"submitFreighterSorobanTransaction\",\n  async ({ publicKey, signedXDR, networkDetails }, thunkApi) => {\n    if (isCustomNetwork(networkDetails)) {\n      try {\n        const txRes = await internalSubmitFreighterSorobanTransaction({\n          signedXDR,\n          networkDetails,\n        });\n\n        thunkApi.dispatch(getAccountBalances({ publicKey, networkDetails }));\n\n        return txRes;\n      } catch (e) {\n        const message = e instanceof Error ? e.message : JSON.stringify(e);\n        return thunkApi.rejectWithValue({\n          errorMessage: message,\n        });\n      }\n    } else {\n      try {\n        const options = {\n          method: \"POST\",\n          headers: {\n            // eslint-disable-next-line @typescript-eslint/naming-convention\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            // eslint-disable-next-line @typescript-eslint/naming-convention\n            signed_xdr: signedXDR,\n            // eslint-disable-next-line @typescript-eslint/naming-convention\n            network_url: networkDetails.networkUrl,\n            // eslint-disable-next-line @typescript-eslint/naming-convention\n            network_passphrase: networkDetails.networkPassphrase,\n          }),\n        };\n        const res = await fetch(`${INDEXER_URL}/submit-tx`, options);\n        const response = await res.json();\n\n        if (!res.ok) {\n          return thunkApi.rejectWithValue({\n            errorMessage: response,\n            response,\n          });\n        }\n        return response;\n      } catch (e) {\n        const message = e instanceof Error ? e.message : JSON.stringify(e);\n        return thunkApi.rejectWithValue({\n          errorMessage: message,\n          response: e as any,\n        });\n      }\n    }\n  },\n);\n\nexport const signWithHardwareWallet = createAsyncThunk<\n  string | Buffer,\n  {\n    transactionXDR: string;\n    networkPassphrase: string;\n    publicKey: string;\n    bipPath: string;\n    walletType: ConfigurableWalletType;\n    isHashSigningEnabled: boolean;\n    isSignSorobanAuthorization?: boolean;\n  },\n  { rejectValue: ErrorMessage }\n>(\n  \"signWithHardwareWallet\",\n  async (\n    {\n      transactionXDR,\n      networkPassphrase,\n      publicKey,\n      bipPath,\n      walletType,\n      isHashSigningEnabled,\n      isSignSorobanAuthorization,\n    },\n    thunkApi,\n  ) => {\n    if (isSignSorobanAuthorization) {\n      try {\n        const auth = Buffer.from(transactionXDR, \"base64\");\n\n        const signature = await hardwareSignAuth[walletType]({\n          bipPath,\n          auth,\n          isHashSigningEnabled,\n        });\n\n        return signature;\n      } catch (e) {\n        const message = e instanceof Error ? e.message : JSON.stringify(e);\n        return thunkApi.rejectWithValue({ errorMessage: message });\n      }\n    }\n\n    try {\n      const tx = TransactionBuilder.fromXDR(transactionXDR, networkPassphrase);\n\n      const signature = await hardwareSign[walletType]({\n        bipPath,\n        tx,\n        isHashSigningEnabled,\n      });\n\n      const keypair = Keypair.fromPublicKey(publicKey);\n      const decoratedSignature = new xdr.DecoratedSignature({\n        hint: keypair.signatureHint(),\n        signature,\n      });\n\n      tx.signatures.push(decoratedSignature);\n\n      return tx.toXDR();\n    } catch (e) {\n      const message = e instanceof Error ? e.message : JSON.stringify(e);\n      return thunkApi.rejectWithValue({ errorMessage: message });\n    }\n  },\n);\n\nexport const addRecentAddress = createAsyncThunk<\n  { recentAddresses: string[] },\n  { publicKey: string },\n  { rejectValue: ErrorMessage }\n>(\"addRecentAddress\", async ({ publicKey }, thunkApi) => {\n  try {\n    return await internalAddRecentAddress({ publicKey });\n  } catch (e) {\n    const message = e instanceof Error ? e.message : JSON.stringify(e);\n    return thunkApi.rejectWithValue({ errorMessage: message });\n  }\n});\n\nexport const loadRecentAddresses = createAsyncThunk<\n  { recentAddresses: string[] },\n  undefined,\n  { rejectValue: ErrorMessage }\n>(\"loadRecentAddresses\", async (_: any, thunkApi) => {\n  try {\n    return await internalLoadRecentAddresses();\n  } catch (e) {\n    const message = e instanceof Error ? e.message : JSON.stringify(e);\n    return thunkApi.rejectWithValue({ errorMessage: message });\n  }\n});\n\nconst storeBalanceMetricData = (publicKey: string, accountFunded: boolean) => {\n  const metricsData: MetricsData = JSON.parse(\n    localStorage.getItem(METRICS_DATA) || \"{}\",\n  );\n  const accountType = metricsData.accountType;\n\n  if (accountFunded && accountType === AccountType.HW) {\n    metricsData.hwFunded = true;\n  }\n  if (accountFunded && accountType === AccountType.IMPORTED) {\n    metricsData.importedFunded = true;\n  }\n  if (accountType === AccountType.FREIGHTER) {\n    // check if we found a previously unfunded freighter account for metrics\n    const unfundedFreighterAccounts =\n      metricsData.unfundedFreighterAccounts || [];\n    const idx = unfundedFreighterAccounts.indexOf(publicKey);\n\n    if (accountFunded) {\n      metricsData.freighterFunded = true;\n      if (idx !== -1) {\n        emitMetric(METRIC_NAMES.freighterAccountFunded, { publicKey });\n        unfundedFreighterAccounts.splice(idx, 1);\n      }\n    }\n    if (!accountFunded && idx === -1) {\n      unfundedFreighterAccounts.push(publicKey);\n    }\n    metricsData.unfundedFreighterAccounts = unfundedFreighterAccounts;\n  }\n\n  localStorage.setItem(METRICS_DATA, JSON.stringify(metricsData));\n};\n\nexport const removeTokenId = createAsyncThunk<\n  void,\n  {\n    contractId: string;\n    network: NETWORKS;\n  },\n  { rejectValue: ErrorMessage }\n  // @ts-ignore\n>(\"removeTokenId\", async ({ contractId, network }, thunkApi) => {\n  try {\n    await internalRemoveTokenId({ contractId, network });\n  } catch (e) {\n    console.error(e);\n    thunkApi.rejectWithValue({ errorMessage: e as string });\n  }\n});\n\nexport const getAccountBalances = createAsyncThunk<\n  AccountBalancesInterface,\n  {\n    publicKey: string;\n    networkDetails: NetworkDetails;\n  },\n  { rejectValue: ErrorMessage }\n>(\"getAccountBalances\", async ({ publicKey, networkDetails }, thunkApi) => {\n  try {\n    let balances;\n\n    const isMainnet = isMainnetHelper(networkDetails);\n\n    if (isCustomNetwork(networkDetails)) {\n      balances = await internalGetAccountBalancesStandalone({\n        publicKey,\n        networkDetails,\n        isMainnet,\n      });\n    } else {\n      balances = await internalgetAccountIndexerBalances(\n        publicKey,\n        networkDetails,\n      );\n    }\n\n    storeBalanceMetricData(publicKey, balances.isFunded || false);\n    return balances;\n  } catch (e) {\n    return thunkApi.rejectWithValue({ errorMessage: e as string });\n  }\n});\n\nexport const getDestinationBalances = createAsyncThunk<\n  AccountBalancesInterface,\n  {\n    publicKey: string;\n    networkDetails: NetworkDetails;\n  },\n  { rejectValue: ErrorMessage }\n>(\"getDestinationBalances\", async ({ publicKey, networkDetails }, thunkApi) => {\n  try {\n    if (isCustomNetwork(networkDetails)) {\n      return await internalGetAccountBalancesStandalone({\n        publicKey,\n        networkDetails,\n        isMainnet: isMainnetHelper(networkDetails),\n      });\n    }\n    return await internalgetAccountIndexerBalances(publicKey, networkDetails);\n  } catch (e) {\n    return thunkApi.rejectWithValue({ errorMessage: e as string });\n  }\n});\n\nexport const getAssetIcons = createAsyncThunk<\n  AssetIcons,\n  { balances: Balances; networkDetails: NetworkDetails },\n  { rejectValue: ErrorMessage }\n>(\n  \"auth/getAssetIcons\",\n  ({\n    balances,\n    networkDetails,\n  }: {\n    balances: Balances;\n    networkDetails: NetworkDetails;\n  }) => getAssetIconsService({ balances, networkDetails }),\n);\n\nexport const getAssetDomains = createAsyncThunk<\n  AssetDomains,\n  { balances: Balances; networkDetails: NetworkDetails },\n  { rejectValue: ErrorMessage }\n>(\n  \"auth/getAssetDomains\",\n  ({\n    balances,\n    networkDetails,\n  }: {\n    balances: Balances;\n    networkDetails: NetworkDetails;\n  }) => getAssetDomainsService({ balances, networkDetails }),\n);\n\nexport const getSoroswapTokens = createAsyncThunk<\n  SoroswapToken[],\n  undefined,\n  { rejectValue: ErrorMessage }\n>(\"getSoroswapTokens\", async (_, thunkApi) => {\n  let tokenData = { assets: [] as SoroswapToken[] };\n\n  try {\n    tokenData = await getSoroswapTokensService();\n  } catch (e) {\n    const message = e instanceof Error ? e.message : JSON.stringify(e);\n    return thunkApi.rejectWithValue({ errorMessage: message });\n  }\n\n  return tokenData.assets;\n});\n\n// returns the full record so can save the best path and its rate\nexport const getBestPath = createAsyncThunk<\n  Horizon.ServerApi.PaymentPathRecord,\n  {\n    amount: string;\n    sourceAsset: string;\n    destAsset: string;\n    networkDetails: NetworkDetails;\n  },\n  { rejectValue: ErrorMessage }\n>(\n  \"getBestPath\",\n  async ({ amount, sourceAsset, destAsset, networkDetails }, thunkApi) => {\n    try {\n      return await horizonGetBestPath({\n        amount,\n        sourceAsset,\n        destAsset,\n        networkDetails,\n      });\n    } catch (e) {\n      const message = e instanceof Error ? e.message : JSON.stringify(e);\n      return thunkApi.rejectWithValue({\n        errorMessage: message,\n      });\n    }\n  },\n);\n\nexport const getBestSoroswapPath = createAsyncThunk<\n  {\n    amountIn?: string;\n    amountOutMin?: string;\n    amountInDecimals: number;\n    amountOutDecimals: number;\n    path: string[];\n  } | null,\n  {\n    amount: string;\n    sourceContract: string;\n    destContract: string;\n    networkDetails: NetworkDetails;\n    publicKey: string;\n  },\n  { rejectValue: ErrorMessage }\n>(\n  \"getBestSoroswapPath\",\n  async (\n    { amount, sourceContract, destContract, networkDetails, publicKey },\n    thunkApi,\n  ) => {\n    try {\n      return await soroswapGetBestPath({\n        amount,\n        sourceContract,\n        destContract,\n        networkDetails,\n        publicKey,\n      });\n    } catch (e) {\n      const message = e instanceof Error ? e.message : JSON.stringify(e);\n      return thunkApi.rejectWithValue({\n        errorMessage: message,\n      });\n    }\n  },\n);\n\nexport const getMemoRequiredAccounts = createAsyncThunk<\n  MemoRequiredAccount[],\n  undefined,\n  { rejectValue: ErrorMessage }\n>(\"getBlockedAccounts\", async (_, thunkApi) => {\n  try {\n    const resp = await internalGetMemoRequiredAccounts();\n    return resp.memoRequiredAccounts || [];\n  } catch (e) {\n    return thunkApi.rejectWithValue({ errorMessage: e as string });\n  }\n});\n\nexport enum ShowOverlayStatus {\n  IDLE = \"IDLE\",\n  IN_PROGRESS = \"IN_PROGRESS\",\n}\n\ninterface TransactionData {\n  amount: string;\n  asset: string;\n  decimals?: number;\n  destination: string;\n  federationAddress: string;\n  transactionFee: string;\n  transactionTimeout: number;\n  memo?: string;\n  destinationAsset: string;\n  destinationDecimals?: number;\n  destinationAmount: string;\n  destinationIcon: string;\n  path: string[];\n  allowedSlippage: string;\n  isToken: boolean;\n  isMergeSelected: boolean;\n  balancesToMigrate: BalanceToMigrate[];\n  isSoroswap: boolean;\n}\n\ninterface HardwareWalletData {\n  status: ShowOverlayStatus;\n  transactionXDR: string;\n  shouldSubmit: boolean;\n}\n\nexport enum AssetSelectType {\n  MANAGE = \"MANAGE\",\n  REGULAR = \"REGULAR\",\n  PATH_PAY = \"PATH_PAY\",\n  SWAP = \"SWAP\",\n}\ninterface InitialState {\n  submitStatus: ActionStatus;\n  accountBalanceStatus: ActionStatus;\n  destinationAccountBalanceStatus: ActionStatus;\n  hardwareWalletData: HardwareWalletData;\n  response:\n    | Horizon.HorizonApi.TransactionResponse\n    | SorobanRpc.Api.SendTransactionResponse\n    | null;\n  error: ErrorMessage | undefined;\n  transactionData: TransactionData;\n  transactionSimulation: {\n    response: SorobanRpc.Api.SimulateTransactionSuccessResponse | null;\n    preparedTransaction: string | null;\n  };\n  accountBalances: AccountBalancesInterface;\n  destinationBalances: AccountBalancesInterface;\n  assetIcons: AssetIcons;\n  assetDomains: AssetDomains;\n  soroswapTokens: SoroswapToken[];\n  assetSelect: {\n    type: AssetSelectType;\n    isSource: boolean;\n  };\n  memoRequiredAccounts: MemoRequiredAccount[];\n}\n\nexport const initialState: InitialState = {\n  submitStatus: ActionStatus.IDLE,\n  accountBalanceStatus: ActionStatus.IDLE,\n  destinationAccountBalanceStatus: ActionStatus.IDLE,\n  response: null,\n  error: undefined,\n  transactionData: {\n    amount: \"0\",\n    asset: \"native\",\n    destination: \"\",\n    federationAddress: \"\",\n    transactionFee: \"\",\n    transactionTimeout: 180,\n    memo: \"\",\n    destinationAsset: \"\",\n    destinationAmount: \"\",\n    destinationIcon: \"\",\n    path: [],\n    allowedSlippage: \"1\",\n    isToken: false,\n    isMergeSelected: false,\n    balancesToMigrate: [] as BalanceToMigrate[],\n    isSoroswap: false,\n  },\n  transactionSimulation: {\n    response: null,\n    preparedTransaction: null,\n  },\n  hardwareWalletData: {\n    status: ShowOverlayStatus.IDLE,\n    transactionXDR: \"\",\n    shouldSubmit: true,\n  },\n  accountBalances: {\n    balances: null,\n    isFunded: false,\n    subentryCount: 0,\n  },\n  destinationBalances: {\n    balances: null,\n    isFunded: true,\n    subentryCount: 0,\n  },\n  assetIcons: {},\n  assetDomains: {},\n  soroswapTokens: [],\n  assetSelect: {\n    type: AssetSelectType.MANAGE,\n    isSource: true,\n  },\n  memoRequiredAccounts: [],\n};\n\nconst transactionSubmissionSlice = createSlice({\n  name: \"transactionSubmission\",\n  initialState,\n  reducers: {\n    resetSubmission: () => initialState,\n    resetAccountBalanceStatus: (state) => {\n      state.accountBalanceStatus = initialState.accountBalanceStatus;\n    },\n    resetDestinationAmount: (state) => {\n      state.transactionData.destinationAmount =\n        initialState.transactionData.destinationAmount;\n    },\n    resetSubmitStatus: (state) => {\n      state.submitStatus = initialState.submitStatus;\n    },\n    saveDestination: (state, action) => {\n      state.transactionData.destination = action.payload;\n    },\n    saveFederationAddress: (state, action) => {\n      state.transactionData.federationAddress = action.payload;\n    },\n    saveAmount: (state, action) => {\n      state.transactionData.amount = action.payload;\n    },\n    saveAsset: (state, action) => {\n      state.transactionData.asset = action.payload;\n    },\n    saveTransactionFee: (state, action) => {\n      state.transactionData.transactionFee = action.payload;\n    },\n    saveTransactionTimeout: (state, action) => {\n      state.transactionData.transactionTimeout = action.payload;\n    },\n    saveMemo: (state, action) => {\n      state.transactionData.memo = action.payload;\n    },\n    saveDestinationAsset: (state, action) => {\n      state.transactionData.destinationAsset = action.payload;\n    },\n    saveDestinationIcon: (state, action) => {\n      state.transactionData.destinationIcon = action.payload;\n    },\n    saveIsSoroswap: (state, action) => {\n      state.transactionData.isSoroswap = action.payload;\n    },\n    saveAllowedSlippage: (state, action) => {\n      state.transactionData.allowedSlippage = action.payload;\n    },\n    saveIsToken: (state, action) => {\n      state.transactionData.isToken = action.payload;\n    },\n    saveSimulation: (state, action) => {\n      state.transactionSimulation = action.payload;\n    },\n    startHwConnect: (state) => {\n      state.hardwareWalletData.status = ShowOverlayStatus.IN_PROGRESS;\n      state.hardwareWalletData.transactionXDR = \"\";\n    },\n    startHwSign: (state, action) => {\n      state.hardwareWalletData.status = ShowOverlayStatus.IN_PROGRESS;\n      state.hardwareWalletData.transactionXDR = action.payload.transactionXDR;\n      state.hardwareWalletData.shouldSubmit = action.payload.shouldSubmit;\n    },\n    closeHwOverlay: (state) => {\n      state.hardwareWalletData.status = ShowOverlayStatus.IDLE;\n      state.hardwareWalletData.transactionXDR = \"\";\n      state.hardwareWalletData.shouldSubmit = true;\n    },\n    saveAssetSelectType: (state, action) => {\n      state.assetSelect.type = action.payload;\n    },\n    saveAssetSelectSource: (state, action) => {\n      state.assetSelect.isSource = action.payload;\n    },\n    saveIsMergeSelected: (state, action) => {\n      state.transactionData.isMergeSelected = action.payload;\n    },\n    saveBalancesToMigrate: (state, action) => {\n      state.transactionData.balancesToMigrate = action.payload;\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(submitFreighterTransaction.pending, (state) => {\n      state.submitStatus = ActionStatus.PENDING;\n    });\n    builder.addCase(submitFreighterTransaction.rejected, (state, action) => {\n      state.submitStatus = ActionStatus.ERROR;\n      state.error = action.payload;\n    });\n    builder.addCase(submitFreighterTransaction.fulfilled, (state, action) => {\n      state.submitStatus = ActionStatus.SUCCESS;\n      state.response = action.payload;\n    });\n    builder.addCase(submitFreighterSorobanTransaction.pending, (state) => {\n      state.submitStatus = ActionStatus.PENDING;\n    });\n    builder.addCase(\n      submitFreighterSorobanTransaction.rejected,\n      (state, action) => {\n        state.submitStatus = ActionStatus.ERROR;\n        state.error = action.payload;\n      },\n    );\n    builder.addCase(\n      submitFreighterSorobanTransaction.fulfilled,\n      (state, action) => {\n        state.submitStatus = ActionStatus.SUCCESS;\n        state.response = action.payload;\n      },\n    );\n    builder.addCase(signFreighterTransaction.pending, (state) => {\n      state.submitStatus = ActionStatus.PENDING;\n    });\n    builder.addCase(signFreighterSorobanTransaction.pending, (state) => {\n      state.submitStatus = ActionStatus.PENDING;\n    });\n    builder.addCase(signFreighterTransaction.rejected, (state, action) => {\n      state.submitStatus = ActionStatus.ERROR;\n      state.error = action.payload;\n    });\n    builder.addCase(\n      signFreighterSorobanTransaction.rejected,\n      (state, action) => {\n        state.submitStatus = ActionStatus.ERROR;\n        state.error = action.payload;\n      },\n    );\n    builder.addCase(getBestPath.rejected, (state) => {\n      state.transactionData.path = initialState.transactionData.path;\n      state.transactionData.destinationAmount =\n        initialState.transactionData.destinationAmount;\n    });\n    builder.addCase(getBestSoroswapPath.rejected, (state) => {\n      state.transactionData.path = initialState.transactionData.path;\n      state.transactionData.destinationAmount =\n        initialState.transactionData.destinationAmount;\n    });\n    builder.addCase(getAccountBalances.pending, (state) => {\n      state.accountBalanceStatus = ActionStatus.PENDING;\n      state.accountBalances = initialState.accountBalances;\n    });\n    builder.addCase(getAccountBalances.rejected, (state, action) => {\n      state.error = action.payload;\n      state.accountBalanceStatus = ActionStatus.ERROR;\n    });\n    builder.addCase(getAccountBalances.fulfilled, (state, action) => {\n      state.accountBalances = action.payload;\n      state.accountBalanceStatus = ActionStatus.SUCCESS;\n    });\n    builder.addCase(getDestinationBalances.fulfilled, (state, action) => {\n      state.destinationBalances = action.payload;\n      state.destinationAccountBalanceStatus = ActionStatus.SUCCESS;\n    });\n    builder.addCase(getAssetIcons.fulfilled, (state, action) => {\n      const assetIcons = action.payload || {};\n\n      return {\n        ...state,\n        assetIcons,\n      };\n    });\n    builder.addCase(getAssetDomains.fulfilled, (state, action) => {\n      const assetDomains = action.payload || {};\n\n      return {\n        ...state,\n        assetDomains,\n      };\n    });\n    builder.addCase(getSoroswapTokens.fulfilled, (state, action) => {\n      const soroswapTokens = action.payload || {};\n\n      return {\n        ...state,\n        soroswapTokens,\n      };\n    });\n    builder.addCase(getBestPath.fulfilled, (state, action) => {\n      if (!action.payload) {\n        state.transactionData.path = [];\n        state.transactionData.destinationAmount = \"\";\n        return;\n      }\n\n      // store in canonical form for easier use\n      const path: string[] = [];\n      action.payload.path.forEach((p) => {\n        if (!p.asset_code && !p.asset_issuer) {\n          path.push(p.asset_type);\n        } else {\n          path.push(getCanonicalFromAsset(p.asset_code, p.asset_issuer));\n        }\n      });\n\n      state.transactionData.path = path;\n      state.transactionData.destinationAmount =\n        action.payload.destination_amount;\n    });\n    builder.addCase(getBestSoroswapPath.fulfilled, (state, action) => {\n      if (!action.payload) {\n        state.transactionData.path = [];\n        state.transactionData.destinationAmount = \"\";\n        return;\n      }\n\n      state.transactionData.path = action.payload.path;\n      state.transactionData.destinationAmount =\n        action.payload.amountOutMin || \"\";\n      state.transactionData.decimals = action.payload.amountInDecimals;\n      state.transactionData.destinationDecimals =\n        action.payload.amountOutDecimals;\n    });\n    builder.addCase(getMemoRequiredAccounts.fulfilled, (state, action) => {\n      state.memoRequiredAccounts = action.payload;\n    });\n  },\n});\n\nexport const {\n  resetSubmission,\n  resetAccountBalanceStatus,\n  resetDestinationAmount,\n  resetSubmitStatus,\n  saveDestination,\n  saveFederationAddress,\n  saveAmount,\n  saveAsset,\n  saveTransactionFee,\n  saveTransactionTimeout,\n  saveMemo,\n  saveDestinationAsset,\n  saveDestinationIcon,\n  saveIsSoroswap,\n  saveAllowedSlippage,\n  saveIsToken,\n  saveSimulation,\n  startHwConnect,\n  startHwSign,\n  closeHwOverlay,\n  saveAssetSelectType,\n  saveAssetSelectSource,\n  saveIsMergeSelected,\n  saveBalancesToMigrate,\n} = transactionSubmissionSlice.actions;\nexport const { reducer } = transactionSubmissionSlice;\n\nexport const transactionSubmissionSelector = (state: {\n  transactionSubmission: InitialState;\n}) => state.transactionSubmission;\n\nexport const transactionDataSelector = (state: {\n  transactionSubmission: InitialState;\n}) => state.transactionSubmission.transactionData;\n\nexport const isPathPaymentSelector = (state: {\n  transactionSubmission: InitialState;\n}) => state.transactionSubmission.transactionData.destinationAsset !== \"\";\n\nexport const tokensSelector = (state: {\n  accountBalanceStatus: ActionStatus;\n}) => ({\n  accountBalanceStatus: state.accountBalanceStatus,\n});\n","import { xdr } from \"stellar-sdk\";\nimport {\n  Router,\n  Token,\n  CurrencyAmount,\n  TradeType,\n  Networks,\n  Protocol,\n} from \"soroswap-router-sdk\";\nimport BigNumber from \"bignumber.js\";\n\nimport { NetworkDetails } from \"@shared/constants/stellar\";\nimport { getSdk, isCustomNetwork } from \"@shared/helpers/stellar\";\nimport { stellarSdkServer } from \"@shared/api/helpers/stellarSdkServer\";\nimport { getTokenDetails, simulateTransaction } from \"@shared/api/internal\";\nimport { SoroswapToken } from \"@shared/api/types\";\nimport { buildSorobanServer } from \"@shared/helpers/soroban/server\";\nimport { isTestnet, xlmToStroop } from \"helpers/stellar\";\nimport { parseTokenAmount, formatTokenAmount } from \"popup/helpers/soroban\";\n\n/*\n * getSoroswapTokens\n * Get the list of tokens that Soroswap supports for swapping.\n * This is useful to display in the UI to show the user what tokens they can swap between.\n * Returns just the list you'll need to use for Testnet.\n */\nexport const getSoroswapTokens = async (): Promise<{\n  assets: SoroswapToken[];\n}> => {\n  const res = await fetch(new URL(\"https://api.soroswap.finance/api/tokens\"));\n\n  const data = await res.json();\n\n  return data.find((d: { network: string }) => d.network === \"testnet\");\n};\n\ninterface SoroswapGetBestPathParams {\n  amount: string;\n  sourceContract: string;\n  destContract: string;\n  networkDetails: NetworkDetails;\n  publicKey: string;\n}\n\n/*\n * soroswapGetBestPath\n * Given 2 assets, constructs a path to swap between them.\n * Returns the path for a swap as well as the `amountIn` and `amountOutMin` values (the conversion rate).\n */\nexport const soroswapGetBestPath = async ({\n  amount,\n  sourceContract,\n  destContract,\n  networkDetails,\n  publicKey,\n}: SoroswapGetBestPathParams) => {\n  // For Freighter's purposes, we only support Testnet. Therefore, we error if this is called by another network\n  if (!isTestnet(networkDetails)) {\n    throw Error(\"Network not supported\");\n  }\n\n  // We can default to Testnet as we only support Testnet, but for your purposes, you may configure this to any network you'd like.\n  const network = Networks.TESTNET;\n\n  // Construct the details for the source and destination tokens\n\n  // In Freighter, we have a helper method that fetches the token details for a given contract ID.\n  // Our helper simulates tx's on the given contract ID to get read-only information about each token.\n  // The important information we're trying to retrieve is each token's `decimals`. You can retrieve this information however you'd like.\n  const sourceTokenDetails = await getTokenDetails({\n    contractId: sourceContract,\n    networkDetails,\n    publicKey,\n  });\n  const destTokenDetails = await getTokenDetails({\n    contractId: destContract,\n    networkDetails,\n    publicKey,\n  });\n\n  if (!sourceTokenDetails || !destTokenDetails) {\n    throw Error(\"Source token not found\");\n  }\n\n  // Here we start interacting with `soroswap-router-sdk`\n  // For each token, we create a `Token` object with the token's network, contract ID, and the decimals we retrieved.\n  const sourceToken = new Token(\n    network,\n    sourceContract,\n    sourceTokenDetails.decimals,\n  );\n\n  const destToken = new Token(network, destContract, destTokenDetails.decimals);\n\n  // The `Router` is used to find the best path for a swap between two tokens.\n  const router = new Router({\n    getPairsFns: [\n      {\n        protocol: Protocol.SOROSWAP,\n        fn: async () => {\n          const res = await fetch(\n            // this endpoint is used to get the pairs for Testnet which `Router` will used to determine conversion rate\n            new URL(\n              \"https://info.soroswap.finance/api/pairs/plain?network=TESTNET\",\n            ),\n          );\n\n          const data = await res.json();\n\n          return data;\n        },\n      },\n      {\n        protocol: Protocol.PHOENIX,\n        fn: async () => {\n          const res = await fetch(\n            // this endpoint is used to get the pairs for Testnet which `Router` will used to determine conversion rate\n            new URL(\n              \"https://info.soroswap.finance/api/pairs/phoenix?network=TESTNET\",\n            ),\n          );\n\n          const data = await res.json();\n\n          return data;\n        },\n      },\n    ],\n    pairsCacheInSeconds: 60,\n    protocols: [Protocol.SOROSWAP, Protocol.PHOENIX],\n    network,\n    maxHops: 5,\n  });\n\n  // Now that we have `Router` setup, we can tell it to find the best path between our source and destination tokens.\n\n  // When determining the best path, we need to format our source amount because in the UI, we use a more human-readable format.\n  // But here, we need to pass an argument using the token's decimals. (For ex: 1 XLM will become 10000000 because the `decimals` value is 7).\n  // Freighter has a helper method called `parseTokenAmount`, to do this\n  const parsedAmount = parseTokenAmount(amount, sourceTokenDetails.decimals);\n\n  // We then create a `CurrencyAmount` object using `soroswap-router-sdk` with the source token and this parsed amount.\n  const currencyAmount = CurrencyAmount.fromRawAmount(\n    sourceToken,\n    parsedAmount.toNumber(),\n  );\n  const quoteCurrency = destToken;\n\n  // Now we can generate the path between the amount of source token and the destination token.\n  const route = await router.route(\n    currencyAmount,\n    quoteCurrency,\n    TradeType.EXACT_INPUT,\n  );\n\n  if (route?.trade) {\n    // The path is an array of strings that represent the contract IDs of the tokens in the path. This may not be useful for the user, but we'll need it in the next step.\n    // The amounIn and amountOutMin are useful for the UI: it will show the user what they're putting and what they expect to receive for it.\n    // We're removing the trailing decimals using `formatTokenAmount` before returning just to make it a little more readbale for the user.\n    return {\n      amountIn: formatTokenAmount(\n        new BigNumber(route.trade?.amountIn || \"\"),\n        sourceTokenDetails.decimals,\n      ).toString(),\n      amountInDecimals: sourceTokenDetails.decimals,\n      amountOutMin: formatTokenAmount(\n        new BigNumber(route.trade?.amountOutMin || \"\"),\n        destTokenDetails.decimals,\n      ).toString(),\n      amountOutDecimals: destTokenDetails.decimals,\n      path: route.trade?.path,\n    };\n  }\n\n  return null;\n};\n\n// After constructing the path and showing the user their conversion rate, we'll ask them to confirm the swap.\n// From there, we can use the `buildAndSimulateSoroswapTx` method to simulate the swap and build the transaction.\n\ninterface BuildAndSimulateSoroswapTxParams {\n  amountIn: string;\n  amountInDecimals?: number;\n  amountOut: string;\n  amountOutDecimals?: number;\n  path: string[];\n  networkDetails: NetworkDetails;\n  publicKey: string;\n  memo?: string;\n  transactionFee: string;\n}\n\n/*\n * buildAndSimulateSoroswapTx\n * Given our 2 assets and the path between them, we can build and simulate our transaction to confirm it will behave as expected when submitted to the network.\n * Returns the simulation response as well as the transaction that will be submitted to the network.\n */\nexport const buildAndSimulateSoroswapTx = async ({\n  amountIn,\n  amountInDecimals = 7,\n  amountOut,\n  amountOutDecimals = 7,\n  path,\n  networkDetails,\n  publicKey,\n  memo,\n  transactionFee,\n}: BuildAndSimulateSoroswapTxParams) => {\n  // This is some custom logic specific just to Freighter that we use to utilize the stellar-sdk. You can ignore this.\n  // Anytime you see `Sdk`, it's just a reference to the stellar-sdk.\n  // For example: import `Sdk` from \"stellar-sdk\";\n  const Sdk = getSdk(networkDetails.networkPassphrase);\n  const server = stellarSdkServer(\n    networkDetails.networkUrl,\n    networkDetails.networkPassphrase,\n  );\n\n  /* \n  import Sdk from \"soroban-sdk\";\n  const sorobanServer = new Sdk.SorobanRpc.Server(serverUrl);\n\n  is equivalent to the code below:\n  */\n  const sorobanServer = buildSorobanServer(\n    networkDetails.sorobanRpcUrl || \"\",\n    networkDetails.networkPassphrase,\n  );\n\n  // Load the user's account\n  const account = await server.loadAccount(publicKey);\n\n  // This endpoint will return the contract address for the router on Testnet, which will be needed later\n  const routerRes = await fetch(\n    new URL(\"https://api.soroswap.finance/api/testnet/router\"),\n  );\n  const routerData = await routerRes.json();\n  const routerAddress: string = routerData.address;\n\n  // Just like in other stellar-sdk flows, we construct a Transaction using TransactionBuilder\n  // More info here: https://developers.stellar.org/docs/smart-contracts/guides/transactions\n  const tx = new Sdk.TransactionBuilder(account, {\n    fee: xlmToStroop(transactionFee).toFixed(),\n    timebounds: { minTime: 0, maxTime: 0 },\n    networkPassphrase: networkDetails.networkPassphrase,\n  });\n\n  // Similar to the `soroswapGetBestPath` method, we again need to format our amounts using the token's decimals.\n  // .i.e, going from the human-readable 1 XLM to 10000000\n  const parsedAmountIn = parseTokenAmount(\n    amountIn,\n    amountInDecimals,\n  ).toNumber();\n  const parsedAmountOut = parseTokenAmount(\n    amountOut,\n    amountOutDecimals,\n  ).toNumber();\n\n  // Now we'll utilize the `path` we generated in `soroswapGetBestPath`.\n  // The path we generated before was just an array of strings. Here we'll build an array of Address objects\n  const mappedPath = path.map((address) => new Sdk.Address(address));\n\n  // We'll use a helper method from stellar-sdk to generate the `SCVal` for each of the parameters of the swap\n  const swapParams: xdr.ScVal[] = [\n    // the amount the user is sending\n    Sdk.nativeToScVal(parsedAmountIn, { type: \"i128\" }),\n    // the amount the user expects to receive\n    Sdk.nativeToScVal(parsedAmountOut, { type: \"i128\" }),\n    // the path between the source and destination tokens\n    Sdk.nativeToScVal(mappedPath),\n    // the user's public key\n    new Sdk.Address(publicKey).toScVal(),\n    // the deadline for the swap\n    Sdk.nativeToScVal(Date.now() + 3600000, { type: \"u64\" }),\n  ];\n\n  // We then create a contract instance using the router address\n  const contractInstance = new Sdk.Contract(routerAddress);\n  // And create a contract operation to swap the tokens using the `swap_exact_tokens_for_tokens` method\n  const contractOperation = contractInstance.call(\n    \"swap_exact_tokens_for_tokens\",\n    ...swapParams,\n  );\n\n  // We add the contract operation to the transaction\n  tx.addOperation(contractOperation);\n\n  // And, if applicable, add a memo to the transaction\n  if (memo) {\n    tx.addMemo(Sdk.Memo.text(memo));\n  }\n  const builtTx = tx.build();\n\n  if (isCustomNetwork(networkDetails)) {\n    // Now we can simulate and see if we have any issues\n    const simulationTransaction = await sorobanServer.simulateTransaction(\n      builtTx,\n    );\n\n    // If the simulation response is valid, we can prepare the transaction to be submitted to the network\n    // This is the transaction the user will sign and then submit to complete the swap\n    const preparedTransaction = Sdk.SorobanRpc.assembleTransaction(\n      builtTx,\n      simulationTransaction,\n    )\n      .build()\n      .toXDR();\n\n    if (Sdk.SorobanRpc.Api.isSimulationError(simulationTransaction)) {\n      throw new Error(simulationTransaction.error);\n    }\n\n    return {\n      simulationTransaction,\n      preparedTransaction,\n    };\n  }\n\n  const { ok, response } = await simulateTransaction({\n    xdr: builtTx.toXDR(),\n    networkDetails,\n  });\n\n  if (!ok) {\n    throw new Error(response as string);\n  }\n\n  return {\n    preparedTransaction: response.preparedTransaction,\n    simulationTransaction: response.simulationResponse,\n  };\n};\n","import { Asset, Horizon } from \"stellar-sdk\";\nimport { getAssetFromCanonical } from \"helpers/stellar\";\nimport { NetworkDetails } from \"@shared/constants/stellar\";\nimport { cleanAmount } from \"./formatters\";\n\nexport const horizonGetBestPath = async ({\n  amount,\n  sourceAsset,\n  destAsset,\n  networkDetails,\n}: {\n  amount: string;\n  sourceAsset: string;\n  destAsset: string;\n  networkDetails: NetworkDetails;\n}) => {\n  const server = new Horizon.Server(networkDetails.networkUrl);\n  const builder = server.strictSendPaths(\n    getAssetFromCanonical(sourceAsset) as Asset,\n    cleanAmount(amount),\n    [getAssetFromCanonical(destAsset)] as Asset[],\n  );\n\n  const paths = await builder.call();\n  return paths.records[0];\n};\n","import { Address, SorobanRpc, XdrLargeInt } from \"stellar-sdk\";\nimport { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { ActionStatus, ErrorMessage } from \"@shared/api/types\";\nimport { simulateTokenTransfer } from \"@shared/api/internal\";\nimport { NetworkDetails } from \"@shared/constants/stellar\";\nimport { SorobanRpcNotSupportedError } from \"@shared/constants/errors\";\nimport { transfer } from \"@shared/helpers/soroban/token\";\nimport { isCustomNetwork } from \"@shared/helpers/stellar\";\nimport { xlmToStroop } from \"helpers/stellar\";\n\nimport {\n  buildSorobanServer,\n  getNewTxBuilder,\n} from \"@shared/helpers/soroban/server\";\nimport { buildAndSimulateSoroswapTx } from \"popup/helpers/sorobanSwap\";\n\nexport const simulateTokenPayment = createAsyncThunk<\n  {\n    preparedTransaction: string;\n    simulationTransaction: SorobanRpc.Api.SimulateTransactionSuccessResponse;\n  },\n  {\n    address: string;\n    publicKey: string;\n    memo?: string;\n    params: {\n      publicKey: string;\n      destination: string;\n      amount: number;\n    };\n    networkDetails: NetworkDetails;\n    transactionFee: string;\n  },\n  {\n    rejectValue: ErrorMessage;\n  }\n>(\n  \"simulateTokenPayment\",\n  async (\n    { address, publicKey, memo, params, networkDetails, transactionFee },\n    thunkApi,\n  ) => {\n    try {\n      if (isCustomNetwork(networkDetails)) {\n        if (!networkDetails.sorobanRpcUrl) {\n          throw new SorobanRpcNotSupportedError();\n        }\n        const server = buildSorobanServer(\n          networkDetails.sorobanRpcUrl,\n          networkDetails.networkPassphrase,\n        );\n        const builder = await getNewTxBuilder(\n          publicKey,\n          networkDetails,\n          server,\n          xlmToStroop(transactionFee).toFixed(),\n        );\n\n        const transferParams = [\n          new Address(publicKey).toScVal(), // from\n          new Address(address).toScVal(), // to\n          new XdrLargeInt(\"i128\", params.amount).toI128(), // amount\n        ];\n        const transaction = transfer(address, transferParams, memo, builder);\n        const simulationTransaction = await server.simulateTransaction(\n          transaction,\n        );\n\n        const preparedTransaction = SorobanRpc.assembleTransaction(\n          transaction,\n          simulationTransaction,\n        )\n          .build()\n          .toXDR();\n\n        return {\n          simulationTransaction,\n          preparedTransaction,\n        };\n      }\n      const { ok, response } = await simulateTokenTransfer({\n        address,\n        publicKey,\n        memo,\n        params,\n        networkDetails,\n        transactionFee,\n      });\n\n      if (!ok) {\n        return thunkApi.rejectWithValue({\n          errorMessage: response.message,\n        });\n      }\n\n      return {\n        preparedTransaction: response.preparedTransaction,\n        simulationTransaction: response.simulationResponse,\n      };\n    } catch (e) {\n      const message = e instanceof Error ? e.message : JSON.stringify(e);\n      return thunkApi.rejectWithValue({\n        errorMessage: message,\n      });\n    }\n  },\n);\n\nexport const simulateSwap = createAsyncThunk<\n  {\n    preparedTransaction: string;\n    simulationTransaction: SorobanRpc.Api.SimulateTransactionSuccessResponse;\n  },\n  {\n    networkDetails: NetworkDetails;\n    publicKey: string;\n    amountIn: string;\n    amountInDecimals: number;\n    amountOut: string;\n    amountOutDecimals: number;\n    memo?: string;\n    transactionFee: string;\n    path: string[];\n  },\n  {\n    rejectValue: ErrorMessage;\n  }\n>(\n  \"simulateSwap\",\n  async (\n    {\n      networkDetails,\n      publicKey,\n      amountIn,\n      amountInDecimals,\n      amountOut,\n      amountOutDecimals,\n      memo,\n      transactionFee,\n      path,\n    },\n    thunkApi,\n  ) => {\n    try {\n      const sim = await buildAndSimulateSoroswapTx({\n        networkDetails,\n        publicKey,\n        amountIn,\n        amountInDecimals,\n        amountOut,\n        amountOutDecimals,\n        memo,\n        transactionFee,\n        path,\n      });\n\n      return sim;\n    } catch (e) {\n      const message = e instanceof Error ? e.message : JSON.stringify(e);\n      return thunkApi.rejectWithValue({\n        errorMessage: message,\n      });\n    }\n  },\n);\n\ninterface InitialState {\n  error: ErrorMessage | undefined;\n  simulation: {\n    preparedTransaction: string | null;\n    simulationTransaction: SorobanRpc.Api.SimulateTransactionSuccessResponse | null;\n  };\n  simStatus: ActionStatus;\n}\n\nexport const initialState: InitialState = {\n  error: undefined,\n  simulation: {\n    preparedTransaction: null,\n    simulationTransaction: null,\n  },\n  simStatus: ActionStatus.IDLE,\n};\n\nconst tokenPaymentsSimulationSlice = createSlice({\n  name: \"tokenPaymentSimulation\",\n  initialState,\n  reducers: {\n    resetSimulation: () => initialState,\n  },\n  extraReducers: (builder) => {\n    builder.addCase(simulateTokenPayment.pending, (state) => {\n      state.simStatus = ActionStatus.PENDING;\n    });\n    builder.addCase(simulateTokenPayment.rejected, (state, action) => {\n      state.simStatus = ActionStatus.ERROR;\n      state.error = action.payload;\n    });\n    builder.addCase(simulateTokenPayment.fulfilled, (state, action) => {\n      state.simStatus = ActionStatus.SUCCESS;\n      state.simulation = action.payload;\n    });\n    builder.addCase(simulateSwap.pending, (state) => {\n      state.simStatus = ActionStatus.PENDING;\n    });\n    builder.addCase(simulateSwap.rejected, (state, action) => {\n      state.simStatus = ActionStatus.ERROR;\n      state.error = action.payload;\n    });\n    builder.addCase(simulateSwap.fulfilled, (state, action) => {\n      state.simStatus = ActionStatus.SUCCESS;\n      state.simulation = action.payload;\n    });\n  },\n});\n\nexport const { resetSimulation } = tokenPaymentsSimulationSlice.actions;\nexport const { reducer } = tokenPaymentsSimulationSlice;\n\nexport const tokenSimulationSelector = (state: {\n  tokenPaymentSimulation: InitialState;\n}) => state.tokenPaymentSimulation;\n\nexport const tokenSimulationStatusSelector = (state: {\n  tokenPaymentSimulation: InitialState;\n}) => state.tokenPaymentSimulation.simStatus;\n\nexport const tokenSimulationErrorSelector = (state: {\n  tokenPaymentSimulation: InitialState;\n}) => state.tokenPaymentSimulation.error;\n","import React from \"react\";\nimport { Icon } from \"@stellar/design-system\";\nimport { useHistory } from \"react-router-dom\";\n\nimport \"./styles.scss\";\n\ninterface BackButtonProps {\n  customBackAction?: () => void;\n  customBackIcon?: React.ReactNode;\n  hasBackCopy?: boolean;\n  customButtonComponent?: React.ReactElement;\n}\n\nexport const BackButton = ({\n  customBackAction,\n  customBackIcon,\n  hasBackCopy,\n  customButtonComponent,\n}: BackButtonProps) => {\n  const history = useHistory();\n\n  const handleClick = () => {\n    if (customBackAction) {\n      customBackAction();\n    } else {\n      history.goBack();\n    }\n  };\n\n  if (customButtonComponent) {\n    return React.cloneElement(customButtonComponent, { onClick: handleClick });\n  }\n\n  return (\n    <div\n      className={`BackButton ${hasBackCopy ? \"BackButton--has-copy\" : \"\"}`}\n      data-testid=\"BackButton\"\n      onClick={handleClick}\n    >\n      {customBackIcon || <Icon.ArrowLeft />}\n      {hasBackCopy ? <div className=\"BackButton__copy\">Back</div> : null}\n    </div>\n  );\n};\n","export const addStyleClasses = (classes: string[]) =>\n  [...classes].filter(Boolean).join(\" \");\n","import React, { createContext, useContext } from \"react\";\nimport { Text } from \"@stellar/design-system\";\n\nimport FreighterLogo from \"popup/assets/logo-freighter.svg\";\nimport { BackButton } from \"popup/basics/buttons/BackButton\";\nimport { addStyleClasses } from \"popup/helpers/addStyleClasses\";\n\nimport \"./styles.scss\";\n\ninterface ViewContextProps {\n  isAppLayout?: boolean;\n}\n\nconst ViewContext = createContext<ViewContextProps>({ isAppLayout: undefined });\n\n// Header\nconst ViewHeader: React.FC = ({ ...props }) => (\n  <header className=\"View__header\" {...props}>\n    <ViewInset isInline hasVerticalBorder>\n      <div className=\"View__header__box View__header__box--center\">\n        <img\n          className=\"View__header__logo\"\n          alt=\"Freighter logo\"\n          src={FreighterLogo}\n        />\n      </div>\n    </ViewInset>\n  </header>\n);\n\n// App header\ninterface ViewAppHeaderProps {\n  leftContent?: React.ReactNode;\n  rightContent?: React.ReactNode;\n  centerContent?: React.ReactNode;\n  pageTitle?: React.ReactNode;\n  pageSubtitle?: React.ReactNode;\n  hasBackButton?: boolean;\n  customBackAction?: () => void;\n  customBackIcon?: React.ReactNode;\n  children?: React.ReactNode;\n}\n\nconst ViewAppHeader: React.FC<ViewAppHeaderProps> = ({\n  leftContent,\n  rightContent,\n  centerContent,\n  pageTitle,\n  pageSubtitle,\n  hasBackButton,\n  customBackAction,\n  customBackIcon,\n  children,\n  ...props\n}: ViewAppHeaderProps) => (\n  <div className=\"View__header\" {...props}>\n    <ViewInset isInline hasVerticalBorder>\n      {/* Left */}\n      <div className=\"View__header__box View__header__box--left\">\n        {hasBackButton ? (\n          <BackButton\n            customBackAction={customBackAction}\n            customBackIcon={customBackIcon}\n          />\n        ) : null}\n\n        {leftContent ?? null}\n      </div>\n\n      {/* Center */}\n      {centerContent ? (\n        <div className=\"View__header__box View__header__box--center\">\n          {centerContent}\n        </div>\n      ) : (\n        <div>\n          <div className=\"View__header__box View__header__box--center\">\n            <Text\n              as=\"h2\"\n              size=\"md\"\n              role=\"heading\"\n              aria-level={2}\n              data-testid=\"AppHeaderPageTitle\"\n            >\n              {pageTitle}\n            </Text>\n          </div>\n          {pageSubtitle ? (\n            <div\n              className=\"View__header__subtitle\"\n              data-testid=\"AppHeaderPageSubtitle\"\n            >\n              {pageSubtitle}\n            </div>\n          ) : null}\n        </div>\n      )}\n\n      {/* Right */}\n      <div className=\"View__header__box View__header__box--right\">\n        {rightContent}\n      </div>\n    </ViewInset>\n\n    {children}\n  </div>\n);\n\n// Content\ninterface ViewContentProps {\n  children: React.ReactNode;\n  // TODO: handle other cases: \"start\", \"end\"\n  alignment?: \"center\";\n  contentFooter?: React.ReactNode;\n  hasNoTopPadding?: boolean;\n  hasNoBottomPadding?: boolean;\n}\n\nconst ViewContent: React.FC<ViewContentProps> = ({\n  children,\n  alignment,\n  contentFooter,\n  hasNoTopPadding,\n  hasNoBottomPadding,\n  ...props\n}: ViewContentProps) => {\n  const { isAppLayout } = useContext(ViewContext);\n\n  return (\n    <div className=\"View__content\" {...props}>\n      <ViewInset\n        alignment={alignment}\n        hasVerticalBorder={isAppLayout}\n        hasNoTopPadding={hasNoTopPadding}\n        hasNoBottomPadding={hasNoBottomPadding}\n        hasScrollShadow\n      >\n        {children}\n      </ViewInset>\n      {contentFooter ? (\n        <ViewInset\n          alignment={alignment}\n          hasVerticalBorder={isAppLayout}\n          additionalClassName=\"View__inset__footer\"\n        >\n          {contentFooter}\n        </ViewInset>\n      ) : null}\n    </div>\n  );\n};\n\n// Footer\ninterface ViewFooterProps {\n  children: React.ReactNode;\n  customHeight?: string;\n  customGap?: string;\n  hasExtraPaddingBottom?: boolean;\n  hasTopBorder?: boolean;\n  hasNoBottomPadding?: boolean;\n  isInline?: boolean;\n  allowWrap?: boolean;\n  style?: React.CSSProperties;\n}\n\nconst ViewFooter: React.FC<ViewFooterProps> = ({\n  children,\n  customHeight,\n  customGap,\n  hasExtraPaddingBottom,\n  hasTopBorder,\n  hasNoBottomPadding,\n  isInline,\n  allowWrap,\n  style,\n  ...props\n}: ViewFooterProps) => {\n  const customStyle = {\n    // eslint-disable-next-line\n    ...(customHeight ? { \"--View-footer-height\": customHeight } : {}),\n    ...(hasExtraPaddingBottom\n      ? // eslint-disable-next-line\n        { \"--View-footer-padding-bottom\": \"1.5rem\" }\n      : {}),\n    // eslint-disable-next-line\n    ...(customGap ? { \"--View-footer-gap\": customGap } : {}),\n  } as React.CSSProperties;\n\n  return (\n    <footer\n      className={`View__footer ${addStyleClasses([\n        allowWrap ? \"View__footer--wrap\" : \"\",\n      ])}`}\n      style={{ ...style, ...customStyle }}\n      {...props}\n    >\n      <ViewInset\n        hasVerticalBorder\n        hasTopBorder={hasTopBorder}\n        isInline={isInline}\n        hasNoBottomPadding={hasNoBottomPadding}\n      >\n        {children}\n      </ViewInset>\n    </footer>\n  );\n};\n\n// Inset\ninterface ViewInsetProps {\n  children: React.ReactNode;\n  // Using wide layout for onboarding and similar views\n  isWide?: boolean;\n  // Align items inline\n  isInline?: boolean;\n  // TODO: handle other cases: \"start\", \"end\"\n  alignment?: \"center\";\n  hasVerticalBorder?: boolean;\n  hasTopBorder?: boolean;\n  additionalClassName?: string;\n  hasScrollShadow?: boolean;\n  hasNoTopPadding?: boolean;\n  hasNoBottomPadding?: boolean;\n}\n\nexport const ViewInset: React.FC<ViewInsetProps> = ({\n  children,\n  isWide,\n  isInline,\n  alignment,\n  hasVerticalBorder,\n  hasTopBorder,\n  additionalClassName,\n  hasScrollShadow,\n  hasNoTopPadding,\n  hasNoBottomPadding,\n  ...props\n}: ViewInsetProps) => (\n  <div\n    className={`View__inset ${addStyleClasses([\n      isWide ? \"View__inset--wide\" : \"\",\n      isInline ? \"View__inset--inline\" : \"\",\n      alignment === \"center\" ? \"View__inset--align-center\" : \"\",\n      hasVerticalBorder ? \"View__inset--vertical-border\" : \"\",\n      hasTopBorder ? \"View__inset--top-border\" : \"\",\n      hasScrollShadow ? \"View__inset--scroll-shadows\" : \"\",\n      hasNoTopPadding ? \"View__inset--no-top-padding\" : \"\",\n      hasNoBottomPadding ? \"View__inset--no-bottom-padding\" : \"\",\n    ])}${additionalClassName ? ` ${additionalClassName}` : \"\"}`}\n    {...props}\n  >\n    {children}\n  </div>\n);\n\n// View\ninterface ViewComponent {\n  Header: React.FC;\n  AppHeader: React.FC<ViewAppHeaderProps>;\n  Content: React.FC<ViewContentProps>;\n  Footer: React.FC<ViewFooterProps>;\n  Inset: React.FC<ViewInsetProps>;\n}\n\ninterface ViewLayoutProps {\n  children: React.ReactNode;\n  isAppLayout?: boolean;\n}\n\nexport const View: React.FC<ViewLayoutProps> & ViewComponent = ({\n  children,\n  // Most views have \"app\" layout, so defaulting to that\n  isAppLayout = true,\n  ...props\n}: ViewLayoutProps) => (\n  <ViewContext.Provider value={{ isAppLayout }}>\n    <div className=\"View\" {...props}>\n      {children}\n    </div>\n  </ViewContext.Provider>\n);\n\nView.Header = ViewHeader;\nView.AppHeader = ViewAppHeader;\nView.Content = ViewContent;\nView.Footer = ViewFooter;\nView.Inset = ViewInset;\n","import React from \"react\";\nimport { Loader } from \"@stellar/design-system\";\nimport { View } from \"popup/basics/layout/View\";\n\nimport \"./styles.scss\";\n\nexport const Loading = () => (\n  <View.Content>\n    <div className=\"Loading\">\n      <Loader size=\"5rem\" />\n    </div>\n  </View.Content>\n);\n","import { useSelector } from \"react-redux\";\nimport * as Sentry from \"@sentry/browser\";\n\nimport { SENTRY_KEY } from \"constants/env\";\nimport { settingsDataSharingSelector } from \"popup/ducks/settings\";\nimport { scrubPathGkey } from \"popup/helpers/formatters\";\nimport { INDEXER_URL } from \"@shared/constants/mercury\";\nimport packageJson from \"../../../../package.json\";\n\nexport const ErrorTracking = () => {\n  const isDataSharingAllowed = useSelector(settingsDataSharingSelector);\n\n  if (SENTRY_KEY && isDataSharingAllowed) {\n    Sentry.init({\n      dsn: SENTRY_KEY,\n      release: `freighter@${packageJson.version}`,\n      integrations: [Sentry.browserTracingIntegration()],\n      tracesSampleRate: 1.0,\n      denyUrls: [\n        // Amplitude 4xx's on too many Posts, which is expected behavior\n        /api\\.amplitude\\.com\\/2\\/httpapi/i,\n      ],\n      beforeSend(event) {\n        if (!event.request) {\n          return event;\n        }\n\n        const url = event.request?.url;\n        if (url?.includes(`${INDEXER_URL}/account-history`)) {\n          const route = \"account-history/\";\n          const scrubbedUrl = scrubPathGkey(route, url);\n          // eslint-disable-next-line no-param-reassign\n          event.request.url = scrubbedUrl;\n        }\n\n        if (url?.includes(`${INDEXER_URL}/account-balances`)) {\n          const route = \"account-balances/\";\n          const scrubbedUrl = scrubPathGkey(route, url);\n          // eslint-disable-next-line no-param-reassign\n          event.request.url = scrubbedUrl;\n        }\n\n        return event;\n      },\n    });\n  }\n\n  if (!isDataSharingAllowed) {\n    /* \n    Note: Sentry.close does not completely disable calls to Sentry. Sentry will still report, but with a completely anonymized payload. \n    When you refresh/reopen the app after disabling tracking, it will not initialize Sentry, thus disabling *all* calls to Sentry\n    */\n\n    Sentry.close(500);\n  }\n\n  return null;\n};\n","import { captureException } from \"@sentry/browser\";\nimport { View } from \"popup/basics/layout/View\";\nimport React, { Component } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport IconFail from \"popup/assets/icon-fail.svg\";\nimport { Button } from \"@stellar/design-system\";\n\nimport \"./styles.scss\";\n\nexport class ErrorBoundary extends Component<\n  React.PropsWithChildren,\n  { hasError: boolean; errorString: string }\n> {\n  static getDerivedStateFromError() {\n    return { hasError: true };\n  }\n\n  // eslint-disable-next-line @typescript-eslint/member-ordering\n  constructor(props: React.PropsWithChildren) {\n    super(props);\n    // eslint-disable-next-line\n    this.state = { hasError: false, errorString: \"\" };\n  }\n\n  componentDidCatch(error: Error, info: { componentStack: string }) {\n    this.setState({ errorString: error.toString() });\n    captureException(info.componentStack);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <UnhandledError\n          errorMessage=\"An unexpected error has occurred\"\n          errorString={this.state.errorString}\n        />\n      );\n    }\n    return this.props.children;\n  }\n}\n\nexport const UnhandledError = ({\n  errorMessage,\n  errorString,\n}: {\n  errorMessage: string;\n  errorString: string;\n}) => {\n  const { t } = useTranslation();\n  return (\n    <div className=\"UnexpectedError\">\n      <View.AppHeader pageTitle={t(\"Error\")} />\n      <View.Content>\n        <div className=\"UnexpectedError__content\">\n          <div className=\"UnexpectedError__amount\">Unexpected Error</div>\n          <div className=\"UnexpectedError__icon UnexpectedError__fail\">\n            <img src={IconFail} alt=\"Icon Fail\" />\n          </div>\n        </div>\n        <div className=\"UnexpectedError__error-block\">{errorMessage}</div>\n        <div className=\"UnexpectedError__error-string\">{errorString}</div>\n      </View.Content>\n      <View.Footer>\n        <Button\n          isFullWidth\n          variant=\"tertiary\"\n          size=\"md\"\n          onClick={() => {\n            // https://stackoverflow.com/questions/57854/how-can-i-close-a-browser-window-without-receiving-the-do-you-want-to-close-thi\n            window.open(\"\", \"_self\", \"\");\n            window.close();\n          }}\n        >\n          {t(\"Close\")}\n        </Button>\n      </View.Footer>\n    </div>\n  );\n};\n","export const POPUP_WIDTH = 360;\nexport const POPUP_HEIGHT = 600;\n\nexport const HEADER_HEIGHT = 119;\n","import { createHashHistory } from \"history\";\n\nexport const history = createHashHistory();\n","import browser from \"webextension-polyfill\";\n\nimport { ROUTES } from \"popup/constants/routes\";\nimport { history } from \"popup/constants/history\";\n\nexport const navigateTo = (path: ROUTES, queryParams?: string) => {\n  const pathname = queryParams ? `${path}${queryParams}` : path;\n  history.push({ pathname });\n};\n\n/* Firefox will not let you use window.open to programatically open a tab. Use this instead */\nexport const openTab = (url: string) => browser.tabs.create({ url });\n","export enum ROUTES {\n  debug = \"/debug\",\n  integrationTest = \"/integration-test\",\n  welcome = \"/\",\n  account = \"/account\",\n  viewPublicKey = \"/account/view-public-key\",\n  importAccount = \"/account/import\",\n  connectWallet = \"/account/connect\",\n  connectWalletPlugin = \"/account/connect/plugin\",\n  connectDevice = \"/account/connect/device\",\n  accountHistory = \"/account-history\",\n  sendPayment = \"/account/sendPayment\",\n  sendPaymentTo = \"/account/sendPayment/to\",\n  sendPaymentAmount = \"/account/sendPayment/amount\",\n  sendPaymentType = \"/account/sendPayment/amount/type\",\n  sendPaymentSettings = \"/account/sendPayment/settings\",\n  sendPaymentSettingsFee = \"/account/sendPayment/settings/fee\",\n  sendPaymentSettingsSlippage = \"/account/sendPayment/settings/slippage\",\n  sendPaymentSettingsTimeout = \"/account/sendPayment/settings/timeout\",\n  sendPaymentConfirm = \"/account/sendPayment/confirm\",\n  swap = \"/swap\",\n  swapAmount = \"/swap/amount\",\n  swapSettings = \"/swap/settings\",\n  swapSettingsFee = \"/swap/settings/fee\",\n  swapSettingsSlippage = \"/swap/settings/slippage\",\n  swapSettingsTimeout = \"/swap/settings/timeout\",\n  swapConfirm = \"/swap/confirm\",\n  addAccount = \"/add-account\",\n  signTransaction = \"/sign-transaction\",\n  reviewAuthorization = \"/review-auth\",\n  signMessage = \"/sign-message\",\n  signAuthEntry = \"/sign-auth-entry\",\n  grantAccess = \"/grant-access\",\n  mnemonicPhrase = \"/mnemonic-phrase\",\n  mnemonicPhraseConfirm = \"/mnemonic-phrase/confirm\",\n  mnemonicPhraseConfirmed = \"/mnemonic-phrase-confirmed\",\n  unlockAccount = \"/unlock-account\",\n  verifyAccount = \"/verify-account\",\n  accountCreator = \"/account-creator\",\n  recoverAccount = \"/recover-account\",\n  recoverAccountSuccess = \"/recover-account-success\",\n  settings = \"/settings\",\n  displayBackupPhrase = \"/settings/display-backup-phrase\",\n  about = \"/settings/about\",\n  preferences = \"/settings/preferences\",\n  security = \"/settings/security\",\n  manageConnectedApps = \"/settings/manageConnectedApps\",\n  leaveFeedback = \"/settings/leave-feedback\",\n  manageAssetsLists = \"/settings/manage-assets-lists\",\n  manageAssetsListsModifyAssetList = \"/settings/manage-assets-lists/modify-asset-list\",\n  advancedSettings = \"/settings/advanced-settings\",\n\n  manageAssets = \"/manage-assets\",\n  searchAsset = \"/manage-assets/search-asset\",\n  addAsset = \"/manage-assets/add-asset\",\n  manageNetwork = \"/manage-network\",\n  addNetwork = \"/manage-network/add-network\",\n  editNetwork = \"/manage-network/edit-network\",\n  networkSettings = \"/manage-network/network-settings\",\n  accountMigration = \"/account-migration\",\n  accountMigrationReviewMigration = \"/account-migration/review-migration\",\n  accountMigrationMnemonicPhrase = \"/account-migration/mnemonic-phrase\",\n  accountMigrationConfirmMigration = \"/account-migration/confirm-migration\",\n  accountMigrationMigrationComplete = \"/account-migration/migration-complete\",\n}\n","import { createAction } from \"@reduxjs/toolkit\";\nimport { Location } from \"history\";\n\nexport const navigate = createAction(\"navigate\", (location: Location) => ({\n  payload: {\n    location,\n  },\n}));\n","import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport \"./styles.scss\";\n\nexport const AppError = ({ children }: { children: React.ReactNode }) => {\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"AppError\">\n      <div>\n        <h1>{t(\"An error occurred\")}</h1>\n        <p>{children}</p>\n      </div>\n    </div>\n  );\n};\n","import { useLocation } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\n\nimport { isTestnet } from \"helpers/stellar\";\nimport { settingsNetworkDetailsSelector } from \"popup/ducks/settings\";\n\nexport const useIsSwap = () => {\n  const location = useLocation();\n  return location.pathname\n    ? location.pathname.includes(\"swap\") ||\n        location.search.includes(\"swap=true\")\n    : false;\n};\n\nexport const useIsSoroswapEnabled = () => {\n  const networkDetails = useSelector(settingsNetworkDetailsSelector);\n\n  return isTestnet(networkDetails);\n};\n","export const fetchJson = async <T>(url: string, options?: RequestInit) => {\n  const res = await fetch(url, options);\n  if (!res.ok) {\n    throw new Error(res.statusText);\n  }\n\n  if (!res.headers.get(\"content-type\")?.includes(\"application/json\")) {\n    const content = await res.text();\n    throw new Error(`Did not receive json error:${content}`);\n  }\n\n  const data = (await res.json()) as T;\n  return data;\n};\n","import { useEffect, useState } from \"react\";\nimport * as Sentry from \"@sentry/browser\";\nimport { useSelector } from \"react-redux\";\n\nimport { INDEXER_URL } from \"@shared/constants/mercury\";\nimport { NetworkDetails } from \"@shared/constants/stellar\";\nimport { isCustomNetwork } from \"@shared/helpers/stellar\";\nimport {\n  BlockAidScanAssetResult,\n  BlockAidScanSiteResult,\n  BlockAidScanTxResult,\n  BlockAidBulkScanAssetResult,\n} from \"@shared/api/types\";\nimport { isMainnet } from \"helpers/stellar\";\nimport { emitMetric } from \"helpers/metrics\";\nimport { METRIC_NAMES } from \"popup/constants/metricsNames\";\nimport { settingsNetworkDetailsSelector } from \"popup/ducks/settings\";\nimport { fetchJson } from \"./fetch\";\n\nexport const useScanSite = () => {\n  const [data, setData] = useState({} as BlockAidScanSiteResult);\n  const [error, setError] = useState(null as string | null);\n  const [isLoading, setLoading] = useState(true);\n\n  const scanSite = async (url: string, networkDetails: NetworkDetails) => {\n    setLoading(true);\n    try {\n      if (isCustomNetwork(networkDetails)) {\n        setError(\"Scanning sites is not supported on custom networks\");\n        setLoading(false);\n        return;\n      }\n      const res = await fetch(\n        `${INDEXER_URL}/scan-dapp?url=${encodeURIComponent(url)}`,\n      );\n      const response = (await res.json()) as {\n        data: BlockAidScanSiteResult;\n        error: string | null;\n      };\n\n      if (!res.ok) {\n        setError(response.error || \"Failed to scan site\");\n      }\n      setData(response.data);\n      emitMetric(METRIC_NAMES.blockaidDomainScan, { response: response.data });\n      setLoading(false);\n    } catch (err) {\n      setError(\"Failed to scan site\");\n      Sentry.captureException(err);\n      setLoading(false);\n    }\n  };\n\n  return {\n    data,\n    error,\n    isLoading,\n    scanSite,\n  };\n};\n\nexport const useScanTx = () => {\n  const [data, setData] = useState(null as BlockAidScanTxResult | null);\n  const [error, setError] = useState(null as string | null);\n  const [isLoading, setLoading] = useState(true);\n\n  const scanTx = async (\n    xdr: string,\n    url: string,\n    networkDetails: NetworkDetails,\n  ) => {\n    setLoading(true);\n    try {\n      if (isCustomNetwork(networkDetails)) {\n        setError(\"Scanning transactions is not supported on custom networks\");\n        setLoading(false);\n        return null;\n      }\n      const response = await fetchJson<{\n        data: BlockAidScanTxResult;\n        error: string | null;\n      }>(\n        `${INDEXER_URL}/scan-tx?url=${encodeURIComponent(\n          url,\n        )}&tx_xdr=${encodeURIComponent(xdr)}&network=${networkDetails.network}`,\n      );\n\n      setData(response.data);\n      emitMetric(METRIC_NAMES.blockaidTxScan, { response: response.data });\n      setLoading(false);\n      return response.data;\n    } catch (err) {\n      setError(\"Failed to scan transaction\");\n      Sentry.captureException({\n        error: err,\n        xdr,\n        url,\n        networkDetails,\n      });\n      setLoading(false);\n    }\n    return null;\n  };\n\n  return {\n    data,\n    error,\n    isLoading,\n    setLoading,\n    scanTx,\n  };\n};\n\ninterface ScanAssetResponseSuccess {\n  data: BlockAidScanAssetResult;\n  error: null;\n}\ninterface ScanAssetResponseError {\n  data: null;\n  error: string;\n}\ntype ScanAssetResponse = ScanAssetResponseSuccess | ScanAssetResponseError;\n\ninterface ScanAssetBulkResponseSuccess {\n  data: BlockAidBulkScanAssetResult;\n  error: null;\n}\ninterface ScanAssetBulkResponseError {\n  data: null;\n  error: string;\n}\ntype ScanAssetBulkResponse =\n  | ScanAssetBulkResponseSuccess\n  | ScanAssetBulkResponseError;\n\nexport const scanAsset = async (\n  address: string,\n  networkDetails: NetworkDetails,\n) => {\n  try {\n    if (!isMainnet(networkDetails)) {\n      /* Scanning assets is only supported on Mainnet */\n      return {} as BlockAidScanAssetResult;\n    }\n    const res = await fetch(`${INDEXER_URL}/scan-asset?address=${address}`);\n    const response = (await res.json()) as ScanAssetResponse;\n\n    if (!res.ok || response.error) {\n      Sentry.captureException(response.error || \"Failed to scan asset\");\n    }\n\n    emitMetric(METRIC_NAMES.blockaidAssetScan, { response: response.data });\n    if (!response.data) {\n      return {} as BlockAidScanAssetResult;\n    }\n    return response.data;\n  } catch (err) {\n    console.error(\"Failed to scan asset\");\n    Sentry.captureException(err);\n  }\n  return {} as BlockAidScanAssetResult;\n};\n\nexport const useScanAsset = (address: string) => {\n  const networkDetails = useSelector(settingsNetworkDetailsSelector);\n  const [scannedAssetStatus, setScannedAssetStatus] = useState(\n    {} as BlockAidScanAssetResult,\n  );\n\n  useEffect(() => {\n    const fetchScanAssetStatus = async () => {\n      const scannedAsset = await scanAsset(address, networkDetails);\n      setScannedAssetStatus(scannedAsset);\n    };\n\n    if (address) {\n      fetchScanAssetStatus();\n    }\n  }, [networkDetails, address]);\n\n  return {\n    scannedAsset: scannedAssetStatus,\n  };\n};\n\nexport const isAssetSuspicious = (blockaidData?: BlockAidScanAssetResult) => {\n  if (!blockaidData || !blockaidData.result_type) {\n    return false;\n  }\n  return blockaidData.result_type !== \"Benign\";\n};\n\nexport const isTxSuspicious = (blockaidData: BlockAidScanTxResult) => {\n  const { simulation, validation } = blockaidData;\n\n  if (!blockaidData) {\n    return false;\n  }\n\n  if (simulation && \"error\" in simulation) {\n    return true;\n  }\n\n  if (\n    validation &&\n    \"result_type\" in validation &&\n    validation.result_type !== \"Benign\"\n  ) {\n    return true;\n  }\n\n  return false;\n};\n\nexport const isBlockaidWarning = (resultType: string) =>\n  resultType === \"Warning\" || resultType === \"Spam\";\n\nexport const scanAssetBulk = async (\n  addressList: string[],\n  networkDetails: NetworkDetails,\n) => {\n  try {\n    if (!isMainnet(networkDetails)) {\n      /* Scanning assets is only supported on Mainnet */\n      return {} as BlockAidBulkScanAssetResult;\n    }\n    const url = new URL(`${INDEXER_URL}/scan-asset-bulk`);\n    addressList.forEach((address) => {\n      url.searchParams.append(\"asset_ids\", address);\n    });\n    const response = await fetch(url.href);\n    const resJson = (await response.json()) as ScanAssetBulkResponse;\n\n    if (!response.ok || resJson.error) {\n      Sentry.captureException(resJson.error || \"Failed to bulk scan assets\");\n    }\n\n    emitMetric(METRIC_NAMES.blockaidAssetScan, { response: resJson });\n    if (!resJson.data) {\n      return {} as BlockAidBulkScanAssetResult;\n    }\n    return resJson.data || {};\n  } catch (err) {\n    console.error(\"Failed to bulk scan asset\");\n    Sentry.captureException(err);\n  }\n  return {} as BlockAidBulkScanAssetResult;\n};\n","import React from \"react\";\nimport IconWarning from \"popup/assets/icon-warning-asset-blockaid.svg\";\nimport \"./styles.scss\";\n\nexport const ScamAssetIcon = ({ isScamAsset }: { isScamAsset: boolean }) =>\n  isScamAsset ? (\n    <span className=\"ScamAssetIcon\" data-testid=\"ScamAssetIcon\">\n      {isScamAsset && <img src={IconWarning} alt=\"warning\" />}\n    </span>\n  ) : null;\n","var _path;\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nconst SvgImageMissing = props => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  xmlns: \"http://www.w3.org/2000/svg\",\n  width: 16,\n  height: 16,\n  fill: \"none\"\n}, props), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#fff\",\n  fillOpacity: 0.4,\n  d: \"M14.92 0 16 1.082l-1.316 1.316c.445.267.747.751.747 1.307v9.169a1.53 1.53 0 0 1-1.528 1.528H2.68L1.08 16 0 14.92l.798-.8H.8l1.245-1.246zM10.58 2.177 9.053 3.705H1.677l.002 7.374-1.53 1.53V3.704a1.53 1.53 0 0 1 1.528-1.528zm3.322 1.528h-.527L7.595 9.486l.96 1.096 1.91-1.91 2.08 2.674h-6.81l-1.528 1.528h9.696zM3.97 5.233a.764.764 0 1 1 0 1.529.764.764 0 0 1 0-1.529\"\n})));\nexport default SvgImageMissing;","var _rect, _circle, _path;\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nconst SvgIconSoroban = props => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  xmlns: \"http://www.w3.org/2000/svg\",\n  fill: \"none\",\n  viewBox: \"0 0 32 32\"\n}, props), _rect || (_rect = /*#__PURE__*/React.createElement(\"rect\", {\n  width: \"100%\",\n  height: \"100%\",\n  fill: \"#161616\",\n  rx: 50\n})), _circle || (_circle = /*#__PURE__*/React.createElement(\"circle\", {\n  cx: \"50%\",\n  cy: \"50%\",\n  r: \"48%\",\n  stroke: \"#343434\"\n})), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#707070\",\n  d: \"M17.684 8.086c-1.844-1.345-4.7-1.435-6.68-.3l-.657.376L19 14.47c.622.456 1.42.671 2.195.671s1.573-.215 2.199-.671c.373-.272.606-.668.606-1.11s-.233-.838-.606-1.11zM13.004 17.53c-.626-.456-1.424-.671-2.199-.671s-1.573.215-2.198.671c-.374.272-.607.668-.607 1.11s.233.838.607 1.111l5.709 4.163c1.844 1.345 4.7 1.435 6.68.3l.657-.376zM21.894 17.59 9.898 8.842l-.294.272c-.811.753-1.212 1.709-1.137 2.681.075.969.618 1.881 1.553 2.563l11.995 8.748.294-.273c.811-.752 1.213-1.709 1.138-2.68-.075-.969-.618-1.881-1.553-2.563\"\n})));\nexport default SvgIconSoroban;","import React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport isEmpty from \"lodash/isEmpty\";\nimport { Asset, Horizon } from \"stellar-sdk\";\n\nimport { AssetIcons, AssetType } from \"@shared/api/types\";\nimport { retryAssetIcon } from \"@shared/api/internal\";\n\nimport { getCanonicalFromAsset } from \"helpers/stellar\";\nimport { isSorobanIssuer } from \"popup/helpers/account\";\nimport { formatTokenAmount } from \"popup/helpers/soroban\";\nimport { isAssetSuspicious } from \"popup/helpers/blockaid\";\nimport { formatAmount } from \"popup/helpers/formatters\";\n\nimport StellarLogo from \"popup/assets/stellar-logo.png\";\nimport { settingsNetworkDetailsSelector } from \"popup/ducks/settings\";\nimport { transactionSubmissionSelector } from \"popup/ducks/transactionSubmission\";\nimport { ScamAssetIcon } from \"popup/components/account/ScamAssetIcon\";\nimport ImageMissingIcon from \"popup/assets/image-missing.svg?react\";\nimport IconSoroban from \"popup/assets/icon-soroban.svg?react\";\n\nimport \"./styles.scss\";\n\nconst getIsXlm = (code: string) => code === \"XLM\";\n\nexport const SorobanTokenIcon = ({ noMargin }: { noMargin?: boolean }) => (\n  <div\n    className={`AccountAssets__asset--logo AccountAssets__asset--soroban-token ${\n      noMargin ? \"AccountAssets__asset--no-margin\" : \"\"\n    }`}\n  >\n    <IconSoroban />\n  </div>\n);\n\nexport const AssetIcon = ({\n  assetIcons,\n  code,\n  issuerKey,\n  retryAssetIconFetch,\n  isLPShare = false,\n  isSorobanToken = false,\n  icon,\n  isSuspicious = false,\n  isModal = false,\n}: {\n  assetIcons: AssetIcons;\n  code: string;\n  issuerKey: string;\n  retryAssetIconFetch?: (arg: { key: string; code: string }) => void;\n  isLPShare?: boolean;\n  isSorobanToken?: boolean;\n  icon?: string;\n  isSuspicious?: boolean;\n  isModal?: boolean;\n}) => {\n  /*\n    We load asset icons in 2 ways:\n    Method 1. We get an asset's issuer and use that to look up toml info to get the icon path\n    Method 2. We get an icon path directly from an API (like in the trustline flow) and just pass it to this component to render\n  */\n\n  const isXlm = getIsXlm(code);\n\n  // in Method 1, while we wait for the icon path to load, `assetIcons` will be empty until the promise resolves\n  // This does not apply for XLM as there is no lookup as that logo lives in this codebase\n  const isFetchingAssetIcons = isEmpty(assetIcons) && !isXlm;\n\n  const [hasError, setHasError] = useState(false);\n\n  // For all non-XLM assets (assets where we need to fetch the icon from elsewhere), start by showing a loading state as there is work to do\n  const [isLoading, setIsLoading] = useState(!isXlm);\n\n  const { soroswapTokens } = useSelector(transactionSubmissionSelector);\n\n  const canonicalAsset = assetIcons[getCanonicalFromAsset(code, issuerKey)];\n  let imgSrc = hasError ? ImageMissingIcon : canonicalAsset || \"\";\n  if (icon) {\n    imgSrc = icon;\n  }\n\n  const _isSorobanToken = !isSorobanToken\n    ? issuerKey && isSorobanIssuer(issuerKey)\n    : isSorobanToken;\n\n  // If an LP share return early w/ hardcoded icon\n  if (isLPShare) {\n    return (\n      <div className=\"AccountAssets__asset--logo AccountAssets__asset--lp-share\">\n        LP\n      </div>\n    );\n  }\n\n  // Get icons for Soroban tokens\n  if (_isSorobanToken && !icon) {\n    const soroswapTokenDetail = soroswapTokens.find(\n      (token) => token.contract === issuerKey,\n    );\n    // check to see if we have an icon from an external service, like Soroswap\n    if (soroswapTokenDetail?.icon) {\n      imgSrc = soroswapTokenDetail?.icon;\n    } else {\n      return <SorobanTokenIcon />;\n    }\n  }\n\n  // If we're waiting on the icon lookup (Method 1), just return the loader until this re-renders with `assetIcons`. We can't do anything until we have it.\n  if (isFetchingAssetIcons) {\n    return (\n      <div\n        data-testid=\"AccountAssets__asset--loading\"\n        className=\"AccountAssets__asset--logo AccountAssets__asset--loading\"\n      >\n        <ScamAssetIcon isScamAsset={isSuspicious} />\n      </div>\n    );\n  }\n\n  // if we have an asset path, start loading the path in an `<img>`\n  return canonicalAsset || isXlm || imgSrc ? (\n    <div\n      data-testid={`AccountAssets__asset--loading-${code}`}\n      className={`AccountAssets__asset--logo ${\n        hasError ? \"AccountAssets__asset--error\" : \"\"\n      } ${isLoading ? \"AccountAssets__asset--loading\" : \"\"} ${\n        isModal ? \"AccountAssets__asset--modal\" : \"\"\n      }`}\n    >\n      <img\n        alt={`${code} logo`}\n        src={isXlm ? StellarLogo : imgSrc}\n        onError={() => {\n          if (retryAssetIconFetch) {\n            retryAssetIconFetch({ key: issuerKey, code });\n          }\n          // we tried to load an image path but it failed, so show the broken image icon here\n          setHasError(true);\n        }}\n        onLoad={() => {\n          // we've sucessfully loaded an icon, end the \"loading\" state\n          setIsLoading(false);\n        }}\n      />\n      <ScamAssetIcon isScamAsset={isSuspicious} />\n    </div>\n  ) : (\n    // the image path wasn't found, show a default broken image icon\n    <div\n      className={`AccountAssets__asset--logo AccountAssets__asset--error ${\n        isModal ? \"AccountAssets__asset--modal\" : \"\"\n      }`}\n    >\n      <ImageMissingIcon />\n      <ScamAssetIcon isScamAsset={isSuspicious} />\n    </div>\n  );\n};\n\ninterface AccountAssetsProps {\n  assetIcons: AssetIcons;\n  sortedBalances: AssetType[];\n  setSelectedAsset?: (selectedAsset: string) => void;\n}\n\nexport const AccountAssets = ({\n  assetIcons: inputAssetIcons,\n  sortedBalances,\n  setSelectedAsset,\n}: AccountAssetsProps) => {\n  const [assetIcons, setAssetIcons] = useState(inputAssetIcons);\n  const networkDetails = useSelector(settingsNetworkDetailsSelector);\n  const [hasIconFetchRetried, setHasIconFetchRetried] = useState(false);\n\n  useEffect(() => {\n    setAssetIcons(inputAssetIcons);\n  }, [inputAssetIcons]);\n\n  const retryAssetIconFetch = async ({\n    key,\n    code,\n  }: {\n    key: string;\n    code: string;\n  }) => {\n    /* if we retried the toml and their link is still bad, just give up here */\n    if (hasIconFetchRetried) {\n      return;\n    }\n    try {\n      const res = await retryAssetIcon({\n        key,\n        code,\n        assetIcons,\n        networkDetails,\n      });\n      setAssetIcons(res);\n      setHasIconFetchRetried(true);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  const handleClick = (code: string) => {\n    if (setSelectedAsset) {\n      setSelectedAsset(getIsXlm(code) ? \"native\" : code);\n    }\n  };\n\n  const getLPShareCode = (reserves: Horizon.HorizonApi.Reserve[]) => {\n    if (!reserves[0] || !reserves[1]) {\n      return \"\";\n    }\n\n    let assetA = reserves[0].asset.split(\":\")[0];\n    let assetB = reserves[1].asset.split(\":\")[0];\n\n    if (assetA === Asset.native().toString()) {\n      assetA = Asset.native().code;\n    }\n    if (assetB === Asset.native().toString()) {\n      assetB = Asset.native().code;\n    }\n\n    return `${assetA} / ${assetB} `;\n  };\n\n  return (\n    <>\n      {sortedBalances.map((rb) => {\n        let isLP = false;\n        let issuer = {\n          key: \"\",\n        };\n        let code = \"\";\n        let amountUnit;\n        if (rb.liquidityPoolId) {\n          isLP = true;\n          code = getLPShareCode(rb.reserves as Horizon.HorizonApi.Reserve[]);\n          amountUnit = \"shares\";\n        } else if (rb.contractId && \"symbol\" in rb) {\n          issuer = {\n            key: rb.contractId,\n          };\n          code = rb.symbol;\n          amountUnit = rb.symbol;\n        } else {\n          if (\"issuer\" in rb.token && rb.token) {\n            issuer = rb.token.issuer;\n          }\n          code = rb.token.code;\n          amountUnit = rb.token.code;\n        }\n\n        const canonicalAsset = getCanonicalFromAsset(code, issuer?.key);\n\n        const isSuspicious = isAssetSuspicious(rb.blockaidData);\n\n        const amountVal =\n          rb.contractId && \"decimals\" in rb\n            ? formatTokenAmount(rb.total, rb.decimals)\n            : rb.total.toFixed();\n\n        return (\n          <div\n            data-testid=\"account-assets-item\"\n            className={`AccountAssets__asset ${\n              setSelectedAsset && !isLP\n                ? \"AccountAssets__asset--has-detail\"\n                : \"\"\n            }`}\n            key={canonicalAsset}\n            onClick={isLP ? () => null : () => handleClick(canonicalAsset)}\n          >\n            <div className=\"AccountAssets__copy-left\">\n              <AssetIcon\n                assetIcons={assetIcons}\n                code={code}\n                issuerKey={issuer?.key}\n                retryAssetIconFetch={retryAssetIconFetch}\n                isLPShare={!!rb.liquidityPoolId}\n                isSuspicious={isSuspicious}\n              />\n              <span className=\"asset-code\">{code}</span>\n            </div>\n            <div className=\"AccountAssets__copy-right\">\n              <div className=\"asset-amount\" data-testid=\"asset-amount\">\n                {formatAmount(amountVal)} <span>{amountUnit}</span>\n              </div>\n            </div>\n          </div>\n        );\n      })}\n    </>\n  );\n};\n","import React from \"react\";\n\nimport \"./styles.scss\";\n\ninterface LoadingBackgroundProps {\n  onClick?: () => void;\n  isActive: boolean;\n  isOpaque?: boolean;\n  isClear?: boolean;\n  isFullScreen?: boolean;\n}\n\nexport const LoadingBackground = ({\n  isActive,\n  isOpaque,\n  isClear,\n  isFullScreen,\n  onClick,\n}: LoadingBackgroundProps) => (\n  <div\n    onClick={onClick}\n    className={`LoadingBackground ${\n      isActive ? \"LoadingBackground--active\" : \"\"\n    } ${isOpaque ? \"LoadingBackground--isOpaque\" : \"\"} ${\n      isClear ? \"LoadingBackground--isClear\" : \"\"\n    } ${isFullScreen ? \"LoadingBackground--isFullScreen\" : \"\"}`}\n  />\n);\n","import React from \"react\";\nimport createStellarIdenticon from \"stellar-identicon-js\";\n\nimport \"./styles.scss\";\n\ninterface IdenticonImgProps {\n  publicKey: string;\n}\n\nexport const IdenticonImg = ({ publicKey }: IdenticonImgProps) => (\n  <img\n    className=\"IdenticonImg\"\n    alt=\"account identicon\"\n    src={createStellarIdenticon(publicKey).toDataURL()}\n  />\n);\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport { truncatedPublicKey } from \"helpers/stellar\";\nimport { makeAccountActive } from \"popup/ducks/accountServices\";\nimport { resetAccountBalanceStatus } from \"popup/ducks/transactionSubmission\";\n\nimport { IdenticonImg } from \"../IdenticonImg\";\n\nimport \"./styles.scss\";\n\ninterface KeyIdenticonProps {\n  children?: React.ReactNode;\n  accountName: string;\n  active?: boolean;\n  publicKey: string;\n  displayKey?: boolean;\n  setIsDropdownOpen?: (IsDropdownOpen: boolean) => void;\n  setLoading?: (isLoading: boolean) => void;\n}\n\nexport const AccountListIdenticon = ({\n  children,\n  accountName = \"\",\n  active = false,\n  publicKey = \"\",\n  displayKey = false,\n  setIsDropdownOpen,\n  setLoading,\n}: KeyIdenticonProps) => {\n  const dispatch = useDispatch();\n  const shortPublicKey = truncatedPublicKey(publicKey);\n\n  const handleMakeAccountActive = () => {\n    // If this account is already active (selected) we don't need to load any\n    // more stuff, so let's just collapse the dropdown in this case\n    if (!active && setLoading) {\n      setLoading(true);\n    }\n\n    if (setIsDropdownOpen) {\n      setIsDropdownOpen(false);\n    }\n\n    if (!active) {\n      dispatch(makeAccountActive(publicKey));\n      dispatch(resetAccountBalanceStatus());\n    }\n  };\n\n  return (\n    <div className=\"AccountListIdenticon\">\n      <div className=\"AccountListIdenticon__active-wrapper\">\n        <div className=\"AccountListIdenticon__identicon-wrapper\">\n          <IdenticonImg publicKey={publicKey} />\n        </div>\n      </div>\n      <button\n        data-testid=\"account-list-identicon-button\"\n        className=\"AccountListIdenticon__identicon-button\"\n        onClick={handleMakeAccountActive}\n      >\n        {displayKey && (\n          <>\n            <div className=\"AccountListIdenticon__account-name\">\n              {accountName}\n            </div>\n            <div className=\"AccountListIdenticon__account-num\">\n              {shortPublicKey} {children}\n            </div>{\" \"}\n          </>\n        )}\n      </button>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Icon } from \"@stellar/design-system\";\nimport { Account } from \"@shared/api/types\";\n\nimport { AccountListIdenticon } from \"popup/components/identicons/AccountListIdenticon\";\nimport { WalletType } from \"@shared/constants/hardwareWallet\";\n\nimport \"./styles.scss\";\n\nexport const OptionTag = ({\n  hardwareWalletType = WalletType.NONE,\n  imported,\n}: {\n  hardwareWalletType?: WalletType;\n  imported: boolean;\n}) => {\n  if (!hardwareWalletType && !imported) {\n    return null;\n  }\n  return (\n    <span className=\"AccountList__option-tag\">\n      &bull; {hardwareWalletType || \"Imported\"}\n    </span>\n  );\n};\n\ninterface AccountListItemProps {\n  accountName: string;\n  isSelected: boolean;\n  accountPublicKey: string;\n  setIsDropdownOpen: (isDropdownOpen: boolean) => void;\n  imported: boolean;\n  hardwareWalletType?: WalletType;\n  setLoading?: (isLoading: boolean) => void;\n}\n\nexport const AccountListItem = ({\n  accountName,\n  isSelected,\n  accountPublicKey,\n  setIsDropdownOpen,\n  imported,\n  hardwareWalletType = WalletType.NONE,\n  setLoading,\n}: AccountListItemProps) => (\n  <li\n    className=\"AccountList__item\"\n    key={`account-${accountName}`}\n    data-testid=\"account-list-item\"\n  >\n    <AccountListIdenticon\n      displayKey\n      accountName={accountName}\n      active={isSelected}\n      publicKey={accountPublicKey}\n      setIsDropdownOpen={setIsDropdownOpen}\n      setLoading={setLoading}\n    >\n      <OptionTag imported={imported} hardwareWalletType={hardwareWalletType} />\n    </AccountListIdenticon>\n    <span className=\"AccountList__option-check\">\n      {isSelected ? <Icon.Check /> : null}\n    </span>\n  </li>\n);\n\ninterface AccounsListProps {\n  allAccounts: Account[];\n  publicKey: string;\n  setIsDropdownOpen: (isDropdownOpen: boolean) => void;\n  setLoading?: (isLoading: boolean) => void;\n}\n\nexport const AccountList = ({\n  allAccounts,\n  publicKey,\n  setIsDropdownOpen,\n  setLoading,\n}: AccounsListProps) => (\n  <div className=\"AccountList__accountsWrapper View__inset--scroll-shadows\">\n    {allAccounts.map(\n      ({\n        publicKey: accountPublicKey,\n        name: accountName,\n        imported,\n        hardwareWalletType,\n      }) => {\n        const isSelected = publicKey === accountPublicKey;\n\n        return (\n          <AccountListItem\n            accountName={accountName}\n            isSelected={isSelected}\n            accountPublicKey={accountPublicKey}\n            setIsDropdownOpen={setIsDropdownOpen}\n            imported={imported}\n            hardwareWalletType={hardwareWalletType}\n            key={`${accountPublicKey}-${accountName}`}\n            setLoading={setLoading}\n          />\n        );\n      },\n    )}\n  </div>\n);\n","import React, { useEffect, useRef } from \"react\";\n\nimport \"./styles.scss\";\n\ninterface AccountHeaderModalProps {\n  children: React.ReactElement;\n  isDropdownOpen: boolean;\n}\n\nexport const AccountHeaderModal = ({\n  children,\n  isDropdownOpen,\n}: AccountHeaderModalProps) => {\n  const dropdownRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (dropdownRef.current != null) {\n      dropdownRef.current.style.maxHeight = isDropdownOpen\n        ? `calc(100vh - 1rem)`\n        : \"0\";\n    }\n  }, [isDropdownOpen]);\n\n  return (\n    <div ref={dropdownRef} className=\"AccountHeaderModal\">\n      <div className=\"AccountHeaderModal__content\">{children}</div>\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport \"./styles.scss\";\n\n/*\n  Custom network icon colors are determined by where they fall in the list. We cycle through 4 colors and repeat if we get to the end. \n*/\n\nconst DEFAULT_NETWORK_COLORS = [\"mainnet\", \"testnet\"];\n\nconst CUSTOM_NETWORK_COLORS = [\"custom1\", \"custom2\", \"custom3\", \"custom4\"];\n\nconst getNetworkColor = (index: number | null): any => {\n  if (index === null) {\n    return \"\";\n  }\n\n  // The first 2 networks in the list should always be the DEFAULT_NETWORKs\n  if (index < DEFAULT_NETWORK_COLORS.length) {\n    return DEFAULT_NETWORK_COLORS[index];\n  }\n\n  // If these networks fall in our first pass through the custom colors, use the network index to find what color to use\n  if (index < CUSTOM_NETWORK_COLORS.length + DEFAULT_NETWORK_COLORS.length) {\n    return CUSTOM_NETWORK_COLORS[index - DEFAULT_NETWORK_COLORS.length];\n  }\n\n  // We've already cycled through the custom network colors once. Start over from the beginning\n  if (index > CUSTOM_NETWORK_COLORS.length) {\n    return getNetworkColor(index - CUSTOM_NETWORK_COLORS.length);\n  }\n\n  return CUSTOM_NETWORK_COLORS[index];\n};\n\ninterface NetworkIconProps {\n  index: number | null; // a network's index within the NetworksList array signifies the color\n}\n\nexport const NetworkIcon = ({ index }: NetworkIconProps) => (\n  <div className={`NetworkIcon NetworkIcon--${getNetworkColor(index)}`} />\n);\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\n\nimport { Account } from \"@shared/api/types\";\nimport { Icon } from \"@stellar/design-system\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { ROUTES } from \"popup/constants/routes\";\nimport { LoadingBackground } from \"popup/basics/LoadingBackground\";\nimport { View } from \"popup/basics/layout/View\";\nimport { isActiveNetwork } from \"helpers/stellar\";\nimport { AccountListIdenticon } from \"popup/components/identicons/AccountListIdenticon\";\nimport {\n  changeNetwork,\n  settingsNetworkDetailsSelector,\n  settingsNetworksListSelector,\n} from \"popup/ducks/settings\";\nimport { AccountList } from \"popup/components/account/AccountList\";\nimport { AccountHeaderModal } from \"popup/components/account/AccountHeaderModal\";\nimport { NetworkIcon } from \"popup/components/manageNetwork/NetworkIcon\";\n\nimport \"./styles.scss\";\n\ninterface AccountHeaderProps {\n  allAccounts: Account[];\n  currentAccountName: string;\n  publicKey: string;\n  setLoading: (isLoading: boolean) => void;\n}\n\nexport const AccountHeader = ({\n  allAccounts,\n  currentAccountName,\n  publicKey,\n  setLoading,\n}: AccountHeaderProps) => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const networkDetails = useSelector(settingsNetworkDetailsSelector);\n  const networksList = useSelector(settingsNetworksListSelector);\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n  const [isNetworkSelectorOpen, setIsNetworkSelectorOpen] = useState(false);\n\n  const networksModalHeight = useRef(0);\n  const activeNetworkIndex = useRef<number | null>(null);\n\n  const calculateModalHeight = (listLength: number) => (listLength + 2) * 6;\n\n  useEffect(() => {\n    networksModalHeight.current = calculateModalHeight(networksList.length);\n  }, [networksList]);\n\n  const index = networksList.findIndex((n) =>\n    isActiveNetwork(n, networkDetails),\n  );\n\n  activeNetworkIndex.current = index;\n\n  return (\n    <View.AppHeader\n      data-testid=\"account-header\"\n      leftContent={\n        <div\n          className=\"AccountHeader__icon-btn\"\n          data-testid=\"AccountHeader__icon-btn\"\n          onClick={() => setIsDropdownOpen(!isDropdownOpen)}\n        >\n          <AccountListIdenticon\n            active\n            accountName={currentAccountName}\n            publicKey={publicKey}\n          />\n        </div>\n      }\n      rightContent={\n        <div\n          className=\"AccountHeader__network-wrapper\"\n          data-testid=\"network-selector-open\"\n          onClick={() => setIsNetworkSelectorOpen(!isNetworkSelectorOpen)}\n        >\n          <NetworkIcon index={activeNetworkIndex.current} />\n          <div className=\"AccountHeader__network-copy\">\n            {networkDetails.networkName}\n          </div>\n        </div>\n      }\n    >\n      <AccountHeaderModal isDropdownOpen={isDropdownOpen}>\n        <ul className=\"AccountHeader__account-dropdown\">\n          <AccountList\n            allAccounts={allAccounts}\n            publicKey={publicKey}\n            setIsDropdownOpen={setIsDropdownOpen}\n            setLoading={setLoading}\n          />\n          <div className=\"AccountList__footer\">\n            <hr className=\"AccountHeader__list-divider\" />\n            <li className=\"AccountHeader__account-list-item\">\n              <Link\n                className=\"AccountHeader__account-list-item__link\"\n                to={{\n                  pathname: ROUTES.addAccount,\n                  state: {\n                    header: t(\"Create a new Stellar address\"),\n                    cta: t(\"Add address\"),\n                  },\n                }}\n              >\n                <div className=\"AccountHeader__account-list-item__row\">\n                  <div className=\"AccountHeader__account-list-item__icon\">\n                    <Icon.PlusCircle />\n                  </div>\n                  <span className=\"AccountHeader__account-list-item__link-copy\">\n                    {t(\"Create a new Stellar address\")}\n                  </span>\n                </div>\n                <span className=\"AccountHeader__account-list-item__arrow\">\n                  <Icon.ChevronRight />\n                </span>\n              </Link>\n            </li>\n            <li className=\"AccountHeader__account-list-item\">\n              <Link\n                className=\"AccountHeader__account-list-item__link\"\n                to={ROUTES.importAccount}\n              >\n                <div className=\"AccountHeader__account-list-item__row\">\n                  <div className=\"AccountHeader__account-list-item__icon\">\n                    <Icon.Key01 />\n                  </div>\n                  <span className=\"AccountHeader__account-list-item__link-copy\">\n                    {t(\"Import a Stellar secret key\")}\n                  </span>\n                </div>\n                <span className=\"AccountHeader__account-list-item__arrow\">\n                  <Icon.ChevronRight />\n                </span>\n              </Link>\n            </li>\n            <li className=\"AccountHeader__account-list-item\">\n              <Link\n                className=\"AccountHeader__account-list-item__link\"\n                to={ROUTES.connectWallet}\n              >\n                <div className=\"AccountHeader__account-list-item__row\">\n                  <div className=\"AccountHeader__account-list-item__icon\">\n                    <Icon.ShieldPlus />\n                  </div>\n                  <span className=\"AccountHeader__account-list-item__link-copy\">\n                    Connect a hardware wallet\n                  </span>\n                </div>\n                <span className=\"AccountHeader__account-list-item__arrow\">\n                  <Icon.ChevronRight />\n                </span>\n              </Link>\n            </li>\n          </div>\n        </ul>\n      </AccountHeaderModal>\n      <AccountHeaderModal isDropdownOpen={isNetworkSelectorOpen}>\n        <>\n          <div className=\"AccountHeader__network-selector\">\n            {networksList.map((n, i) => (\n              <div\n                className=\"AccountHeader__network-selector__row\"\n                key={n.networkName}\n                onClick={() =>\n                  dispatch(changeNetwork({ networkName: n.networkName }))\n                }\n              >\n                <NetworkIcon index={i} />\n                <div className=\"AccountHeader__network-copy\">\n                  {n.networkName}\n                </div>\n                {isActiveNetwork(n, networkDetails) ? (\n                  <div className=\"AccountHeader__network-selector__check\">\n                    <Icon.Check />\n                  </div>\n                ) : null}\n              </div>\n            ))}\n          </div>\n\n          <hr className=\"AccountHeader__list-divider\" />\n          <div className=\"AccountHeader__account-list-item\">\n            <Link\n              className=\"AccountHeader__account-list-item__link\"\n              to={ROUTES.addNetwork}\n            >\n              <div className=\"AccountHeader__account-list-item__row\">\n                <div className=\"AccountHeader__account-list-item__icon\">\n                  <Icon.BookmarkAdd />\n                </div>\n                <span className=\"AccountHeader__account-list-item__link-copy\">\n                  {t(\"Add custom network\")}\n                </span>\n              </div>\n              <span className=\"AccountHeader__account-list-item__arrow\">\n                <Icon.ChevronRight />\n              </span>\n            </Link>\n          </div>\n          <div className=\"AccountHeader__account-list-item\">\n            <Link\n              className=\"AccountHeader__account-list-item__link\"\n              to={ROUTES.networkSettings}\n            >\n              <div className=\"AccountHeader__account-list-item__row\">\n                <div className=\"AccountHeader__account-list-item__icon\">\n                  <Icon.Settings01 />\n                </div>\n                <span className=\"AccountHeader__account-list-item__link-copy\">\n                  {t(\"Manage network settings\")}\n                </span>\n              </div>\n              <span className=\"AccountHeader__account-list-item__arrow\">\n                <Icon.ChevronRight />\n              </span>\n            </Link>\n          </div>\n        </>\n      </AccountHeaderModal>\n      <LoadingBackground\n        onClick={() => {\n          setIsDropdownOpen(false);\n          setIsNetworkSelectorOpen(false);\n        }}\n        isActive={isDropdownOpen || isNetworkSelectorOpen}\n      />\n    </View.AppHeader>\n  );\n};\n","import React, { useState } from \"react\";\nimport { createPortal } from \"react-dom\";\nimport { useDispatch } from \"react-redux\";\n\nimport { NavButton, Icon } from \"@stellar/design-system\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { navigateTo, openTab } from \"popup/helpers/navigate\";\nimport { ROUTES } from \"popup/constants/routes\";\nimport { newTabHref } from \"helpers/urls\";\nimport {\n  saveAssetSelectType,\n  AssetSelectType,\n} from \"popup/ducks/transactionSubmission\";\n\nimport { LoadingBackground } from \"popup/basics/LoadingBackground\";\n\nimport \"./styles.scss\";\n\ninterface DropdownModalProps {\n  isFunded: boolean;\n}\n\nconst DropdownModal = ({ isFunded }: DropdownModalProps) => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"AccountOptionsDropdown__modal\">\n      <div\n        className=\"AccountOptionsDropdown__modal__item\"\n        onClick={() => navigateTo(ROUTES.viewPublicKey)}\n      >\n        <div className=\"AccountOptionsDropdown__modal__item__title\">\n          {t(\"Account details\")}\n        </div>\n        <div className=\"AccountOptionsDropdown__modal__item__icon\">\n          <Icon.QrCode01 />\n        </div>\n      </div>\n      <div\n        className=\"AccountOptionsDropdown__modal__item\"\n        onClick={() => navigateTo(ROUTES.manageConnectedApps)}\n      >\n        <div className=\"AccountOptionsDropdown__modal__item__title\">\n          {t(\"Connected apps\")}\n        </div>\n        <div className=\"AccountOptionsDropdown__modal__item__icon\">\n          <Icon.Coins03 />\n        </div>\n      </div>\n      {isFunded && (\n        <div\n          className=\"AccountOptionsDropdown__modal__item\"\n          onClick={() => {\n            dispatch(saveAssetSelectType(AssetSelectType.MANAGE));\n            navigateTo(ROUTES.manageAssets);\n          }}\n        >\n          <div className=\"AccountOptionsDropdown__modal__item__title\">\n            {t(\"Manage assets\")}\n          </div>\n          <div className=\"AccountOptionsDropdown__modal__item__icon\">\n            <Icon.Link01 />\n          </div>\n        </div>\n      )}\n\n      <div\n        className=\"AccountOptionsDropdown__modal__item\"\n        onClick={() => openTab(newTabHref(ROUTES.account))}\n      >\n        <div className=\"AccountOptionsDropdown__modal__item__title\">\n          {t(\"Expand view\")}\n        </div>\n        <div className=\"AccountOptionsDropdown__modal__item__icon\">\n          <Icon.Expand04 />\n        </div>\n      </div>\n    </div>\n  );\n};\n\ninterface AccountOptionsDropdownProps {\n  isFunded: boolean;\n}\n\nexport const AccountOptionsDropdown = ({\n  isFunded,\n}: AccountOptionsDropdownProps) => {\n  const { t } = useTranslation();\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n\n  return (\n    <>\n      <NavButton\n        showBorder\n        title={t(\"View options\")}\n        id=\"nav-btn-qr\"\n        icon={<Icon.DotsHorizontal />}\n        onClick={() => setIsDropdownOpen(!isDropdownOpen)}\n      />\n      {isDropdownOpen && <DropdownModal isFunded={isFunded} />}\n      {isDropdownOpen\n        ? createPortal(\n            <LoadingBackground\n              onClick={() => {\n                setIsDropdownOpen(false);\n              }}\n              isClear\n              isActive={isDropdownOpen}\n            />,\n            document.querySelector(\"#modal-root\")!,\n          )\n        : null}\n    </>\n  );\n};\n","import { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport { stellarSdkServer } from \"@shared/api/helpers/stellarSdkServer\";\nimport { settingsNetworkDetailsSelector } from \"popup/ducks/settings\";\nimport { isSorobanIssuer } from \"./account\";\n\ninterface UseAssetDomain {\n  assetIssuer?: string;\n  error?: string;\n}\n\nexport const useAssetDomain = ({ assetIssuer = \"\" }: UseAssetDomain) => {\n  const networkDetails = useSelector(settingsNetworkDetailsSelector);\n  const [networkDomain, setNetworkDomain] = useState(\"\");\n  const [error, setError] = useState(\"\");\n\n  useEffect(() => {\n    const fetchAssetDomain = async () => {\n      const { networkUrl, networkPassphrase } = networkDetails;\n      const server = stellarSdkServer(networkUrl, networkPassphrase);\n\n      let assetDomain = \"\";\n\n      try {\n        const account = await server.loadAccount(assetIssuer);\n        assetDomain = account.home_domain || \"\";\n      } catch (e) {\n        console.error(e);\n        setError(e as string);\n      }\n      setNetworkDomain(assetDomain || \" \");\n    };\n\n    if (assetIssuer && !isSorobanIssuer(assetIssuer)) {\n      fetchAssetDomain();\n    }\n  }, [assetIssuer, networkDetails]);\n\n  return {\n    assetDomain: networkDomain,\n    error,\n  };\n};\n","export enum OPERATION_TYPES {\n  accountMerge = \"Account Merge\",\n  allowTrust = \"Allow Trust\",\n  beginSponsoringFutureReserves = \"Begin Sponsoring Future Reserves\",\n  bumpSequence = \"Bump Sequence\",\n  changeTrust = \"Change Trust\",\n  claimClaimableBalance = \"Claim Claimable Balance\",\n  clawback = \"Clawback\",\n  clawbackClaimableBalance = \"Clawback Claimable Balance\",\n  createAccount = \"Create Account\",\n  createClaimableBalance = \"Create Claimable Balance\",\n  createPassiveSellOffer = \"Create Passive Sell Offer\",\n  endSponsoringFutureReserves = \"End Sponsoring Future Reserves\",\n  extendFootprintTtl = \"Extend Footprint TTL\",\n  inflation = \"Inflation\",\n  invokeHostFunction = \"Invoke Host Function\",\n  liquidityPoolDeposit = \"Liquidity Pool Deposit\",\n  liquidityPoolWithdraw = \"Liquidity Pool Withdraw\",\n  manageBuyOffer = \"Manage Buy Offer\",\n  manageData = \"Manage Data\",\n  manageSellOffer = \"Manage Sell Offer\",\n  pathPaymentStrictReceive = \"Path Payment Strict Receive\",\n  pathPaymentStrictSend = \"Path Payment Strict Send\",\n  payment = \"Payment\",\n  revokeAccountSponsorship = \"Revoke Account Sponsorship\",\n  revokeClaimableBalanceSponsorship = \"Revoke Claimable Balance Sponsorship\",\n  revokeDataSponsorship = \"Revoke Data Sponsorship\",\n  revokeOfferSponsorship = \"Revoke Offer Sponsorship\",\n  revokeSignerSponsorship = \"Revoke Signer Sponsorship\",\n  revokeSponsorship = \"Revoke Sponsorship\",\n  revokeTrustlineSponsorship = \"Revoke Trustline Sponsorship\",\n  setOptions = \"Set Options\",\n  setTrustLineFlags = \"Set Trustline Flags\",\n  bumpFootprintExpiration = \"Bump Footprint Expiration\",\n  restoreFootprint = \"Restore Footprint\",\n}\n\nexport enum TRANSACTION_WARNING {\n  memoRequired = \"memo-required\",\n}\n\nexport enum CLAIM_PREDICATES {\n  claimPredicateUnconditional = \"Unconditional\",\n  claimPredicateConditional = \"Conditional\",\n  claimPredicateAnd = \"And\",\n  claimPredicateOr = \"Or\",\n  claimPredicateNot = \"Not\",\n  claimPredicateBeforeRelativeTime = \"Before Relative Time\",\n  claimPredicateBeforeAbsoluteTime = \"Before Absolute Time\",\n}\n\nexport enum FLAG_TYPES {\n  authorized = \"Authorized\",\n  authorizedToMaintainLiabilities = \"Authorized To Maintain Liabilities\",\n  clawbackEnabled = \"Clawback Enabled\",\n}\n","/* eslint-disable @typescript-eslint/no-unsafe-argument */\n// In order to allow that rule we need to refactor this to use the correct Horizon types and narrow operation types\n\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { captureException } from \"@sentry/browser\";\nimport camelCase from \"lodash/camelCase\";\nimport { Icon, Loader } from \"@stellar/design-system\";\nimport { BigNumber } from \"bignumber.js\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { OPERATION_TYPES } from \"constants/transaction\";\nimport { SorobanTokenInterface } from \"@shared/constants/soroban/token\";\nimport { METRIC_NAMES } from \"popup/constants/metricsNames\";\n\nimport { emitMetric } from \"helpers/metrics\";\nimport {\n  formatTokenAmount,\n  getAttrsFromSorobanHorizonOp,\n} from \"popup/helpers/soroban\";\nimport { formatAmount } from \"popup/helpers/formatters\";\nimport { getBalanceByKey } from \"popup/helpers/balance\";\n\nimport {\n  AccountBalancesInterface,\n  Balances,\n  HorizonOperation,\n  TokenBalance,\n} from \"@shared/api/types\";\nimport { NetworkDetails } from \"@shared/constants/stellar\";\nimport { getTokenDetails } from \"@shared/api/internal\";\n\nimport { TransactionDetailProps } from \"../TransactionDetail\";\nimport \"./styles.scss\";\n\nfunction capitalize(str: string) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nexport const historyItemDetailViewProps: TransactionDetailProps = {\n  operation: {} as HorizonOperation,\n  headerTitle: \"\",\n  isCreateExternalAccount: false,\n  isPayment: false,\n  isRecipient: false,\n  isSwap: false,\n  operationText: \"\",\n  externalUrl: \"\",\n  setIsDetailViewShowing: () => null,\n};\n\nexport type HistoryItemOperation = HorizonOperation & {\n  isCreateExternalAccount: boolean;\n  isPayment: boolean;\n  isSwap: boolean;\n};\n\ninterface HistoryItemProps {\n  accountBalances: AccountBalancesInterface;\n  operation: HistoryItemOperation;\n  publicKey: string;\n  url: string;\n  networkDetails: NetworkDetails;\n  setDetailViewProps: (props: TransactionDetailProps) => void;\n  setIsDetailViewShowing: (isDetailViewShowing: boolean) => void;\n}\n\nexport const HistoryItem = ({\n  accountBalances,\n  operation,\n  publicKey,\n  url,\n  networkDetails,\n  setDetailViewProps,\n  setIsDetailViewShowing,\n}: HistoryItemProps) => {\n  const { t } = useTranslation();\n  // Why does Horizon type not include transaction_attr?\n  const _op = operation as any;\n  const {\n    account,\n    amount,\n    asset_code: assetCode,\n    created_at: createdAt,\n    id,\n    to,\n    from,\n    starting_balance: startingBalance,\n    type,\n    type_i: typeI,\n    transaction_attr: { operation_count: operationCount },\n    isCreateExternalAccount = false,\n    isPayment = false,\n    isSwap = false,\n  } = _op;\n  let sourceAssetCode;\n  if (\"source_asset_code\" in operation) {\n    sourceAssetCode = operation.source_asset_code;\n  }\n  const operationType = camelCase(type) as keyof typeof OPERATION_TYPES;\n  const opTypeStr = OPERATION_TYPES[operationType] || t(\"Transaction\");\n  const operationString = `${opTypeStr}${\n    operationCount > 1 ? ` + ${operationCount - 1} ops` : \"\"\n  }`;\n  const date = new Date(Date.parse(createdAt))\n    .toDateString()\n    .split(\" \")\n    .slice(1, 3)\n    .join(\" \");\n  const srcAssetCode = sourceAssetCode || \"XLM\";\n  const destAssetCode = assetCode || \"XLM\";\n  const isInvokeHostFn = typeI === 24;\n\n  const transactionDetailPropsBase: TransactionDetailProps = {\n    operation: _op,\n    isCreateExternalAccount,\n    isRecipient: false,\n    isPayment,\n    isSwap,\n    headerTitle: \"\",\n    operationText: \"\",\n    externalUrl: `${url}/op/${id}`,\n    setIsDetailViewShowing,\n  };\n\n  const [txDetails, setTxDetails] = useState(transactionDetailPropsBase);\n  const [dateText, setDateText] = useState(date);\n  const [rowText, setRowText] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [IconComponent, setIconComponent] = useState(\n    (\n      <Icon.RefreshCcw01 className=\"HistoryItem__icon--default\" />\n    ) as React.ReactElement | null,\n  );\n  const [BodyComponent, setBodyComponent] = useState(\n    null as React.ReactElement | null,\n  );\n\n  const renderBodyComponent = () => BodyComponent;\n  const renderIcon = () => IconComponent;\n  /* eslint-disable react-hooks/exhaustive-deps */\n  const translations = useCallback(t, []);\n\n  useEffect(() => {\n    const buildHistoryItem = async () => {\n      if (isSwap) {\n        setBodyComponent(\n          <>\n            {new BigNumber(amount).toFixed(2, 1)} {destAssetCode}\n          </>,\n        );\n        setRowText(\n          translations(`{{srcAssetCode}} for {{destAssetCode}}`, {\n            srcAssetCode,\n            destAssetCode,\n          }),\n        );\n        setTxDetails((_state) => ({\n          ..._state,\n          headerTitle: translations(\n            `Swapped {{srcAssetCode}} for {{destAssetCode}}`,\n            {\n              srcAssetCode,\n              destAssetCode,\n            },\n          ),\n          operationText: `+${new BigNumber(amount)} ${destAssetCode}`,\n        }));\n      } else if (isPayment) {\n        // default to Sent if a payment to self\n        const _isRecipient = to === publicKey && from !== publicKey;\n        const paymentDifference = _isRecipient ? \"+\" : \"-\";\n        setBodyComponent(\n          <>\n            {paymentDifference}\n            {formatAmount(new BigNumber(amount).toString())} {destAssetCode}\n          </>,\n        );\n        setIconComponent(\n          _isRecipient ? (\n            <Icon.ArrowDown className=\"HistoryItem__icon--received\" />\n          ) : (\n            <Icon.ArrowUp className=\"HistoryItem__icon--sent\" />\n          ),\n        );\n        setRowText(destAssetCode);\n        setDateText(\n          (_dateText) =>\n            `${\n              _isRecipient ? translations(\"Received\") : translations(\"Sent\")\n            } \\u2022 ${date}`,\n        );\n        setTxDetails((_state) => ({\n          ..._state,\n          isRecipient: _isRecipient,\n          headerTitle: `${\n            _isRecipient ? translations(\"Received\") : translations(\"Sent\")\n          } ${destAssetCode}`,\n          operationText: `${paymentDifference}${new BigNumber(\n            amount,\n          )} ${destAssetCode}`,\n        }));\n      } else if (isCreateExternalAccount) {\n        setBodyComponent(\n          <>-{new BigNumber(startingBalance).toFixed(2, 1)} XLM</>,\n        );\n        setIconComponent(<Icon.ArrowUp className=\"HistoryItem__icon--sent\" />);\n        setRowText(\"XLM\");\n        setDateText((_dateText) => `${translations(\"Sent\")} \\u2022 ${date}`);\n        setTxDetails((_state) => ({\n          ..._state,\n          headerTitle: translations(\"Create Account\"),\n          isPayment: true,\n          operation: {\n            ...operation,\n            // eslint-disable-next-line\n            asset_type: \"native\",\n            to: account,\n          } as any, // TODO: overloaded op type, native not valid\n          operationText: `-${new BigNumber(startingBalance)} XLM`,\n        }));\n      } else if (isInvokeHostFn) {\n        const attrs = getAttrsFromSorobanHorizonOp(operation, networkDetails);\n        const balances =\n          accountBalances.balances || ({} as NonNullable<Balances>);\n\n        const tokenKey = getBalanceByKey(\n          attrs.contractId,\n          balances,\n          networkDetails,\n        );\n\n        if (!attrs) {\n          setRowText(operationString);\n          setTxDetails((_state) => ({\n            ..._state,\n            headerTitle: translations(\"Transaction\"),\n            operationText: operationString,\n          }));\n        } else if (attrs.fnName === SorobanTokenInterface.mint) {\n          const isRecieving = attrs.to === publicKey;\n\n          setIconComponent(\n            isRecieving ? (\n              <Icon.ArrowDown className=\"HistoryItem__icon--received\" />\n            ) : (\n              <Icon.RefreshCcw01 className=\"HistoryItem__icon--default\" />\n            ),\n          );\n\n          // Minter does not need to have tokens to mint, and\n          // they are not neccessarily minted to themselves.\n          // If user has minted to self, add token to their token list.\n          if (!tokenKey) {\n            setIsLoading(true);\n\n            try {\n              const tokenDetailsResponse = await getTokenDetails({\n                contractId: attrs.contractId,\n                publicKey,\n                networkDetails,\n              });\n\n              if (!tokenDetailsResponse) {\n                setRowText(operationString);\n                setTxDetails((_state) => ({\n                  ..._state,\n                  headerTitle: translations(\"Transaction\"),\n                  operationText: operationString,\n                }));\n              } else {\n                const _token = {\n                  contractId: attrs.contractId,\n                  total: isRecieving ? attrs.amount : 0,\n                  decimals: tokenDetailsResponse.decimals,\n                  name: tokenDetailsResponse.name,\n                  symbol: tokenDetailsResponse.symbol,\n                };\n\n                const formattedTokenAmount = formatTokenAmount(\n                  new BigNumber(attrs.amount),\n                  _token.decimals,\n                );\n                setBodyComponent(\n                  <>\n                    {isRecieving && \"+\"}\n                    {formattedTokenAmount} {_token.symbol}\n                  </>,\n                );\n\n                setDateText(\n                  (_dateText) =>\n                    `${\n                      isRecieving\n                        ? translations(\"Received\")\n                        : translations(\"Minted\")\n                    } \\u2022 ${date}`,\n                );\n                setRowText(translations(capitalize(attrs.fnName)));\n                setTxDetails((_state) => ({\n                  ..._state,\n                  operation: {\n                    ..._state.operation,\n                    from: attrs.from,\n                    to: attrs.to,\n                  },\n                  headerTitle: `${translations(capitalize(attrs.fnName))} ${\n                    _token.symbol\n                  }`,\n                  isPayment: false,\n                  isRecipient: isRecieving,\n                  operationText: `${formattedTokenAmount} ${_token.symbol}`,\n                }));\n              }\n              setIsLoading(false);\n            } catch (error) {\n              console.error(error);\n              captureException(`Error fetching token details: ${error}`);\n              setRowText(translations(capitalize(attrs.fnName)));\n              setBodyComponent(\n                <>\n                  {isRecieving && \"+ \"}\n                  Unknown\n                </>,\n              );\n              setDateText(\n                (_dateText) =>\n                  `${\n                    isRecieving\n                      ? translations(\"Received\")\n                      : translations(\"Minted\")\n                  } \\u2022 ${date}`,\n              );\n              setTxDetails((_state) => ({\n                ..._state,\n                operation: {\n                  ..._state.operation,\n                  from: attrs.from,\n                  to: attrs.to,\n                },\n                headerTitle: translations(capitalize(attrs.fnName)),\n                // manually set `isPayment` now that we've passed the above `isPayment` conditional\n                isPayment: false,\n                isRecipient: isRecieving,\n                operationText: operationString,\n              }));\n              setIsLoading(false);\n            }\n          } else {\n            const { token, decimals } = balances[tokenKey] as TokenBalance;\n            const formattedTokenAmount = formatTokenAmount(\n              new BigNumber(attrs.amount),\n              decimals,\n            );\n            setBodyComponent(\n              <>\n                {isRecieving && \"+\"}\n                {formattedTokenAmount} {token.code}\n              </>,\n            );\n\n            setDateText(\n              (_dateText) =>\n                `${\n                  isRecieving\n                    ? translations(\"Received\")\n                    : translations(\"Minted\")\n                } \\u2022 ${date}`,\n            );\n            setRowText(translations(capitalize(attrs.fnName)));\n            setTxDetails((_state) => ({\n              ..._state,\n              operation: {\n                ..._state.operation,\n                from: attrs.from,\n                to: attrs.to,\n              },\n              headerTitle: `${translations(capitalize(attrs.fnName))} ${\n                token.code\n              }`,\n              isPayment: false,\n              isRecipient: isRecieving,\n              operationText: `${formattedTokenAmount} ${token.code}`,\n            }));\n          }\n        } else if (attrs.fnName === SorobanTokenInterface.transfer) {\n          setIconComponent(\n            <Icon.ArrowUp className=\"HistoryItem__icon--sent\" />,\n          );\n          setIsLoading(true);\n\n          try {\n            const tokenDetailsResponse = await getTokenDetails({\n              contractId: attrs.contractId,\n              publicKey,\n              networkDetails,\n            });\n\n            if (!tokenDetailsResponse) {\n              setRowText(operationString);\n              setTxDetails((_state) => ({\n                ..._state,\n                headerTitle: translations(\"Transaction\"),\n                operationText: operationString,\n              }));\n            }\n\n            const { symbol, decimals } = tokenDetailsResponse!;\n            const code = symbol === \"native\" ? \"XLM\" : symbol;\n            const formattedTokenAmount = formatTokenAmount(\n              new BigNumber(attrs.amount),\n              decimals,\n            );\n            const _isRecipient =\n              attrs.to === publicKey && attrs.from !== publicKey;\n            const paymentDifference = _isRecipient ? \"+\" : \"-\";\n            setBodyComponent(\n              <>\n                {paymentDifference}\n                {formattedTokenAmount} {code}\n              </>,\n            );\n            setIconComponent(\n              _isRecipient ? (\n                <Icon.ArrowDown className=\"HistoryItem__icon--received\" />\n              ) : (\n                <Icon.ArrowUp className=\"HistoryItem__icon--sent\" />\n              ),\n            );\n            setRowText(code);\n            setDateText(\n              (_dateText) =>\n                `${\n                  _isRecipient ? translations(\"Received\") : translations(\"Sent\")\n                } \\u2022 ${date}`,\n            );\n            setTxDetails((_state) => ({\n              ..._state,\n              isRecipient: _isRecipient,\n              headerTitle: `${\n                _isRecipient ? translations(\"Received\") : translations(\"Sent\")\n              } ${code}`,\n              operationText: `${paymentDifference}${formattedTokenAmount} ${code}`,\n            }));\n          } catch (error) {\n            // falls back to only showing contract ID\n            setRowText(operationString);\n            setTxDetails((_state) => ({\n              ..._state,\n              headerTitle: translations(\"Transaction\"),\n              operationText: operationString,\n            }));\n          } finally {\n            setIsLoading(false);\n          }\n        } else {\n          setRowText(operationString);\n          setTxDetails((_state) => ({\n            ..._state,\n            headerTitle: translations(\"Transaction\"),\n            operationText: operationString,\n          }));\n        }\n      } else {\n        setRowText(operationString);\n        setTxDetails((_state) => ({\n          ..._state,\n          headerTitle: translations(\"Transaction\"),\n          operationText: operationString,\n        }));\n      }\n    };\n\n    buildHistoryItem();\n  }, [\n    account,\n    amount,\n    date,\n    destAssetCode,\n    from,\n    isCreateExternalAccount,\n    isInvokeHostFn,\n    isPayment,\n    isSwap,\n    networkDetails,\n    operation,\n    operationString,\n    publicKey,\n    srcAssetCode,\n    startingBalance,\n    translations,\n    to,\n    accountBalances.balances,\n  ]);\n\n  return (\n    <div\n      data-testid=\"history-item\"\n      className=\"HistoryItem\"\n      onClick={() => {\n        emitMetric(METRIC_NAMES.historyOpenItem);\n        setDetailViewProps(txDetails);\n        setIsDetailViewShowing(true);\n      }}\n    >\n      <div className=\"HistoryItem__row\">\n        {isLoading ? (\n          <div className=\"HistoryItem__loader\">\n            <Loader size=\"2rem\" />\n          </div>\n        ) : (\n          <>\n            <div className=\"HistoryItem__icon\">{renderIcon()}</div>\n            <div className=\"HistoryItem__operation\">\n              {rowText}\n              <div className=\"HistoryItem__date\">{dateText}</div>\n            </div>\n\n            <div\n              className=\"HistoryItem__payment\"\n              data-testid=\"history-item-body-component\"\n            >\n              {renderBodyComponent()}\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n/* eslint-enable @typescript-eslint/no-unsafe-argument */\n","import { Asset } from \"stellar-sdk\";\nimport { captureException } from \"@sentry/browser\";\n\nimport { BalanceMap } from \"@shared/api/types\";\nimport { LP_ISSUER_KEY } from \"@shared/helpers/stellar\";\nimport { NetworkDetails } from \"@shared/constants/stellar\";\nimport { isContractId } from \"./soroban\";\n\n/*\n  Attempts to match a balance to a related contract ID, expects a token or SAC contract ID.\n\n  BalanceMap keys can be one of two variants - \n  An asset balance - {code}:{issuer}\n  A token - {symbol}:{contract id}\n  An LP share - {LP ID}:lp\n*/\nexport const getBalanceByKey = (\n  contractId: string,\n  balances: BalanceMap,\n  networkDetails: NetworkDetails,\n) => {\n  const key = Object.keys(balances).find((balanceKey) => {\n    const [code, issuer] =\n      balanceKey === \"native\" ? [\"XLM\"] : balanceKey.split(\":\");\n    const matchesIssuer = contractId === issuer;\n\n    // if issuer is a G address or xlm, check for a SAC match\n    if (\n      (issuer && !isContractId(issuer) && issuer !== LP_ISSUER_KEY) ||\n      code === \"XLM\"\n    ) {\n      try {\n        const sacAddress = new Asset(code, issuer).contractId(\n          networkDetails.networkPassphrase,\n        );\n        const matchesSac = contractId === sacAddress;\n        return matchesSac;\n      } catch (e) {\n        console.error(e);\n        captureException(\n          `Error checking for SAC match with code ${code} and issuer ${issuer}. Error: ${e}`,\n        );\n      }\n    }\n    return matchesIssuer;\n  });\n  return key;\n};\n","import React from \"react\";\n\nimport \"./styles.scss\";\n\ninterface HistoryListProps {\n  children: React.ReactElement;\n  assetDetail?: boolean;\n}\n\nexport const HistoryList = ({ children, assetDetail }: HistoryListProps) => (\n  <div\n    className={`HistoryList ${assetDetail ? \"HistoryList--assetDetail\" : \"\"}`}\n  >\n    <div className=\"HistoryList__items\">{children}</div>\n  </div>\n);\n","import React from \"react\";\nimport { CopyText, Icon } from \"@stellar/design-system\";\n\nimport \"./styles.scss\";\n\nexport const CopyValue = ({\n  value,\n  displayValue,\n}: {\n  value: string;\n  displayValue: string;\n}) => (\n  <CopyText textToCopy={value}>\n    <div className=\"CopyValue\">\n      <Icon.Copy01 />\n      <span className=\"Value\">{displayValue}</span>\n    </div>\n  </CopyText>\n);\n","import React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport { getIconUrlFromIssuer } from \"@shared/api/helpers/getIconUrlFromIssuer\";\n\nimport { settingsNetworkDetailsSelector } from \"popup/ducks/settings\";\nimport { CopyValue } from \"popup/components/CopyValue\";\nimport StellarLogo from \"popup/assets/stellar-logo.png\";\nimport { displaySorobanId, isSorobanIssuer } from \"popup/helpers/account\";\n\nimport \"./styles.scss\";\n\ninterface AssetNetworkInfoProps {\n  assetIssuer: string;\n  assetCode: string;\n  assetType: string;\n  assetDomain: string;\n  contractId?: string;\n}\n\nexport const AssetNetworkInfo = ({\n  assetIssuer,\n  assetCode,\n  assetType,\n  assetDomain,\n  contractId,\n}: AssetNetworkInfoProps) => {\n  const networkDetails = useSelector(settingsNetworkDetailsSelector);\n  const [networkIconUrl, setNetworkIconUrl] = useState(\"\");\n\n  useEffect(() => {\n    const fetchIconUrl = async () => {\n      let iconUrl = \"\";\n\n      try {\n        iconUrl = await getIconUrlFromIssuer({\n          key: assetIssuer || \"\",\n          code: assetCode || \"\",\n          networkDetails,\n        });\n      } catch (e) {\n        console.error(e);\n      }\n\n      setNetworkIconUrl(iconUrl);\n    };\n\n    if (assetIssuer && !isSorobanIssuer(assetIssuer)) {\n      fetchIconUrl();\n    }\n  }, [assetCode, assetIssuer, networkDetails]);\n\n  const decideNetworkIcon = () => {\n    if (networkIconUrl || assetType === \"native\") {\n      return <img src={networkIconUrl || StellarLogo} alt=\"Network icon\" />;\n    }\n    if (!assetDomain) {\n      return null;\n    }\n\n    return <div className=\"AssetNetworkInfo__network__icon\" />;\n  };\n\n  return (\n    <div className=\"AssetNetworkInfo__network\">\n      <>\n        {decideNetworkIcon()}\n        {contractId ? (\n          <CopyValue\n            value={contractId}\n            displayValue={displaySorobanId(contractId, 28)}\n          />\n        ) : (\n          <span>{assetDomain || \"Stellar Lumens\"}</span>\n        )}\n      </>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { CopyText } from \"@stellar/design-system\";\n\nimport { CopyValue } from \"popup/components/CopyValue\";\nimport { truncateString } from \"helpers/stellar\";\nimport { IdenticonImg } from \"../IdenticonImg\";\n\nimport \"./styles.scss\";\n\ninterface IdenticonWrapperElProps {\n  customSize?: {\n    dimension: string;\n    padding: string;\n  };\n  isSmall?: boolean;\n}\n\ninterface KeyIdenticonProps extends IdenticonWrapperElProps {\n  isCopyAllowed?: boolean;\n  publicKey: string;\n  iconSide?: \"left\" | \"right\";\n  keyTruncationAmount?: number;\n}\n\nexport const KeyIdenticon = ({\n  isCopyAllowed = false,\n  publicKey = \"\",\n  isSmall = false,\n  customSize,\n  keyTruncationAmount,\n  iconSide = \"left\",\n  ...props\n}: KeyIdenticonProps) => {\n  const customStyle = {\n    ...(isSmall\n      ? {\n          // eslint-disable-next-line\n          \"--Icon-padding\": \"0.2rem\",\n          // eslint-disable-next-line\n          \"--Icon-dimension\": \"1.5rem\",\n          marginRight: iconSide === \"left\" ? \"0.5rem\" : 0,\n          marginLeft: iconSide === \"right\" ? \"0.5rem\" : 0,\n        }\n      : {\n          marginRight: !isCopyAllowed ? \"0.5rem\" : 0,\n        }),\n    ...(customSize\n      ? {\n          // eslint-disable-next-line\n          \"--Icon-padding\": customSize.padding,\n          // eslint-disable-next-line\n          \"--Icon-dimension\": customSize.dimension,\n          marginRight: iconSide === \"left\" ? \"0.5rem\" : 0,\n          marginLeft: iconSide === \"right\" ? \"0.5rem\" : 0,\n        }\n      : {\n          marginRight: !isCopyAllowed ? \"0.5rem\" : 0,\n        }),\n  } as React.CSSProperties;\n\n  return (\n    <div className=\"KeyIdenticon\">\n      {iconSide === \"left\" && (\n        <div className=\"KeyIdenticon--icon\" style={customStyle}>\n          <IdenticonImg publicKey={publicKey} />\n        </div>\n      )}\n      {isCopyAllowed ? (\n        <CopyText textToCopy={publicKey}>\n          <span {...props} className=\"KeyIdenticon--key\">\n            <CopyValue\n              value={publicKey}\n              displayValue={truncateString(publicKey, keyTruncationAmount)}\n            />\n          </span>\n        </CopyText>\n      ) : (\n        <span {...props} className=\"KeyIdenticon--key\">\n          {truncateString(publicKey, keyTruncationAmount)}\n        </span>\n      )}\n      {iconSide === \"right\" && (\n        <div className=\"KeyIdenticon--icon\" style={customStyle}>\n          <IdenticonImg publicKey={publicKey} />\n        </div>\n      )}\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport { View } from \"popup/basics/layout/View\";\n\nimport \"./styles.scss\";\n\ninterface SubviewHeaderProps {\n  customBackAction?: () => void;\n  customBackIcon?: React.ReactNode;\n  title: string | React.ReactNode;\n  subtitle?: React.ReactNode;\n  hasBackButton?: boolean;\n  rightButton?: React.ReactNode;\n}\n\nexport const SubviewHeader = ({\n  customBackAction,\n  customBackIcon,\n  title,\n  subtitle,\n  hasBackButton = true,\n  rightButton,\n}: SubviewHeaderProps) => (\n  <View.AppHeader\n    pageTitle={title}\n    pageSubtitle={subtitle}\n    rightContent={rightButton}\n    hasBackButton={hasBackButton}\n    customBackAction={customBackAction}\n    customBackIcon={customBackIcon}\n  />\n);\n","import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useSelector } from \"react-redux\";\nimport { Button } from \"@stellar/design-system\";\n\nimport { KeyIdenticon } from \"popup/components/identicons/KeyIdenticon\";\nimport { SubviewHeader } from \"popup/components/SubviewHeader\";\nimport { AssetNetworkInfo } from \"popup/components/accountHistory/AssetNetworkInfo\";\nimport { Loading } from \"popup/components/Loading\";\nimport { View } from \"popup/basics/layout/View\";\n\nimport { emitMetric } from \"helpers/metrics\";\nimport { openTab } from \"popup/helpers/navigate\";\nimport { stroopToXlm } from \"helpers/stellar\";\nimport { useAssetDomain } from \"popup/helpers/useAssetDomain\";\nimport { useScanAsset } from \"popup/helpers/blockaid\";\nimport { settingsNetworkDetailsSelector } from \"popup/ducks/settings\";\n\nimport { METRIC_NAMES } from \"popup/constants/metricsNames\";\n\nimport { HorizonOperation } from \"@shared/api/types\";\nimport { isCustomNetwork } from \"@shared/helpers/stellar\";\n\nimport \"./styles.scss\";\n\nexport interface TransactionDetailProps {\n  operation: HorizonOperation;\n  headerTitle: string;\n  isCreateExternalAccount: boolean;\n  isRecipient: boolean;\n  isPayment: boolean;\n  isSwap: boolean;\n  operationText: string;\n  externalUrl: string;\n  setIsDetailViewShowing: (isDetailViewShoing: boolean) => void;\n}\n\nexport const TransactionDetail = ({\n  operation,\n  headerTitle,\n  isPayment,\n  isRecipient,\n  isSwap,\n  operationText,\n  externalUrl,\n  setIsDetailViewShowing,\n}: Omit<TransactionDetailProps, \"isCreateExternalAccount\">) => {\n  // Why does transaction_attr not exist on Horizon types?\n  const _op = operation as any;\n  const {\n    asset_code: assetCode,\n    asset_issuer: assetIssuer,\n    asset_type: assetType,\n    from,\n    to,\n    created_at: createdAt,\n    transaction_attr: { fee_charged: feeCharged, memo },\n  } = _op;\n  const createdAtDateInstance = new Date(Date.parse(createdAt as string));\n  const createdAtLocalStrArr = createdAtDateInstance\n    .toLocaleString()\n    .split(\" \");\n  const createdAtTime = `${createdAtLocalStrArr[1]\n    .split(\":\")\n    .slice(0, 2)\n    .join(\":\")} ${createdAtLocalStrArr[2]}`;\n  const createdAtDateStr = createdAtDateInstance\n    .toDateString()\n    .split(\" \")\n    .slice(1)\n    .join(\" \");\n  const identiconDimensions = {\n    dimension: \"1rem\",\n    padding: \".1rem\",\n  };\n\n  const { t } = useTranslation();\n\n  const { assetDomain, error: assetError } = useAssetDomain({\n    assetIssuer,\n  });\n  const { scannedAsset } = useScanAsset(`${assetCode}-${assetIssuer}`);\n  const networkDetails = useSelector(settingsNetworkDetailsSelector);\n  const showContent = assetIssuer && !assetDomain && !assetError;\n  const isMalicious = scannedAsset.result_type === \"Malicious\";\n\n  return showContent ? (\n    <Loading />\n  ) : (\n    <React.Fragment>\n      <SubviewHeader\n        customBackAction={() => setIsDetailViewShowing(false)}\n        title={headerTitle}\n      />\n      <View.Content>\n        <div className=\"TransactionDetail__content\">\n          {isPayment ? (\n            <div\n              className={`TransactionDetail__header ${\n                isMalicious ? \"TransactionDetail__header--isMalicious\" : \"\"\n              }`}\n            >\n              {operationText}\n              <AssetNetworkInfo\n                assetCode={assetCode || \"\"}\n                assetType={assetType}\n                assetIssuer={assetIssuer || \"\"}\n                assetDomain={assetDomain}\n              />\n            </div>\n          ) : null}\n\n          <div className=\"TransactionDetail__info\">\n            <div className=\"TransactionDetail__info__row\">\n              {isPayment && !isSwap ? (\n                <>\n                  {isRecipient ? (\n                    <>\n                      <div>{t(\"From\")}</div>\n                      <div className=\"InfoRow__right\">\n                        <KeyIdenticon\n                          publicKey={from}\n                          customSize={identiconDimensions}\n                        />\n                      </div>\n                    </>\n                  ) : (\n                    <>\n                      <div>{t(\"To\")}</div>\n                      <div className=\"InfoRow__right\">\n                        <KeyIdenticon\n                          publicKey={to}\n                          customSize={identiconDimensions}\n                        />\n                      </div>\n                    </>\n                  )}\n                </>\n              ) : (\n                !isSwap && (\n                  <>\n                    <div>{t(\"Action\")}</div>\n                    <div className=\"InfoRow__right\">{operationText}</div>\n                  </>\n                )\n              )}\n            </div>\n            <div className=\"TransactionDetail__info__row\">\n              <div>{t(\"Date\")}</div>\n              <div className=\"InfoRow__right\">\n                {createdAtTime} &bull; {createdAtDateStr}\n              </div>\n            </div>\n            <div className=\"TransactionDetail__info__row\">\n              <div>{t(\"Memo\")}</div>\n              <div className=\"InfoRow__right\">{memo || `None`}</div>\n            </div>\n            <div className=\"TransactionDetail__info__row\">\n              <div>{t(\"Transaction fee\")}</div>\n              <div className=\"InfoRow__right\">\n                {stroopToXlm(feeCharged as string).toString()} XLM\n              </div>\n            </div>\n          </div>\n        </div>\n      </View.Content>\n      <View.Footer>\n        {!isCustomNetwork(networkDetails) ? (\n          <Button\n            size=\"md\"\n            variant=\"secondary\"\n            isFullWidth\n            onClick={() => {\n              emitMetric(METRIC_NAMES.historyOpenItem);\n              openTab(externalUrl);\n            }}\n          >\n            {t(\"View on\")} stellar.expert\n          </Button>\n        ) : null}\n      </View.Footer>\n    </React.Fragment>\n  );\n};\n","import React, { useEffect, useRef, useState } from \"react\";\n\nimport { LoadingBackground } from \"popup/basics/LoadingBackground\";\n\nimport \"./styles.scss\";\n\ninterface SlideupModalProps {\n  children: React.ReactElement;\n  isModalOpen: boolean;\n  setIsModalOpen: (isModalOpen: boolean) => void;\n}\n\nexport const SlideupModal = ({\n  children,\n  isModalOpen,\n  setIsModalOpen,\n}: SlideupModalProps) => {\n  const slideupModalRef = useRef<HTMLDivElement>(null);\n  const [slideupModalHeight, setSlideupModalHeight] = useState(-500);\n\n  useEffect(() => {\n    const height = slideupModalRef.current?.clientHeight || 0;\n    setSlideupModalHeight(-height);\n  }, [slideupModalRef]);\n\n  return (\n    <>\n      <div\n        className=\"SlideupModal\"\n        ref={slideupModalRef}\n        style={{\n          bottom: isModalOpen ? \"0px\" : `${slideupModalHeight}px`,\n        }}\n      >\n        {children}\n      </div>\n      <LoadingBackground\n        onClick={() => setIsModalOpen(false)}\n        isActive={isModalOpen}\n      />\n    </>\n  );\n};\n","export const FAVICON_URL = \"https://www.google.com/s2/favicons?sz=32&domain=\";\n\nexport const getSiteFavicon = (url: string) => `${FAVICON_URL}${url}`;\n","import React from \"react\";\n\nimport { getPunycodedDomain } from \"helpers/urls\";\nimport { getSiteFavicon } from \"popup/helpers/getSiteFavicon\";\n\nimport \"./styles.scss\";\n\nexport const PunycodedDomain = ({\n  domain,\n  isRow,\n  ...props\n}: {\n  domain: string;\n  isRow?: boolean;\n}) => {\n  const punycodedDomain = getPunycodedDomain(domain);\n  const isDomainValid = punycodedDomain === domain;\n\n  const favicon = getSiteFavicon(domain);\n\n  return (\n    <div\n      className={`PunycodedDomain ${isRow ? \"PunycodedDomain--row\" : \"\"}`}\n      {...props}\n    >\n      <div className=\"PunycodedDomain__favicon-container\">\n        <img\n          className=\"PunycodedDomain__favicon\"\n          src={favicon}\n          alt=\"Site favicon\"\n        />\n      </div>\n      <div className=\"PunycodedDomain__domain\">\n        <strong>\n          {isDomainValid ? punycodedDomain : `xn-${punycodedDomain}`}\n        </strong>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport classNames from \"classnames\";\nimport { Card, Icon } from \"@stellar/design-system\";\nimport { useTranslation } from \"react-i18next\";\nimport { useSelector } from \"react-redux\";\n\nimport { PunycodedDomain } from \"popup/components/PunycodedDomain\";\nimport { AssetIcon } from \"popup/components/account/AccountAssets\";\nimport { transactionSubmissionSelector } from \"popup/ducks/transactionSubmission\";\nimport IconShieldPlus from \"popup/assets/icon-shield-plus.svg\";\nimport { BlockAidSiteScanLabel } from \"../WarningMessages\";\n\nimport \"./styles.scss\";\n\nexport type PillType = \"Connection\" | \"Trustline\" | \"Transaction\";\n\ninterface PillyCopyProps {\n  pillType: PillType;\n}\n\nconst PillCopy = ({ pillType }: PillyCopyProps) => {\n  const { t } = useTranslation();\n\n  if (pillType === \"Transaction\") {\n    return (\n      <>\n        <Icon.Link01 />\n        <div>{t(\"Transaction Request\")}</div>\n      </>\n    );\n  }\n\n  if (pillType === \"Trustline\") {\n    return (\n      <>\n        <img src={IconShieldPlus} alt=\"Add trustline icon\" />\n        <div>{t(\"Add Asset trustline\")}</div>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <Icon.Link01 />\n      <div>{t(\"Connection Request\")}</div>\n    </>\n  );\n};\n\ninterface ModalInfoProps {\n  children: React.ReactNode;\n  code: string;\n  issuer: string;\n  image: string;\n  pillType: PillType;\n  domain: string;\n  asset: string;\n  variant?: \"default\" | \"malicious\";\n}\n\nexport const ModalInfo = ({\n  children,\n  code,\n  issuer,\n  image,\n  pillType,\n  domain,\n  asset,\n  variant = \"default\",\n}: ModalInfoProps) => {\n  const cardClasses = classNames(\"ModalInfo--card\", {\n    Malicious: variant === \"malicious\",\n  });\n  const { assetIcons } = useSelector(transactionSubmissionSelector);\n\n  return (\n    <div className={cardClasses}>\n      <Card>\n        <div className=\"ModalInfo__icon\">\n          <AssetIcon\n            assetIcons={assetIcons}\n            icon={image}\n            code={code}\n            issuerKey={issuer}\n            isSuspicious={false}\n            isModal\n          />\n        </div>\n        <div className=\"ModalInfo__asset\">{asset}</div>\n        <div className=\"ModalInfo__domain\">{domain}</div>\n        <div className=\"ModalInfo--connection-request\">\n          <div className=\"ModalInfo--connection-request-pill\">\n            <PillCopy pillType={pillType} />\n          </div>\n        </div>\n        {children}\n      </Card>\n    </div>\n  );\n};\n\ninterface DomainScanModalInfoProps {\n  children: React.ReactNode;\n  domain: string;\n  subject: string;\n  isMalicious: boolean;\n  scanStatus: \"hit\" | \"miss\";\n}\n\nexport const DomainScanModalInfo = ({\n  children,\n  domain,\n  subject,\n  isMalicious,\n  scanStatus,\n}: DomainScanModalInfoProps) => (\n  <div className=\"ModalInfo--card\">\n    <Card variant=\"secondary\">\n      <PunycodedDomain domain={domain} />\n      <div className=\"ModalInfo--connection-request\">\n        <div className=\"ModalInfo--connection-request-pill\">\n          <Icon.Link01 />\n          <p>Connection Request</p>\n        </div>\n      </div>\n      <BlockAidSiteScanLabel isMalicious={isMalicious} status={scanStatus} />\n      <div className=\"ModalInfo--subject\">{subject}</div>\n      {children}\n    </Card>\n  </div>\n);\n","import { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport { stellarSdkServer } from \"@shared/api/helpers/stellarSdkServer\";\nimport { stroopToXlm } from \"helpers/stellar\";\nimport { settingsNetworkDetailsSelector } from \"popup/ducks/settings\";\n\nexport enum NetworkCongestion {\n  LOW = \"Low\",\n  MEDIUM = \"Medium\",\n  HIGH = \"High\",\n}\n\nexport const useNetworkFees = () => {\n  const { networkUrl, networkPassphrase } = useSelector(\n    settingsNetworkDetailsSelector,\n  );\n  const [recommendedFee, setRecommendedFee] = useState(\"\");\n  const [networkCongestion, setNetworkCongestion] = useState(\n    \"\" as NetworkCongestion,\n  );\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const server = stellarSdkServer(networkUrl, networkPassphrase);\n        const { max_fee: maxFee, ledger_capacity_usage: ledgerCapacityUsage } =\n          await server.feeStats();\n        const ledgerCapacityUsageNum = Number(ledgerCapacityUsage);\n\n        setRecommendedFee(stroopToXlm(maxFee.mode).toFixed());\n        if (ledgerCapacityUsageNum > 0.5 && ledgerCapacityUsageNum <= 0.75) {\n          setNetworkCongestion(NetworkCongestion.MEDIUM);\n        } else if (ledgerCapacityUsageNum > 0.75) {\n          setNetworkCongestion(NetworkCongestion.HIGH);\n        } else {\n          setNetworkCongestion(NetworkCongestion.LOW);\n        }\n      } catch (e) {\n        // use default values\n        setRecommendedFee(\"100\");\n        console.error(e);\n      }\n    })();\n  }, [networkUrl, networkPassphrase]);\n\n  return { recommendedFee, networkCongestion };\n};\n","import { useEffect } from \"react\";\n\nimport \"./styles.scss\";\n\nconst fullscreenClassname = \"Fullscreen\";\n\nexport const FullscreenStyle = () => {\n  useEffect(() => {\n    const bodyHtmlSelector = document.querySelectorAll(\"body, html\");\n\n    if (bodyHtmlSelector) {\n      bodyHtmlSelector.forEach((el) => el.classList.add(fullscreenClassname));\n    }\n\n    return () => document.body.classList.remove(fullscreenClassname);\n  }, []);\n\n  return null;\n};\n","import React, { useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { Button, Checkbox, Input, Link } from \"@stellar/design-system\";\nimport { ConfigurableWalletType } from \"@shared/constants/hardwareWallet\";\n\nimport { newTabHref } from \"helpers/urls\";\nimport { navigateTo, openTab } from \"popup/helpers/navigate\";\nimport { pluginWalletInfo } from \"popup/helpers/hardwareConnect\";\nimport { ROUTES } from \"popup/constants/routes\";\nimport { SubviewHeader } from \"popup/components/SubviewHeader\";\n\nimport \"./styles.scss\";\nimport { View } from \"popup/basics/layout/View\";\n\nexport const defaultStellarBipPath = \"44'/148'/0'\";\n\nexport const PluginWallet = () => {\n  const location = useLocation();\n  const walletType = new URLSearchParams(location.search).get(\n    \"walletType\",\n  ) as ConfigurableWalletType;\n  const [bipPath, setBipPath] = useState(defaultStellarBipPath);\n  const [useDefault, setUseDefault] = useState(true);\n\n  const pluginWalletInfoSection = pluginWalletInfo[walletType];\n\n  return (\n    <>\n      <SubviewHeader\n        title={`Connect with ${walletType}`}\n        hasBackButton={true}\n        customBackAction={() => navigateTo(ROUTES.connectWallet)}\n      />\n      <View.Content>\n        <p>{pluginWalletInfoSection.instruction}</p>\n        <p>\n          <Link\n            variant=\"secondary\"\n            href={pluginWalletInfoSection.link.href}\n            rel=\"noreferrer\"\n            target=\"_blank\"\n          >\n            {pluginWalletInfoSection.link.text}\n          </Link>\n        </p>\n        <div className=\"PluginWallet__bottom\">\n          {!useDefault && (\n            <div>\n              <div className=\"PluginWallet__caption\">ENTER BIP PATH</div>\n              <Input\n                fieldSize=\"md\"\n                autoComplete=\"off\"\n                id=\"bipPath\"\n                value={bipPath}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setBipPath(e.target.value);\n                }}\n              />\n            </div>\n          )}\n          <Checkbox\n            fieldSize=\"md\"\n            defaultChecked\n            autoComplete=\"off\"\n            id=\"useDefault-input\"\n            label=\"Use default account\"\n            onClick={() => setUseDefault(!useDefault)}\n          />\n          <Button\n            size=\"md\"\n            isFullWidth\n            variant=\"primary\"\n            onClick={() => {\n              openTab(\n                newTabHref(\n                  ROUTES.connectDevice,\n                  `bipPath=${bipPath}&walletType=${walletType}`,\n                ),\n              );\n            }}\n          >\n            Connect\n          </Button>\n        </div>\n      </View.Content>\n    </>\n  );\n};\n","import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useLocation } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport { Button, Notification } from \"@stellar/design-system\";\nimport { ConfigurableWalletType } from \"@shared/constants/hardwareWallet\";\n\nimport { AppDispatch } from \"popup/App\";\nimport { FullscreenStyle } from \"popup/components/FullscreenStyle\";\n\nimport { importHardwareWallet } from \"popup/ducks/accountServices\";\nimport { defaultStellarBipPath } from \"popup/views/AddAccount/connect/PluginWallet\";\nimport {\n  createWalletConnection,\n  parseWalletError,\n} from \"popup/helpers/hardwareConnect\";\nimport Ledger from \"popup/assets/ledger.png\";\nimport LedgerConnected from \"popup/assets/ledger-connected.png\";\n\nimport \"./styles.scss\";\n\nexport const WalletErrorBlock = ({ error }: { error: string }) => {\n  const { t } = useTranslation();\n\n  if (!error) {\n    return null;\n  }\n  return (\n    <Notification variant=\"error\" title=\"Error\">\n      {t(error)}\n    </Notification>\n  );\n};\n\nexport const DeviceConnect = () => {\n  const dispatch: AppDispatch = useDispatch();\n  const { t } = useTranslation();\n\n  const [isDetecting, setIsDetecting] = useState(false);\n  const { search } = useLocation();\n  const params = new URLSearchParams(search);\n  const bipPath = params.get(\"bipPath\") || defaultStellarBipPath;\n  const walletType = params.get(\"walletType\") as ConfigurableWalletType;\n\n  const [walletConnectSuccessful, setWalletConnectSuccessful] = useState(false);\n  const [connectError, setConnectError] = useState(\"\");\n\n  const handleConnect = async () => {\n    setIsDetecting(true);\n    setConnectError(\"\");\n    try {\n      const publicKey = await createWalletConnection[walletType](bipPath);\n\n      setWalletConnectSuccessful(true);\n\n      dispatch(\n        importHardwareWallet({\n          publicKey,\n          hardwareWalletType: walletType,\n          bipPath,\n        }),\n      );\n    } catch (e) {\n      if (parseWalletError.hasOwnProperty(walletType)) {\n        const isErrorParserFunction =\n          typeof parseWalletError[walletType] === \"function\";\n        if (isErrorParserFunction) {\n          setConnectError(parseWalletError[walletType](e));\n        }\n      }\n    }\n    setIsDetecting(false);\n  };\n\n  const getWalletButton = () => {\n    if (walletConnectSuccessful) {\n      return (\n        <Button\n          size=\"md\"\n          isFullWidth\n          variant=\"secondary\"\n          onClick={() => window.close()}\n        >\n          Done\n        </Button>\n      );\n    }\n    return (\n      <Button\n        size=\"md\"\n        isFullWidth\n        variant=\"secondary\"\n        onClick={handleConnect}\n        isLoading={isDetecting}\n      >\n        {isDetecting ? t(\"Detecting\") : t(\"Detect device\")}\n      </Button>\n    );\n  };\n\n  return (\n    <>\n      <FullscreenStyle />\n      <div className=\"DeviceConnect\">\n        <div className=\"DeviceConnect__header\">Connect {walletType}</div>\n        <div className=\"DeviceConnect__caption\">\n          {walletConnectSuccessful\n            ? t(\"You’re good to go!\")\n            : t(\"Connect device to computer\")}\n        </div>\n        <div className=\"DeviceConnect__content__center\">\n          <img\n            className=\"DeviceConnect__img\"\n            src={walletConnectSuccessful ? LedgerConnected : Ledger}\n            alt={walletType}\n          />\n        </div>\n\n        <div className=\"DeviceConnect__bottom\">\n          {connectError ? <WalletErrorBlock error={connectError} /> : null}\n          {getWalletButton()}\n        </div>\n      </div>\n    </>\n  );\n};\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useTranslation } from \"react-i18next\";\nimport { Button, Icon, Loader } from \"@stellar/design-system\";\nimport { handleSignedHwPayload } from \"@shared/api/internal\";\nimport { ConfigurableWalletType } from \"@shared/constants/hardwareWallet\";\n\nimport { POPUP_HEIGHT } from \"constants/dimensions\";\n\nimport { AppDispatch } from \"popup/App\";\nimport { SubviewHeader } from \"popup/components/SubviewHeader\";\nimport { bipPathSelector } from \"popup/ducks/accountServices\";\nimport {\n  signWithHardwareWallet,\n  submitFreighterTransaction,\n  transactionSubmissionSelector,\n  closeHwOverlay,\n  addRecentAddress,\n} from \"popup/ducks/transactionSubmission\";\nimport { settingsSelector } from \"popup/ducks/settings\";\nimport { LoadingBackground } from \"popup/basics/LoadingBackground\";\nimport { WalletErrorBlock } from \"popup/views/AddAccount/connect/DeviceConnect\";\n\nimport { useIsSwap } from \"popup/helpers/useIsSwap\";\nimport {\n  getWalletPublicKey,\n  parseWalletError,\n} from \"popup/helpers/hardwareConnect\";\nimport LedgerSigning from \"popup/assets/ledger-signing.png\";\nimport Ledger from \"popup/assets/ledger.png\";\n\nimport \"./styles.scss\";\n\nexport const HardwareSign = ({\n  walletType,\n  isSignSorobanAuthorization,\n}: {\n  walletType: ConfigurableWalletType;\n  isSignSorobanAuthorization?: boolean;\n}) => {\n  const dispatch: AppDispatch = useDispatch();\n  const { t } = useTranslation();\n  const [isDetecting, setIsDetecting] = useState(false);\n  const { networkDetails, isHashSigningEnabled } =\n    useSelector(settingsSelector);\n  const {\n    hardwareWalletData: { transactionXDR, shouldSubmit },\n    transactionData: { destination },\n  } = useSelector(transactionSubmissionSelector);\n  const bipPath = useSelector(bipPathSelector);\n  const [hardwareConnectSuccessful, setHardwareConnectSuccessful] =\n    useState(false);\n  const [hardwareWalletIsSigning, setHardwareWalletIsSigning] = useState(false);\n  const [connectError, setConnectError] = useState(\"\");\n  const isSwap = useIsSwap();\n  const [isDetectBtnDirty, setIsDetectBtnDirty] = useState(false);\n\n  const closeOverlay = () => {\n    if (hardwareConnectRef.current) {\n      hardwareConnectRef.current.style.bottom = `-${POPUP_HEIGHT}px`;\n    }\n    setTimeout(() => {\n      dispatch(closeHwOverlay());\n    }, 300);\n  };\n\n  // animate entry\n  const hardwareConnectRef = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    if (hardwareConnectRef.current) {\n      hardwareConnectRef.current.style.bottom = \"0\";\n    }\n  }, [hardwareConnectRef]);\n\n  const handleSign = async () => {\n    setIsDetecting(true);\n    setConnectError(\"\");\n    try {\n      const publicKey = await getWalletPublicKey[walletType](bipPath);\n      setHardwareConnectSuccessful(true);\n      setHardwareWalletIsSigning(true);\n\n      const res = await dispatch(\n        signWithHardwareWallet({\n          transactionXDR,\n          networkPassphrase: networkDetails.networkPassphrase,\n          publicKey,\n          bipPath,\n          walletType,\n          isHashSigningEnabled,\n          isSignSorobanAuthorization,\n        }),\n      );\n      if (signWithHardwareWallet.fulfilled.match(res)) {\n        if (shouldSubmit && !isSignSorobanAuthorization) {\n          const submitResp = await dispatch(\n            submitFreighterTransaction({\n              publicKey,\n              signedXDR: res.payload as string,\n              networkDetails,\n            }),\n          );\n          if (\n            submitFreighterTransaction.fulfilled.match(submitResp) &&\n            !isSwap\n          ) {\n            dispatch(addRecentAddress({ publicKey: destination }));\n          }\n        } else {\n          // right now there are only two cases after signing,\n          // submitting to network or handling in background script\n          await handleSignedHwPayload({ signedPayload: res.payload });\n        }\n        closeOverlay();\n      } else {\n        setHardwareConnectSuccessful(false);\n        setConnectError(\n          parseWalletError[walletType](res.payload?.errorMessage || \"\"),\n        );\n      }\n      setHardwareWalletIsSigning(false);\n    } catch (e) {\n      setHardwareWalletIsSigning(false);\n      setConnectError(parseWalletError[walletType](e));\n    }\n    setIsDetecting(false);\n  };\n\n  // let's check connection on initial load\n  useEffect(() => {\n    handleSign();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <div className=\"HardwareSign\">\n      <div className=\"HardwareSign__wrapper\" ref={hardwareConnectRef}>\n        <SubviewHeader\n          customBackAction={closeOverlay}\n          customBackIcon={<Icon.XClose />}\n          title={`Connect ${walletType}`}\n        />\n        <div className=\"HardwareSign__content\">\n          <div className=\"HardwareSign__success\">\n            {hardwareConnectSuccessful ? \"Connected\" : \"\"}\n          </div>\n          <div className=\"HardwareSign__content__center\">\n            <img\n              className=\"HardwareSign__img\"\n              src={hardwareConnectSuccessful ? LedgerSigning : Ledger}\n              alt={walletType}\n            />\n            <span>\n              {hardwareConnectSuccessful\n                ? t(\"Review transaction on device\")\n                : t(\"Connect device to computer\")}\n            </span>\n            {hardwareWalletIsSigning && (\n              <div className=\"HardwareSign__loader\">\n                <Loader size=\"2rem\" />\n              </div>\n            )}\n          </div>\n        </div>\n        <div className=\"HardwareSign__bottom\">\n          {isDetectBtnDirty && <WalletErrorBlock error={connectError} />}\n          {!hardwareConnectSuccessful && (\n            <Button\n              size=\"md\"\n              variant=\"secondary\"\n              isFullWidth\n              onClick={() => {\n                setIsDetectBtnDirty(true);\n                handleSign();\n              }}\n              isLoading={isDetecting}\n            >\n              {isDetecting ? t(\"Detecting\") : t(\"Detect device\")}\n            </Button>\n          )}\n        </div>\n      </div>\n      <LoadingBackground onClick={undefined} isActive={true} />\n    </div>\n  );\n};\n","import * as StellarSdk from \"stellar-sdk\";\nimport * as StellarSdkNext from \"stellar-sdk-next\";\nimport { NetworkDetails } from \"@shared/constants/stellar\";\nimport { xlmToStroop } from \"helpers/stellar\";\nimport { getSdk } from \"@shared/helpers/stellar\";\n\nexport const getManageAssetXDR = async ({\n  publicKey,\n  assetCode,\n  assetIssuer,\n  addTrustline,\n  server,\n  recommendedFee,\n  networkDetails,\n}: {\n  publicKey: string;\n  assetCode: string;\n  assetIssuer: string;\n  addTrustline: boolean;\n  server: StellarSdk.Horizon.Server | StellarSdkNext.Horizon.Server;\n  recommendedFee: string;\n  networkDetails: NetworkDetails;\n}) => {\n  const changeParams = addTrustline ? {} : { limit: \"0\" };\n  const sourceAccount: StellarSdk.Account = await server.loadAccount(publicKey);\n\n  const Sdk = getSdk(networkDetails.networkPassphrase);\n\n  return new Sdk.TransactionBuilder(sourceAccount, {\n    fee: xlmToStroop(recommendedFee).toFixed(),\n    networkPassphrase: networkDetails.networkPassphrase,\n  })\n    .addOperation(\n      Sdk.Operation.changeTrust({\n        asset: new Sdk.Asset(assetCode, assetIssuer),\n        ...changeParams,\n      }),\n    )\n    .setTimeout(180)\n    .build()\n    .toXDR();\n};\n","import { Memo, MemoType } from \"stellar-sdk\";\nimport buffer from \"buffer\";\nimport get from \"lodash/get\";\n\nimport { ErrorMessage } from \"@shared/api/types\";\n\nexport const decodeMemo = (memo: any): { value: string; type: MemoType } => {\n  const _memo = memo as Memo;\n\n  if (_memo.type === \"id\") {\n    return { value: _memo.value as string, type: _memo.type };\n  }\n\n  const decodeMethod = [\"hash\", \"return\"].includes(_memo.type)\n    ? \"hex\"\n    : \"utf-8\";\n\n  return {\n    value: _memo.value\n      ? buffer.Buffer.from(_memo.value).toString(decodeMethod)\n      : \"\",\n    type: _memo.type,\n  };\n};\n\n/*  eslint-disable camelcase  */\nexport enum RESULT_CODES {\n  tx_failed = \"tx_failed\",\n  tx_insufficient_fee = \"tx_insufficient_fee\",\n  op_invalid_limit = \"op_invalid_limit\",\n  op_low_reserve = \"op_low_reserve\",\n  op_under_dest_min = \"op_under_dest_min\",\n  op_underfunded = \"op_underfunded\",\n  op_no_destination = \"op_no_destination\",\n  op_no_trust = \"op_no_trust\",\n}\n/*  eslint-enable camelcase  */\n\nexport const getResultCodes = (error: ErrorMessage | undefined) => {\n  const txError = get(error, \"response.extras.result_codes.transaction\", \"\");\n  const opErrors = get(error, \"response.extras.result_codes.operations\", []);\n\n  return { operations: opErrors, transaction: txError };\n};\n","import React, { useEffect, useState } from \"react\";\nimport { createPortal } from \"react-dom\";\nimport { Link } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport { Asset, TransactionBuilder } from \"stellar-sdk\";\nimport BigNumber from \"bignumber.js\";\nimport { useTranslation } from \"react-i18next\";\nimport { Button } from \"@stellar/design-system\";\n\nimport { settingsNetworkDetailsSelector } from \"popup/ducks/settings\";\nimport { transactionSubmissionSelector } from \"popup/ducks/transactionSubmission\";\n\nimport { emitMetric } from \"helpers/metrics\";\nimport { getResultCodes, RESULT_CODES } from \"popup/helpers/parseTransaction\";\n\nimport { METRIC_NAMES } from \"popup/constants/metricsNames\";\n\nimport \"./styles.scss\";\n\nexport enum TRUSTLINE_ERROR_STATES {\n  UNKNOWN_ERROR = \"UNKNOWN_ERROR\",\n  NOT_ENOUGH_LUMENS = \"NOT_ENOUGH_LUMENS\",\n  ASSET_HAS_BALANCE = \"ASSET_HAS_BALANCE\",\n  ASSET_HAS_BUYING_LIABILITIES = \"ASSET_HAS_BUYING_LIABILITIES\",\n}\n\ninterface MapErrorToErrorState {\n  operations: string[];\n  transaction: string;\n}\n\nconst mapErrorToErrorState = (\n  { operations = [] }: MapErrorToErrorState,\n  buyingLiabilities: number,\n) => {\n  if (operations.includes(RESULT_CODES.op_invalid_limit)) {\n    if (buyingLiabilities) {\n      emitMetric(METRIC_NAMES.trustlineErrorBuyingLiability);\n      return TRUSTLINE_ERROR_STATES.ASSET_HAS_BUYING_LIABILITIES;\n    }\n\n    emitMetric(METRIC_NAMES.trustlineErrorHasBalance);\n    return TRUSTLINE_ERROR_STATES.ASSET_HAS_BALANCE;\n  }\n\n  if (operations.includes(RESULT_CODES.op_low_reserve)) {\n    emitMetric(METRIC_NAMES.trustlineErrorLowReserve);\n    return TRUSTLINE_ERROR_STATES.NOT_ENOUGH_LUMENS;\n  }\n\n  return TRUSTLINE_ERROR_STATES.UNKNOWN_ERROR;\n};\n\ninterface RenderedErrorProps {\n  errorState: TRUSTLINE_ERROR_STATES;\n  assetBalance: string;\n  resultCodes: string;\n  buyingLiabilities: number;\n}\n\nconst RenderedError = ({\n  errorState,\n  assetBalance,\n  resultCodes,\n  buyingLiabilities,\n}: RenderedErrorProps) => {\n  const { t } = useTranslation();\n\n  switch (errorState) {\n    case TRUSTLINE_ERROR_STATES.NOT_ENOUGH_LUMENS:\n      return (\n        <>\n          <div className=\"TrustlineError__title\">{t(\"Not enough lumens\")}</div>\n          <div className=\"TrustlineError__body\">\n            <p>0.500001 XLM {t(\"are required to add a new asset.\")}</p>\n            <p className=\"TrustlineError__links\">\n              <Link to=\"https://developers.stellar.org/docs/glossary/minimum-balance/#changes-to-transaction-fees-and-minimum-balances\">\n                {t(\"Learn more about transaction fees\")}\n              </Link>\n              <br />\n              <Link to=\"https://developers.stellar.org/docs/glossary/accounts/#liabilities\">\n                {t(\"Learn more about account reserves\")}\n              </Link>\n            </p>\n          </div>\n        </>\n      );\n    case TRUSTLINE_ERROR_STATES.ASSET_HAS_BALANCE:\n      return (\n        <>\n          <div className=\"TrustlineError__title\">\n            {t(\"This asset has a balance\")}\n          </div>\n          <div\n            className=\"TrustlineError__body\"\n            data-testid=\"TrustlineError__body\"\n          >\n            {t(\"You still have a balance of\")} {assetBalance}.{\" \"}\n            {t(\"You must have a balance of\")} 0{\" \"}\n            {t(\"in order to remove an asset.\")}\n          </div>\n        </>\n      );\n    case TRUSTLINE_ERROR_STATES.ASSET_HAS_BUYING_LIABILITIES:\n      return (\n        <>\n          <div className=\"TrustlineError__title\">\n            {t(\"This asset has buying liabilities\")}\n          </div>\n          <div\n            className=\"TrustlineError__body\"\n            data-testid=\"TrustlineError__body\"\n          >\n            {t(\"You still have a buying liability of\")} {buyingLiabilities}.{\" \"}\n            {t(\"You must have a buying liability of\")} 0{\" \"}\n            {t(\"in order to remove an asset.\")}\n          </div>\n        </>\n      );\n    case TRUSTLINE_ERROR_STATES.UNKNOWN_ERROR:\n    default:\n      return (\n        <>\n          <div className=\"TrustlineError__title\">\n            {t(\"This transaction could not be completed.\")}\n          </div>\n          <div className=\"TrustlineError__body\">\n            {t(\"Error code\")}: {resultCodes}\n          </div>\n        </>\n      );\n  }\n};\n\nexport const TrustlineError = ({\n  handleClose,\n}: {\n  handleClose?: () => void;\n}) => {\n  const { t } = useTranslation();\n  const { accountBalances, error } = useSelector(transactionSubmissionSelector);\n  const { networkPassphrase } = useSelector(settingsNetworkDetailsSelector);\n  const [assetBalance, setAssetBalance] = useState(\"\");\n  const [buyingLiabilities, setBuyingLiabilities] = useState(0);\n\n  const [isModalShowing, setIsModalShowing] = useState(true);\n\n  useEffect(() => {\n    emitMetric(METRIC_NAMES.manageAssetError, { error });\n  }, [error]);\n\n  useEffect(() => {\n    // emit general metric on view load\n    emitMetric(METRIC_NAMES.viewTrustlineError);\n  });\n\n  useEffect(() => {\n    const xdrEnvelope = error?.response?.extras?.envelope_xdr;\n    if (xdrEnvelope) {\n      const parsedTx = TransactionBuilder.fromXDR(\n        xdrEnvelope,\n        networkPassphrase,\n      );\n\n      if (\"operations\" in parsedTx) {\n        const op = parsedTx.operations[0];\n\n        if (\"line\" in op) {\n          const { code, issuer } = op.line as Asset;\n          const asset = `${code}:${issuer}`;\n          const balance = accountBalances?.balances?.[asset];\n\n          if (!balance) {\n            return;\n          }\n\n          setBuyingLiabilities(Number(balance.buyingLiabilities));\n\n          setAssetBalance(\n            `${new BigNumber(balance.available).toString()} ${\n              balance?.token?.code\n            }`,\n          );\n        }\n      }\n    }\n  }, [accountBalances, error, networkPassphrase]);\n\n  const errorState: TRUSTLINE_ERROR_STATES = error\n    ? mapErrorToErrorState(getResultCodes(error), buyingLiabilities)\n    : TRUSTLINE_ERROR_STATES.UNKNOWN_ERROR;\n\n  return isModalShowing\n    ? createPortal(\n        <div className=\"TrustlineError\">\n          <div\n            className=\"TrustlineError__inset\"\n            data-testid=\"TrustlineError__error\"\n          >\n            <RenderedError\n              errorState={errorState}\n              assetBalance={assetBalance}\n              resultCodes={JSON.stringify(getResultCodes(error))}\n              buyingLiabilities={buyingLiabilities}\n            />\n            <div>\n              <Button\n                size=\"md\"\n                isFullWidth\n                variant=\"tertiary\"\n                onClick={() => {\n                  setIsModalShowing(false);\n                  if (handleClose) {\n                    handleClose();\n                  }\n                }}\n              >\n                {t(\"Got it\")}\n              </Button>\n            </div>\n          </div>\n        </div>,\n        document.querySelector(\"#modal-root\")!,\n      )\n    : null;\n};\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { createPortal } from \"react-dom\";\nimport { Networks, StrKey } from \"stellar-sdk\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useTranslation } from \"react-i18next\";\nimport { Button, Icon, CopyText } from \"@stellar/design-system\";\n\nimport { AppDispatch } from \"popup/App\";\nimport { navigateTo } from \"popup/helpers/navigate\";\nimport { stellarSdkServer } from \"@shared/api/helpers/stellarSdkServer\";\nimport { emitMetric } from \"helpers/metrics\";\nimport { getCanonicalFromAsset } from \"helpers/stellar\";\nimport { getManageAssetXDR } from \"popup/helpers/getManageAssetXDR\";\nimport { checkForSuspiciousAsset } from \"popup/helpers/checkForSuspiciousAsset\";\nimport { isAssetSuspicious, scanAsset } from \"popup/helpers/blockaid\";\nimport { METRIC_NAMES } from \"popup/constants/metricsNames\";\nimport {\n  publicKeySelector,\n  hardwareWalletTypeSelector,\n  addTokenId,\n} from \"popup/ducks/accountServices\";\nimport { settingsNetworkDetailsSelector } from \"popup/ducks/settings\";\nimport {\n  getAccountBalances,\n  resetSubmission,\n  signFreighterTransaction,\n  submitFreighterTransaction,\n  transactionSubmissionSelector,\n  startHwSign,\n  removeTokenId,\n  resetSubmitStatus,\n} from \"popup/ducks/transactionSubmission\";\nimport { ActionStatus } from \"@shared/api/types\";\nimport { NETWORKS } from \"@shared/constants/stellar\";\nimport { ROUTES } from \"popup/constants/routes\";\n\nimport IconAdd from \"popup/assets/icon-add.svg\";\nimport IconRemove from \"popup/assets/icon-remove.svg\";\nimport IconEllipsis from \"popup/assets/icon-ellipsis.svg\";\n\nimport { TrustlineError } from \"../TrustlineError\";\n\nimport \"./styles.scss\";\n\ninterface ManageAssetRowButtonProps {\n  code: string;\n  contract: string;\n  issuer: string;\n  image: string;\n  domain: string;\n  isTrustlineActive: boolean;\n  isActionPending: boolean;\n  isContract: boolean;\n  isVerificationInfoShowing: boolean;\n  isVerifiedToken: boolean;\n  assetSubmitting: string;\n  setAssetSubmitting: (rowButtonShowing: string) => void;\n  setShowBlockedDomainWarning: (rowButtonShowing: boolean) => void;\n  setSuspiciousAssetData: (data: any) => void;\n  setShowNewAssetWarning: (rowButtonShowing: boolean) => void;\n  setNewAssetFlags: (flags: any) => void;\n  setShowUnverifiedWarning: (rowButtonShowing: boolean) => void;\n  setHandleAddToken: (func: any) => void;\n  recommendedFee: string;\n}\n\nexport const ManageAssetRowButton = ({\n  code,\n  contract,\n  issuer,\n  image,\n  domain,\n  isTrustlineActive,\n  isActionPending,\n  isContract,\n  isVerificationInfoShowing,\n  isVerifiedToken,\n  assetSubmitting,\n  setAssetSubmitting,\n  setShowBlockedDomainWarning,\n  setSuspiciousAssetData,\n  setShowNewAssetWarning,\n  setNewAssetFlags,\n  setShowUnverifiedWarning,\n  setHandleAddToken,\n  recommendedFee,\n}: ManageAssetRowButtonProps) => {\n  const dispatch: AppDispatch = useDispatch();\n  const { t } = useTranslation();\n  const [rowButtonShowing, setRowButtonShowing] = useState(\"\");\n  const [isTrustlineErrorShowing, setIsTrustlineErrorShowing] = useState(false);\n  const [isSigningWithHardwareWallet, setIsSigningWithHardwareWallet] =\n    useState(false);\n  const { submitStatus } = useSelector(transactionSubmissionSelector);\n  const walletType = useSelector(hardwareWalletTypeSelector);\n  const networkDetails = useSelector(settingsNetworkDetailsSelector);\n  const publicKey = useSelector(publicKeySelector);\n\n  const isHardwareWallet = !!walletType;\n  const ManageAssetRowDropdownRef = useRef<HTMLDivElement>(null);\n  const server = stellarSdkServer(\n    networkDetails.networkUrl,\n    networkDetails.networkPassphrase,\n  );\n\n  const handleBackgroundClick = () => {\n    setRowButtonShowing(\"\");\n  };\n  const canonicalAsset = getCanonicalFromAsset(code, issuer);\n\n  const signAndSubmit = async (\n    transactionXDR: string,\n    trackChangeTrustline: () => void,\n    successfulCallback?: () => Promise<void>,\n  ) => {\n    const res = await dispatch(\n      signFreighterTransaction({\n        transactionXDR,\n        network: networkDetails.networkPassphrase,\n      }),\n    );\n\n    if (signFreighterTransaction.fulfilled.match(res)) {\n      const submitResp = await dispatch(\n        submitFreighterTransaction({\n          publicKey,\n          signedXDR: res.payload.signedTransaction,\n          networkDetails,\n        }),\n      );\n\n      if (submitFreighterTransaction.fulfilled.match(submitResp)) {\n        dispatch(\n          getAccountBalances({\n            publicKey,\n            networkDetails,\n          }),\n        );\n        trackChangeTrustline();\n        dispatch(resetSubmission());\n        if (successfulCallback) {\n          await successfulCallback();\n        }\n      }\n\n      if (submitFreighterTransaction.rejected.match(submitResp)) {\n        setIsTrustlineErrorShowing(true);\n      }\n\n      setAssetSubmitting(\"\");\n      setRowButtonShowing(\"\");\n    }\n  };\n\n  const changeTrustline = async (\n    addTrustline: boolean,\n    successfulCallback?: () => Promise<void>,\n  ) => {\n    setAssetSubmitting(canonicalAsset);\n\n    const transactionXDR: string = await getManageAssetXDR({\n      publicKey,\n      assetCode: code,\n      assetIssuer: issuer,\n      addTrustline,\n      server,\n      recommendedFee,\n      networkDetails,\n    });\n\n    const trackChangeTrustline = () => {\n      emitMetric(\n        addTrustline\n          ? METRIC_NAMES.manageAssetAddAsset\n          : METRIC_NAMES.manageAssetRemoveAsset,\n        { code, issuer },\n      );\n    };\n\n    if (isHardwareWallet) {\n      // eslint-disable-next-line\n      await dispatch(startHwSign({ transactionXDR, shouldSubmit: true }));\n      setIsSigningWithHardwareWallet(true);\n      trackChangeTrustline();\n    } else {\n      await signAndSubmit(\n        transactionXDR,\n        trackChangeTrustline,\n        successfulCallback,\n      );\n    }\n  };\n\n  const handleRowClick = async (\n    assetRowData = {\n      code: \"\",\n      issuer: \"\",\n      domain: \"\",\n      image: \"\",\n    },\n  ) => {\n    setAssetSubmitting(canonicalAsset);\n    const resp = await checkForSuspiciousAsset({\n      code: assetRowData.code,\n      issuer: assetRowData.issuer,\n      domain: assetRowData.domain,\n      server,\n      networkDetails,\n    });\n\n    const scannedAsset = await scanAsset(\n      `${assetRowData.code}-${assetRowData.issuer}`,\n      networkDetails,\n    );\n\n    if (isAssetSuspicious(scannedAsset) && !isTrustlineActive) {\n      setShowBlockedDomainWarning(true);\n      setSuspiciousAssetData({\n        ...assetRowData,\n        blockaidData: scannedAsset,\n      });\n      setAssetSubmitting(\"\");\n    } else if (\n      !isTrustlineActive &&\n      (resp.isInvalidDomain || resp.isRevocable)\n    ) {\n      setShowNewAssetWarning(true);\n      setNewAssetFlags(resp);\n      setSuspiciousAssetData(assetRowData);\n      setAssetSubmitting(\"\");\n    } else {\n      changeTrustline(!isTrustlineActive, () =>\n        Promise.resolve(navigateTo(ROUTES.account)),\n      );\n    }\n  };\n\n  const handleTokenRowClick = async (\n    assetRowData = {\n      code: \"\",\n      issuer: \"\",\n      domain: \"\",\n      image: \"\",\n      contract: \"\",\n    },\n  ) => {\n    const contractId = assetRowData.contract;\n    setAssetSubmitting(canonicalAsset || contractId);\n    if (!isTrustlineActive) {\n      const addSac = async () => {\n        const addToken = async () => {\n          await dispatch(\n            addTokenId({\n              publicKey,\n              tokenId: contractId,\n              network: networkDetails.network as Networks,\n            }),\n          );\n\n          navigateTo(ROUTES.account);\n        };\n        if (StrKey.isValidEd25519PublicKey(assetRowData.issuer)) {\n          await changeTrustline(true, addToken);\n        } else {\n          await addToken();\n        }\n      };\n      setHandleAddToken(() => addSac);\n\n      if (isVerificationInfoShowing) {\n        setSuspiciousAssetData({\n          domain: assetRowData.domain,\n          code: assetRowData.code,\n          issuer: assetRowData.issuer,\n          image: assetRowData.image,\n          isVerifiedToken: !!isVerifiedToken,\n        });\n        setShowUnverifiedWarning(true);\n      } else {\n        await dispatch(\n          addTokenId({\n            publicKey,\n            tokenId: contractId,\n            network: networkDetails.network as Networks,\n          }),\n        );\n        navigateTo(ROUTES.account);\n      }\n    } else {\n      await dispatch(\n        removeTokenId({\n          contractId,\n          network: networkDetails.network as NETWORKS,\n        }),\n      );\n      navigateTo(ROUTES.account);\n    }\n  };\n\n  useEffect(() => {\n    if (submitStatus === ActionStatus.ERROR && isSigningWithHardwareWallet) {\n      setIsTrustlineErrorShowing(true);\n      setRowButtonShowing(\"\");\n    }\n  }, [submitStatus, isSigningWithHardwareWallet]);\n\n  const isLoading =\n    (isActionPending && assetSubmitting === canonicalAsset) ||\n    assetSubmitting === canonicalAsset;\n\n  return (\n    <div className=\"ManageAssetRowButton\">\n      {isTrustlineActive ? (\n        <div>\n          <div\n            className={`ManageAssetRowButton__ellipsis ${\n              isLoading ? `ManageAssetRowButton__ellipsis--is-pending` : \"\"\n            }`}\n            data-testid={`ManageAssetRowButton__ellipsis-${code}`}\n            onClick={() => {\n              if (!isLoading) {\n                setRowButtonShowing(\n                  rowButtonShowing === canonicalAsset ? \"\" : canonicalAsset,\n                );\n              }\n            }}\n          >\n            <img src={IconEllipsis} alt=\"icon asset options\" />\n          </div>\n          {rowButtonShowing === canonicalAsset ? (\n            <div\n              className=\"ManageAssetRowButton__dropdown\"\n              ref={ManageAssetRowDropdownRef}\n            >\n              <div className=\"ManageAssetRowButton__dropdown__row\">\n                <CopyText textToCopy={canonicalAsset}>\n                  <>\n                    <div className=\"ManageAssetRowButton__label\">\n                      {t(\"Copy address\")}\n                    </div>\n                    <Icon.Copy01 />\n                  </>\n                </CopyText>\n              </div>\n              <div className=\"ManageAssetRowButton__dropdown__row\">\n                <Button\n                  className=\"ManageAssetRowButton__remove\"\n                  size=\"md\"\n                  variant=\"secondary\"\n                  disabled={isActionPending}\n                  isLoading={isLoading}\n                  onClick={() => {\n                    if (isContract) {\n                      handleTokenRowClick({\n                        code,\n                        issuer,\n                        image,\n                        domain,\n                        contract,\n                      });\n                    } else {\n                      handleRowClick({ code, issuer, image, domain });\n                    }\n                  }}\n                  type=\"button\"\n                  data-testid=\"ManageAssetRowButton\"\n                >\n                  <div className=\"ManageAssetRowButton__label\">\n                    {t(\"Remove asset\")}\n                  </div>\n                  {isLoading ? null : (\n                    <img src={IconRemove} alt=\"icon remove\" />\n                  )}\n                </Button>\n              </div>\n              {createPortal(\n                <div\n                  className=\"ManageAssetRowButton__dropdown__background\"\n                  onClick={handleBackgroundClick}\n                ></div>,\n                document.querySelector(\"#modal-root\")!,\n              )}\n            </div>\n          ) : null}\n        </div>\n      ) : (\n        <Button\n          size=\"md\"\n          variant=\"tertiary\"\n          disabled={isActionPending}\n          isLoading={isLoading}\n          onClick={() => {\n            setAssetSubmitting(canonicalAsset || contract);\n            if (isContract) {\n              handleTokenRowClick({ code, issuer, image, domain, contract });\n            } else {\n              handleRowClick({ code, issuer, image, domain });\n            }\n          }}\n          type=\"button\"\n          data-testid=\"ManageAssetRowButton\"\n        >\n          <div className=\"ManageAssetRowButton__label\">{t(\"Add\")}</div>\n          <img src={IconAdd} alt=\"icon add\" />\n        </Button>\n      )}\n      {isTrustlineErrorShowing\n        ? createPortal(\n            <TrustlineError\n              handleClose={() => {\n                setIsTrustlineErrorShowing(false);\n                dispatch(resetSubmitStatus());\n              }}\n            />,\n            document.querySelector(\"#modal-root\")!,\n          )\n        : null}\n    </div>\n  );\n};\n","import { Horizon, StellarToml } from \"stellar-sdk\";\nimport { Horizon as HorizonNext } from \"stellar-sdk-next\";\nimport { NetworkDetails } from \"@shared/constants/stellar\";\nimport { NewAssetFlags } from \"popup/components/manageAssets/ManageAssetRows\";\n\nexport const checkForSuspiciousAsset = async ({\n  code,\n  issuer,\n  domain,\n  server,\n}: {\n  code: string;\n  issuer: string;\n  domain: string;\n  server: Horizon.Server | HorizonNext.Server;\n  networkDetails: NetworkDetails;\n}): Promise<NewAssetFlags> => {\n  // check revocable\n  let isRevocable = false;\n  try {\n    const resp = await server.assets().forCode(code).forIssuer(issuer).call();\n    isRevocable = resp.records[0]\n      ? resp.records[0]?.flags?.auth_revocable\n      : false;\n  } catch (e) {\n    console.error(e);\n  }\n\n  // check domain\n  let isInvalidDomain = false;\n\n  if (domain) {\n    try {\n      const resp = await StellarToml.Resolver.resolve(domain);\n      let found = false;\n      (resp?.CURRENCIES || []).forEach(\n        (c: { code?: string; issuer?: string }) => {\n          if (c.code === code && c.issuer === issuer) {\n            found = true;\n          }\n        },\n      );\n      isInvalidDomain = !found;\n    } catch (e) {\n      console.error(e);\n      isInvalidDomain = true;\n    }\n  }\n\n  return { isRevocable, isInvalidDomain };\n};\n","import React, { useState, useEffect } from \"react\";\nimport { StellarToml } from \"stellar-sdk\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { createPortal } from \"react-dom\";\nimport { ActionStatus, BlockAidScanAssetResult } from \"@shared/api/types\";\n\nimport { AppDispatch } from \"popup/App\";\n\nimport { navigateTo } from \"popup/helpers/navigate\";\nimport {\n  formatDomain,\n  getCanonicalFromAsset,\n  truncateString,\n} from \"helpers/stellar\";\nimport { isContractId } from \"popup/helpers/soroban\";\nimport { useNetworkFees } from \"popup/helpers/useNetworkFees\";\nimport { defaultBlockaidScanAssetResult } from \"@shared/helpers/stellar\";\n\nimport { LoadingBackground } from \"popup/basics/LoadingBackground\";\nimport { ROUTES } from \"popup/constants/routes\";\nimport { hardwareWalletTypeSelector } from \"popup/ducks/accountServices\";\nimport {\n  resetSubmission,\n  transactionSubmissionSelector,\n  ShowOverlayStatus,\n  tokensSelector,\n} from \"popup/ducks/transactionSubmission\";\nimport { AssetIcon } from \"popup/components/account/AccountAssets\";\nimport { HardwareSign } from \"popup/components/hardwareConnect/HardwareSign\";\nimport {\n  ScamAssetWarning,\n  NewAssetWarning,\n  TokenWarning,\n} from \"popup/components/WarningMessages\";\n\nimport { ManageAssetRowButton } from \"../ManageAssetRowButton\";\n\nimport \"./styles.scss\";\n\nexport type ManageAssetCurrency = StellarToml.Api.Currency & {\n  domain: string;\n  contract?: string;\n  icon?: string;\n  isSuspicious?: boolean;\n};\n\nexport interface NewAssetFlags {\n  isInvalidDomain: boolean;\n  isRevocable: boolean;\n}\n\ninterface ManageAssetRowsProps {\n  children?: React.ReactNode;\n  header?: React.ReactNode;\n  assetRows: ManageAssetCurrency[];\n  isVerifiedToken?: boolean;\n  isVerificationInfoShowing?: boolean;\n  verifiedLists?: string[];\n}\n\ninterface SuspiciousAssetData {\n  domain: string;\n  code: string;\n  issuer: string;\n  image: string;\n  isVerifiedToken?: boolean;\n  blockaidData: BlockAidScanAssetResult;\n}\n\nexport const ManageAssetRows = ({\n  children,\n  header,\n  assetRows,\n  isVerifiedToken,\n  isVerificationInfoShowing,\n  verifiedLists,\n}: ManageAssetRowsProps) => {\n  const {\n    accountBalances,\n    submitStatus,\n    hardwareWalletData: { status: hwStatus },\n  } = useSelector(transactionSubmissionSelector);\n  const [assetSubmitting, setAssetSubmitting] = useState(\"\");\n  const dispatch: AppDispatch = useDispatch();\n  const { accountBalanceStatus } = useSelector(tokensSelector);\n  const walletType = useSelector(hardwareWalletTypeSelector);\n  const { recommendedFee } = useNetworkFees();\n\n  const [showBlockedDomainWarning, setShowBlockedDomainWarning] =\n    useState(false);\n  const [showNewAssetWarning, setShowNewAssetWarning] = useState(false);\n  const [showUnverifiedWarning, setShowUnverifiedWarning] = useState(false);\n  const [newAssetFlags, setNewAssetFlags] = useState<NewAssetFlags>({\n    isInvalidDomain: false,\n    isRevocable: false,\n  });\n  const [suspiciousAssetData, setSuspiciousAssetData] = useState({\n    domain: \"\",\n    code: \"\",\n    issuer: \"\",\n    image: \"\",\n    isVerifiedToken: false,\n    blockaidData: defaultBlockaidScanAssetResult,\n  } as SuspiciousAssetData);\n  const [handleAddToken, setHandleAddToken] = useState(\n    null as null | (() => () => Promise<void>),\n  );\n\n  useEffect(\n    () => () => {\n      setAssetSubmitting(\"\");\n    },\n    [],\n  );\n\n  // watch submitStatus if used ledger to send transaction\n  useEffect(() => {\n    if (submitStatus === ActionStatus.SUCCESS) {\n      dispatch(resetSubmission());\n      navigateTo(ROUTES.account);\n    }\n  }, [submitStatus, dispatch]);\n\n  return (\n    <>\n      {hwStatus === ShowOverlayStatus.IN_PROGRESS && walletType && (\n        <HardwareSign walletType={walletType} />\n      )}\n      {showBlockedDomainWarning && (\n        <ScamAssetWarning\n          pillType=\"Trustline\"\n          domain={suspiciousAssetData.domain}\n          code={suspiciousAssetData.code}\n          issuer={suspiciousAssetData.issuer}\n          image={suspiciousAssetData.image}\n          blockaidData={suspiciousAssetData.blockaidData}\n          onClose={() => {\n            setShowBlockedDomainWarning(false);\n          }}\n        />\n      )}\n      {showNewAssetWarning && (\n        <NewAssetWarning\n          domain={suspiciousAssetData.domain}\n          code={suspiciousAssetData.code}\n          issuer={suspiciousAssetData.issuer}\n          image={suspiciousAssetData.image}\n          newAssetFlags={newAssetFlags}\n          onClose={() => {\n            setShowNewAssetWarning(false);\n          }}\n        />\n      )}\n      {showUnverifiedWarning && (\n        <TokenWarning\n          handleAddToken={handleAddToken}\n          domain={suspiciousAssetData.domain}\n          code={suspiciousAssetData.code}\n          onClose={() => {\n            setShowUnverifiedWarning(false);\n          }}\n          isVerifiedToken={!!suspiciousAssetData.isVerifiedToken}\n          verifiedLists={verifiedLists}\n        />\n      )}\n      <div className=\"ManageAssetRows__scrollbar\">\n        {header}\n        <div className=\"ManageAssetRows__content\">\n          {assetRows.map(\n            ({\n              code = \"\",\n              domain,\n              image = \"\",\n              issuer = \"\",\n              name = \"\",\n              contract = \"\",\n              isSuspicious,\n            }) => {\n              if (!accountBalances.balances) {\n                return null;\n              }\n              const isContract = isContractId(contract);\n              const canonicalAsset = getCanonicalFromAsset(code, issuer);\n              const isTrustlineActive = Object.keys(\n                accountBalances.balances,\n              ).some((balance) => balance === canonicalAsset);\n              const isActionPending =\n                submitStatus === ActionStatus.PENDING ||\n                accountBalanceStatus === ActionStatus.PENDING;\n              return (\n                <div\n                  className=\"ManageAssetRows__row\"\n                  key={canonicalAsset}\n                  data-testid=\"ManageAssetRow\"\n                >\n                  <ManageAssetRow\n                    code={code}\n                    issuer={issuer}\n                    image={image}\n                    domain={domain}\n                    name={name}\n                    isSuspicious={isSuspicious}\n                  />\n                  <ManageAssetRowButton\n                    code={code}\n                    contract={contract}\n                    issuer={issuer}\n                    image={image}\n                    domain={domain}\n                    isTrustlineActive={isTrustlineActive}\n                    isActionPending={isActionPending}\n                    isContract={isContract}\n                    isVerifiedToken={!!isVerifiedToken}\n                    isVerificationInfoShowing={!!isVerificationInfoShowing}\n                    setNewAssetFlags={setNewAssetFlags}\n                    setSuspiciousAssetData={setSuspiciousAssetData}\n                    setHandleAddToken={setHandleAddToken}\n                    setShowBlockedDomainWarning={setShowBlockedDomainWarning}\n                    assetSubmitting={assetSubmitting}\n                    setAssetSubmitting={setAssetSubmitting}\n                    setShowNewAssetWarning={setShowNewAssetWarning}\n                    setShowUnverifiedWarning={setShowUnverifiedWarning}\n                    recommendedFee={recommendedFee}\n                  />\n                </div>\n              );\n            },\n          )}\n        </div>\n        {children}\n      </div>\n      {showNewAssetWarning || showBlockedDomainWarning\n        ? createPortal(\n            <LoadingBackground\n              // eslint-disable-next-line @typescript-eslint/no-empty-function\n              onClick={() => {}}\n              isActive\n              isFullScreen\n            />,\n            document.querySelector(\"#modal-root\")!,\n          )\n        : null}\n    </>\n  );\n};\n\ninterface AssetRowData {\n  code?: string;\n  issuer?: string;\n  image?: string;\n  domain: string;\n  name?: string;\n  isSuspicious?: boolean;\n}\n\nexport const ManageAssetRow = ({\n  code = \"\",\n  issuer = \"\",\n  image = \"\",\n  domain,\n  name,\n  isSuspicious = false,\n}: AssetRowData) => {\n  const canonicalAsset = getCanonicalFromAsset(code, issuer);\n  const assetCode = name || code;\n  const truncatedAssetCode =\n    assetCode.length > 20 ? truncateString(assetCode) : assetCode;\n\n  return (\n    <>\n      <AssetIcon\n        assetIcons={code !== \"XLM\" ? { [canonicalAsset]: image } : {}}\n        code={code}\n        issuerKey={issuer}\n        isSuspicious={isSuspicious}\n      />\n      <div className=\"ManageAssetRows__row__info\">\n        <div className=\"ManageAssetRows__row__info__header\">\n          <span data-testid=\"ManageAssetCode\">{truncatedAssetCode}</span>\n        </div>\n        <div\n          className=\"ManageAssetRows__domain\"\n          data-testid=\"ManageAssetDomain\"\n        >\n          {formatDomain(domain)}\n        </div>\n      </div>\n    </>\n  );\n};\n","import { captureException } from \"@sentry/browser\";\nimport { validate } from \"jsonschema\";\nimport {\n  MAINNET_NETWORK_DETAILS,\n  NetworkDetails,\n  NETWORKS,\n  TESTNET_NETWORK_DETAILS,\n} from \"@shared/constants/stellar\";\nimport { AssetsLists, AssetsListKey } from \"@shared/constants/soroban/token\";\n\nimport { getApiStellarExpertUrl } from \"popup/helpers/account\";\nimport { CUSTOM_NETWORK } from \"@shared/helpers/stellar\";\n\nexport const searchAsset = async ({\n  asset,\n  networkDetails,\n  onError,\n}: {\n  asset: any;\n  networkDetails: NetworkDetails;\n  onError: (e: any) => void;\n}) => {\n  try {\n    const res = await fetch(\n      `${getApiStellarExpertUrl(networkDetails)}/asset?search=${asset}`,\n    );\n    return await res.json();\n  } catch (e) {\n    return onError(e);\n  }\n};\n\nexport const schemaValidatedAssetList = async (assetListJson: any) => {\n  let schemaRes;\n  try {\n    schemaRes = await fetch(\n      \"https://raw.githubusercontent.com/orbitlens/stellar-protocol/sep-0042-token-lists/contents/sep-0042/assetlist.schema.json\",\n    );\n  } catch (err) {\n    captureException(\"Error fetching SEP-0042 JSON schema\");\n    return { assets: [] };\n  }\n\n  if (!schemaRes.ok) {\n    captureException(\"Unable to fetch SEP-0042 JSON schema\");\n    return { assets: [] };\n  }\n\n  const schemaResJson = await schemaRes?.json();\n\n  // check against the SEP-0042 schema\n  const validatedList = validate(assetListJson, schemaResJson);\n\n  if (validatedList.errors.length) {\n    return { assets: [], errors: validatedList.errors };\n  }\n\n  return assetListJson;\n};\n\nexport const getNativeContractDetails = (networkDetails: NetworkDetails) => {\n  const NATIVE_CONTRACT_DEFAULTS = {\n    code: \"XLM\",\n    decimals: 7,\n    domain: \"https://stellar.org\",\n    icon: \"\",\n    org: \"\",\n  };\n  switch (networkDetails.network as keyof typeof NETWORKS) {\n    case NETWORKS.PUBLIC:\n      return {\n        ...NATIVE_CONTRACT_DEFAULTS,\n        contract: \"CAS3J7GYLGXMF6TDJBBYYSE3HQ6BBSMLNUQ34T6TZMYMW2EVH34XOWMA\",\n        issuer: \"GDMTVHLWJTHSUDMZVVMXXH6VJHA2ZV3HNG5LYNAZ6RTWB7GISM6PGTUV\",\n      };\n    case NETWORKS.TESTNET:\n      return {\n        ...NATIVE_CONTRACT_DEFAULTS,\n        contract: \"CDLZFC3SYJYDZT7K67VZ75HPJVIEUVNIXF47ZG2FB2RMQQVU2HHGCYSC\",\n        issuer: \"\",\n      };\n    default:\n      return { ...NATIVE_CONTRACT_DEFAULTS, contract: \"\", issuer: \"\" };\n  }\n};\n\nexport interface TokenRecord {\n  code: string;\n  issuer: string;\n  contract: string;\n  org: string;\n  domain: string;\n  icon: string;\n  decimals: number;\n}\n\nexport type VerifiedTokenRecord = TokenRecord & { verifiedLists: string[] };\n\nexport const getVerifiedTokens = async ({\n  networkDetails,\n  contractId,\n  setIsSearching,\n  assetsLists,\n}: {\n  networkDetails: NetworkDetails;\n  contractId: string;\n  setIsSearching?: (isSearching: boolean) => void;\n  assetsLists: AssetsLists;\n}) => {\n  let network = networkDetails.network;\n\n  if (network === CUSTOM_NETWORK) {\n    if (\n      networkDetails.networkPassphrase ===\n      MAINNET_NETWORK_DETAILS.networkPassphrase\n    ) {\n      network = MAINNET_NETWORK_DETAILS.network;\n    }\n    if (\n      networkDetails.networkPassphrase ===\n      TESTNET_NETWORK_DETAILS.networkPassphrase\n    ) {\n      network = TESTNET_NETWORK_DETAILS.network;\n    }\n  }\n\n  const networkLists = assetsLists[network as AssetsListKey];\n  const promiseArr = [];\n  const nativeContract = getNativeContractDetails(networkDetails);\n\n  if (contractId === nativeContract.contract) {\n    return [{ ...nativeContract, verifiedLists: [] }];\n  }\n  // eslint-disable-next-line no-restricted-syntax\n  for (const networkList of networkLists) {\n    const { url = \"\", isEnabled } = networkList;\n\n    if (isEnabled) {\n      const fetchAndParse = async () => {\n        let res;\n        try {\n          res = await fetch(url);\n        } catch (e) {\n          captureException(`Failed to load asset list: ${url}`);\n        }\n\n        return res?.json();\n      };\n\n      promiseArr.push(fetchAndParse());\n    }\n  }\n\n  const promiseRes = await Promise.allSettled(promiseArr);\n\n  const verifiedTokens = [] as VerifiedTokenRecord[];\n\n  let verifiedToken = {} as TokenRecord;\n  const verifiedLists: string[] = [];\n\n  // eslint-disable-next-line no-restricted-syntax\n  for (const r of promiseRes) {\n    if (r.status === \"fulfilled\") {\n      // confirm that this list still adheres to the agreed upon schema\n      const validatedList = await schemaValidatedAssetList(r.value);\n      const list = validatedList?.tokens\n        ? validatedList?.tokens\n        : validatedList?.assets;\n      if (list) {\n        // eslint-disable-next-line no-restricted-syntax\n        for (const record of list) {\n          const regex = new RegExp(contractId, \"i\");\n          if (record.contract && record.contract.match(regex)) {\n            verifiedToken = record;\n            verifiedLists.push(r.value.name as string);\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  if (Object.keys(verifiedToken).length) {\n    verifiedTokens.push({\n      ...verifiedToken,\n      verifiedLists,\n    });\n  }\n\n  if (setIsSearching) {\n    setIsSearching(false);\n  }\n\n  return verifiedTokens;\n};\n","import React, { useState, useRef, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { createPortal } from \"react-dom\";\nimport { Button, Icon, Loader, Notification } from \"@stellar/design-system\";\nimport { useTranslation, Trans } from \"react-i18next\";\nimport { POPUP_HEIGHT } from \"constants/dimensions\";\nimport {\n  Account,\n  Asset,\n  Operation,\n  Horizon,\n  TransactionBuilder,\n} from \"stellar-sdk\";\nimport { captureException } from \"@sentry/browser\";\n\nimport {\n  ActionStatus,\n  BlockAidScanAssetResult,\n  BlockAidScanTxResult,\n} from \"@shared/api/types\";\nimport { getTokenDetails } from \"@shared/api/internal\";\nimport { TokenArgsDisplay } from \"@shared/api/helpers/soroban\";\n\nimport { xlmToStroop, isMainnet, isTestnet } from \"helpers/stellar\";\n\nimport { AppDispatch } from \"popup/App\";\nimport {\n  signFreighterTransaction,\n  submitFreighterTransaction,\n  startHwSign,\n  transactionSubmissionSelector,\n} from \"popup/ducks/transactionSubmission\";\nimport {\n  settingsSelector,\n  settingsNetworkDetailsSelector,\n} from \"popup/ducks/settings\";\nimport { ModalInfo } from \"popup/components/ModalInfo\";\nimport {\n  ManageAssetRow,\n  NewAssetFlags,\n} from \"popup/components/manageAssets/ManageAssetRows\";\nimport { SorobanTokenIcon } from \"popup/components/account/AccountAssets\";\nimport { TrustlineError } from \"popup/components/manageAssets/TrustlineError\";\nimport { LoadingBackground } from \"popup/basics/LoadingBackground\";\nimport { View } from \"popup/basics/layout/View\";\nimport { useNetworkFees } from \"popup/helpers/useNetworkFees\";\nimport {\n  publicKeySelector,\n  hardwareWalletTypeSelector,\n} from \"popup/ducks/accountServices\";\nimport { ROUTES } from \"popup/constants/routes\";\nimport { navigateTo } from \"popup/helpers/navigate\";\nimport { getManageAssetXDR } from \"popup/helpers/getManageAssetXDR\";\nimport { METRIC_NAMES } from \"popup/constants/metricsNames\";\nimport { emitMetric } from \"helpers/metrics\";\nimport IconShieldCross from \"popup/assets/icon-shield-cross.svg\";\nimport IconWarning from \"popup/assets/icon-warning.svg\";\nimport IconUnverified from \"popup/assets/icon-unverified.svg\";\nimport IconNewAsset from \"popup/assets/icon-new-asset.svg\";\nimport IconShieldBlockaid from \"popup/assets/icon-shield-blockaid.svg\";\nimport IconWarningBlockaid from \"popup/assets/icon-warning-blockaid.svg\";\nimport IconWarningBlockaidYellow from \"popup/assets/icon-warning-blockaid-yellow.svg\";\nimport { getVerifiedTokens } from \"popup/helpers/searchAsset\";\nimport { isAssetSuspicious, isBlockaidWarning } from \"popup/helpers/blockaid\";\nimport { CopyValue } from \"../CopyValue\";\n\nimport \"./styles.scss\";\n\nexport enum WarningMessageVariant {\n  default = \"\",\n  highAlert = \"high-alert\",\n  warning = \"warning\",\n}\n\ninterface WarningMessageHeaderProps {\n  header: string;\n  icon: React.ReactNode;\n  variant: WarningMessageVariant;\n  children?: React.ReactNode;\n}\n\nconst WarningMessageHeader = ({\n  header,\n  icon,\n  variant,\n  children,\n}: WarningMessageHeaderProps) => (\n  <div\n    className={`WarningMessage__infoBlock WarningMessage__infoBlock--${variant}`}\n    data-testid=\"WarningMessage\"\n  >\n    <div className=\"WarningMessage__header\">\n      {icon}\n      <div>{header}</div>\n      {children}\n    </div>\n  </div>\n);\n\ninterface WarningMessageProps {\n  header: string;\n  children: React.ReactNode;\n  handleCloseClick?: () => void;\n  isActive?: boolean;\n  variant: WarningMessageVariant;\n}\n\nexport const WarningMessage = ({\n  handleCloseClick,\n  header,\n  isActive = false,\n  variant,\n  children,\n}: WarningMessageProps) => {\n  const { t } = useTranslation();\n  const [isWarningActive, setIsWarningActive] = useState(isActive);\n\n  const WarningInfoBlock = ({\n    children: headerChildren,\n  }: {\n    children?: React.ReactNode;\n  }) => (\n    <WarningMessageHeader\n      header={header}\n      icon={\n        variant ? (\n          <Icon.InfoOctagon className=\"WarningMessage__icon\" />\n        ) : (\n          <Icon.InfoCircle className=\"WarningMessage__default-icon\" />\n        )\n      }\n      variant={variant}\n    >\n      {headerChildren}\n    </WarningMessageHeader>\n  );\n\n  return isWarningActive ? (\n    createPortal(\n      <div className=\"WarningMessage--active\">\n        <WarningInfoBlock />\n        <div className=\"WarningMessage__children-wrapper\">{children}</div>\n        <Button\n          size=\"md\"\n          variant=\"tertiary\"\n          isFullWidth\n          type=\"button\"\n          onClick={() =>\n            handleCloseClick ? handleCloseClick() : setIsWarningActive(false)\n          }\n        >\n          {t(\"Got it\")}\n        </Button>\n      </div>,\n      document.querySelector(\"#modal-root\")!,\n    )\n  ) : (\n    <div\n      className=\"WarningMessage__activate-button\"\n      onClick={() => setIsWarningActive(true)}\n    >\n      <WarningInfoBlock>\n        <div className=\"WarningMessage__link-wrapper\">\n          <Icon.ChevronRight className=\"WarningMessage__link-icon\" />\n        </div>\n      </WarningInfoBlock>\n    </div>\n  );\n};\n\nexport const MemoWarningMessage = ({\n  isMemoRequired,\n}: {\n  isMemoRequired: boolean;\n}) => {\n  const { t } = useTranslation();\n\n  return isMemoRequired ? (\n    <WarningMessage\n      header=\"Memo is required\"\n      variant={WarningMessageVariant.highAlert}\n    >\n      <p>\n        {t(\n          \"A destination account requires the use of the memo field which is not present in the transaction you’re about to sign. Freighter automatically disabled the option to sign this transaction.\",\n        )}\n      </p>\n\n      <p>\n        {t(\n          \"Check the destination account memo requirements and include it in the transaction.\",\n        )}\n      </p>\n    </WarningMessage>\n  ) : null;\n};\n\ninterface FlaggedWarningMessageProps {\n  isMemoRequired: boolean;\n  isSuspicious: boolean;\n  blockaidData: BlockAidScanAssetResult;\n}\n\nexport const FlaggedWarningMessage = ({\n  isMemoRequired,\n  isSuspicious,\n  blockaidData,\n}: FlaggedWarningMessageProps) => (\n  <>\n    {isSuspicious ? (\n      <BlockaidAssetScanLabel blockaidData={blockaidData} />\n    ) : null}\n    <MemoWarningMessage isMemoRequired={isMemoRequired} />\n  </>\n);\n\nexport const FirstTimeWarningMessage = () => {\n  const { t } = useTranslation();\n\n  return (\n    <WarningMessage\n      header=\"First Time Interaction\"\n      variant={WarningMessageVariant.warning}\n    >\n      <p>\n        {t(\n          \"If you believe you have interacted with this domain before, it is possible that scammers have copied the original site and/or made small changes to the domain name, and that this site is a scam.\",\n        )}\n      </p>\n      <p>\n        {t(\n          \"Double check the domain name. If it is incorrect in any way, do not share your public key and contact the site administrator via a verified email or social media account to confirm that this domain is correct.\",\n        )}\n      </p>\n    </WarningMessage>\n  );\n};\n\nexport const BackupPhraseWarningMessage = () => {\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"WarningMessage__backup\">\n      <div className=\"WarningMessage__infoBlock\">\n        <div className=\"WarningMessage__header\">\n          <Icon.InfoOctagon className=\"WarningMessage__icon\" />\n          <div>{t(\"Important\")}</div>\n        </div>\n\n        <p>\n          {t(\n            \"Keep your recovery phrase in a safe and secure place. Anyone who has access to this phrase has access to your account and to the funds in it, so save it in a safe and secure place.\",\n          )}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nconst BlockaidByLine = () => {\n  const { t } = useTranslation();\n  return (\n    <div className=\"ScamAssetWarning__footer\">\n      <img src={IconShieldBlockaid} alt=\"icon shield blockaid\" />\n      {t(\"Powered by \")}\n      <a rel=\"noreferrer\" href=\"https://www.blockaid.io/\" target=\"_blank\">\n        Blockaid\n      </a>\n    </div>\n  );\n};\n\ninterface BlockaidAssetWarningProps {\n  blockaidData: BlockAidScanAssetResult;\n}\n\nexport const BlockaidAssetWarning = ({\n  blockaidData,\n}: BlockaidAssetWarningProps) => {\n  const { t } = useTranslation();\n  const isWarning = isBlockaidWarning(blockaidData.result_type);\n\n  return (\n    <div\n      className={`ScamAssetWarning__box ${\n        isWarning ? \"ScamAssetWarning__box--isWarning\" : \"\"\n      }`}\n      data-testid=\"ScamAssetWarning__box\"\n    >\n      <div className=\"Icon\">\n        <img\n          className=\"ScamAssetWarning__box__icon\"\n          src={isWarning ? IconWarningBlockaidYellow : IconWarningBlockaid}\n          alt=\"icon warning blockaid\"\n        />\n      </div>\n      <div>\n        <div className=\"ScamAssetWarning__description\">\n          {t(\n            `This token was flagged as ${blockaidData.result_type} by Blockaid. Interacting with this token may result in loss of funds and is not recommended for the following reasons`,\n          )}\n          :\n          <ul className=\"ScamAssetWarning__list\">\n            {blockaidData.features &&\n              blockaidData.features.map((f) => (\n                <li key={f.feature_id}>{f.description}</li>\n              ))}\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport const ScamAssetWarning = ({\n  pillType,\n  isSendWarning = false,\n  domain,\n  code,\n  issuer,\n  image,\n  onClose,\n  // eslint-disable-next-line\n  onContinue = () => {},\n  blockaidData,\n}: {\n  pillType: \"Connection\" | \"Trustline\" | \"Transaction\";\n  isSendWarning?: boolean;\n  domain: string;\n  code: string;\n  issuer: string;\n  image: string;\n  onClose: () => void;\n  onContinue?: () => void;\n  blockaidData: BlockAidScanAssetResult;\n}) => {\n  const { t } = useTranslation();\n  const dispatch: AppDispatch = useDispatch();\n  const warningRef = useRef<HTMLDivElement>(null);\n  const { recommendedFee } = useNetworkFees();\n  const networkDetails = useSelector(settingsNetworkDetailsSelector);\n  const publicKey = useSelector(publicKeySelector);\n  const { submitStatus } = useSelector(transactionSubmissionSelector);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const isHardwareWallet = !!useSelector(hardwareWalletTypeSelector);\n  const [isTrustlineErrorShowing, setIsTrustlineErrorShowing] = useState(false);\n\n  const closeOverlay = () => {\n    if (warningRef.current) {\n      warningRef.current.style.bottom = `-${POPUP_HEIGHT}px`;\n    }\n    const timeout = setTimeout(() => {\n      onClose();\n      clearTimeout(timeout);\n    }, 300);\n  };\n\n  // animate entry\n  useEffect(() => {\n    if (warningRef.current) {\n      const timeout = setTimeout(() => {\n        // Adding extra check to fix flaky tests\n        if (warningRef.current) {\n          warningRef.current.style.bottom = \"0\";\n        }\n        clearTimeout(timeout);\n      }, 10);\n    }\n  }, [warningRef]);\n\n  const handleSubmit = async () => {\n    setIsSubmitting(true);\n\n    const server = new Horizon.Server(networkDetails.networkUrl);\n    const sourceAccount: Account = await server.loadAccount(publicKey);\n    const transactionXDR = new TransactionBuilder(sourceAccount, {\n      fee: xlmToStroop(recommendedFee).toFixed(),\n      networkPassphrase: networkDetails.networkPassphrase,\n    })\n      .addOperation(\n        Operation.changeTrust({\n          asset: new Asset(code, issuer),\n        }),\n      )\n      .setTimeout(180)\n      .build()\n      .toXDR();\n\n    if (isHardwareWallet) {\n      // eslint-disable-next-line\n      await dispatch(startHwSign({ transactionXDR, shouldSubmit: true }));\n      emitMetric(METRIC_NAMES.manageAssetAddUnsafeAsset, { code, issuer });\n    } else {\n      const res = await dispatch(\n        signFreighterTransaction({\n          transactionXDR,\n          network: networkDetails.networkPassphrase,\n        }),\n      );\n\n      if (signFreighterTransaction.fulfilled.match(res)) {\n        const submitResp = await dispatch(\n          submitFreighterTransaction({\n            publicKey,\n            signedXDR: res.payload.signedTransaction,\n            networkDetails,\n          }),\n        );\n        if (submitFreighterTransaction.fulfilled.match(submitResp)) {\n          navigateTo(ROUTES.account);\n          emitMetric(METRIC_NAMES.manageAssetAddUnsafeAsset, { code, issuer });\n        } else {\n          setIsTrustlineErrorShowing(true);\n        }\n      }\n    }\n    setIsSubmitting(false);\n  };\n\n  return isTrustlineErrorShowing ? (\n    createPortal(\n      <TrustlineError handleClose={() => closeOverlay()} />,\n      document.querySelector(\"#modal-root\")!,\n    )\n  ) : (\n    <div className=\"ScamAssetWarning\" data-testid=\"ScamAssetWarning\">\n      <View.Content>\n        <ModalInfo\n          code={code}\n          issuer={issuer}\n          domain={domain}\n          image={image}\n          variant={isAssetSuspicious(blockaidData) ? \"malicious\" : \"default\"}\n          asset={code}\n          pillType={pillType}\n        >\n          <div className=\"ScamAssetWarning__wrapper\" ref={warningRef}>\n            <div>\n              <BlockaidAssetWarning blockaidData={blockaidData} />\n            </div>\n            <div className=\"ScamAssetWarning__btns\">\n              {!isSendWarning && (\n                <Button\n                  data-testid=\"ScamAsset__add-asset\"\n                  size=\"md\"\n                  isFullWidth\n                  onClick={handleSubmit}\n                  type=\"button\"\n                  variant=\"error\"\n                  isLoading={\n                    isSubmitting || submitStatus === ActionStatus.PENDING\n                  }\n                >\n                  {t(\"Add anyway\")}\n                </Button>\n              )}\n              <Button\n                size=\"md\"\n                isFullWidth\n                variant=\"secondary\"\n                type=\"button\"\n                onClick={closeOverlay}\n              >\n                {t(\"Cancel\")}\n              </Button>\n              {isSendWarning && (\n                <Button\n                  data-testid=\"ScamAsset__send\"\n                  size=\"md\"\n                  isFullWidth\n                  onClick={onContinue}\n                  type=\"button\"\n                  variant=\"error\"\n                  isLoading={\n                    isSubmitting || submitStatus === ActionStatus.PENDING\n                  }\n                >\n                  {t(\"Continue\")}\n                </Button>\n              )}\n            </div>{\" \"}\n          </div>\n        </ModalInfo>\n      </View.Content>\n    </div>\n  );\n};\n\nexport const NewAssetWarning = ({\n  domain,\n  code,\n  issuer,\n  image,\n  newAssetFlags,\n  onClose,\n}: {\n  domain: string;\n  code: string;\n  issuer: string;\n  image: string;\n  newAssetFlags: NewAssetFlags;\n  onClose: () => void;\n}) => {\n  const { t } = useTranslation();\n  const dispatch: AppDispatch = useDispatch();\n  const warningRef = useRef<HTMLDivElement>(null);\n  const { recommendedFee } = useNetworkFees();\n  const networkDetails = useSelector(settingsNetworkDetailsSelector);\n  const publicKey = useSelector(publicKeySelector);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const isHardwareWallet = !!useSelector(hardwareWalletTypeSelector);\n  const [isTrustlineErrorShowing, setIsTrustlineErrorShowing] = useState(false);\n\n  const { isRevocable, isInvalidDomain } = newAssetFlags;\n\n  useEffect(\n    () => () => {\n      setIsSubmitting(false);\n    },\n    [],\n  );\n\n  // animate entry\n  useEffect(() => {\n    if (warningRef.current) {\n      const timeout = setTimeout(() => {\n        // Adding extra check to fix flaky tests\n        if (warningRef.current) {\n          warningRef.current.style.bottom = \"0\";\n        }\n        clearTimeout(timeout);\n      }, 10);\n    }\n  }, [warningRef]);\n\n  const closeOverlay = () => {\n    if (warningRef.current) {\n      warningRef.current.style.bottom = `-${POPUP_HEIGHT}px`;\n    }\n    const timeout = setTimeout(() => {\n      onClose();\n      clearTimeout(timeout);\n    }, 300);\n  };\n\n  const handleSubmit = async () => {\n    setIsSubmitting(true);\n\n    const server = new Horizon.Server(networkDetails.networkUrl);\n    const transactionXDR = await getManageAssetXDR({\n      publicKey,\n      assetCode: code,\n      assetIssuer: issuer,\n      addTrustline: true,\n      server,\n      recommendedFee,\n      networkDetails,\n    });\n\n    if (isHardwareWallet) {\n      // eslint-disable-next-line\n      await dispatch(startHwSign({ transactionXDR, shouldSubmit: true }));\n      emitMetric(METRIC_NAMES.manageAssetAddUnsafeAsset, { code, issuer });\n    } else {\n      const res = await dispatch(\n        signFreighterTransaction({\n          transactionXDR,\n          network: networkDetails.networkPassphrase,\n        }),\n      );\n\n      if (signFreighterTransaction.fulfilled.match(res)) {\n        const submitResp = await dispatch(\n          submitFreighterTransaction({\n            publicKey,\n            signedXDR: res.payload.signedTransaction,\n            networkDetails,\n          }),\n        );\n        if (submitFreighterTransaction.fulfilled.match(submitResp)) {\n          navigateTo(ROUTES.account);\n          emitMetric(METRIC_NAMES.manageAssetAddUnsafeAsset, { code, issuer });\n        } else {\n          setIsTrustlineErrorShowing(true);\n        }\n      }\n    }\n    setIsSubmitting(false);\n  };\n\n  return isTrustlineErrorShowing ? (\n    createPortal(\n      <TrustlineError handleClose={() => closeOverlay()} />,\n      document.querySelector(\"#modal-root\")!,\n    )\n  ) : (\n    <div className=\"NewAssetWarning\" data-testid=\"NewAssetWarning\">\n      <View.Content>\n        <div className=\"NewAssetWarning__wrapper\" ref={warningRef}>\n          <div\n            className=\"NewAssetWarning__header\"\n            data-testid=\"NewAssetWarningTitle\"\n          >\n            {t(\"Before You Add This Asset\")}\n          </div>\n          <div className=\"NewAssetWarning__description\">\n            {t(\n              \"Please double-check its information and characteristics. This can help you identify fraudulent assets.\",\n            )}\n          </div>\n          <div className=\"NewAssetWarning__row\">\n            <ManageAssetRow\n              code={code}\n              issuer={issuer}\n              image={image}\n              domain={domain}\n            />\n          </div>\n          <hr className=\"NewAssetWarning__list-divider\" />\n          <div className=\"NewAssetWarning__flags\">\n            {isRevocable && (\n              <div className=\"NewAssetWarning__flag\">\n                <div className=\"NewAssetWarning__flag__icon\">\n                  <img src={IconShieldCross} alt=\"revocable\" />\n                </div>\n                <div className=\"NewAssetWarning__flag__content\">\n                  <div className=\"NewAssetWarning__flag__header\">\n                    {t(\"Revocable Asset\")}\n                  </div>\n                  <div className=\"NewAssetWarning__flag__description\">\n                    {t(\n                      \"The asset creator can revoke your access to this asset at anytime\",\n                    )}\n                  </div>\n                </div>\n              </div>\n            )}\n            <div>\n              {isInvalidDomain && (\n                <div className=\"NewAssetWarning__flag\">\n                  <div className=\"NewAssetWarning__flag__icon\">\n                    <img src={IconWarning} alt=\"invalid domain\" />\n                  </div>\n                  <div className=\"NewAssetWarning__flag__content\">\n                    <div className=\"NewAssetWarning__flag__header\">\n                      {t(\"Invalid Format Asset\")}\n                    </div>\n                    <div className=\"NewAssetWarning__flag__description\">\n                      {t(\n                        \"Asset home domain doesn’t exist, TOML file format is invalid, or asset doesn't match currency description\",\n                      )}\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n            <div className=\"NewAssetWarning__btns\">\n              <Button\n                size=\"md\"\n                isFullWidth\n                variant=\"secondary\"\n                type=\"button\"\n                onClick={closeOverlay}\n              >\n                {t(\"Cancel\")}\n              </Button>\n              <Button\n                size=\"md\"\n                isFullWidth\n                variant=\"primary\"\n                onClick={handleSubmit}\n                type=\"button\"\n                isLoading={isSubmitting}\n                data-testid=\"NewAssetWarningAddButton\"\n              >\n                {t(\"Add asset\")}\n              </Button>\n            </div>\n          </div>\n        </div>\n      </View.Content>\n    </div>\n  );\n};\n\nexport const UnverifiedTokenNotification = () => {\n  const { t } = useTranslation();\n\n  return (\n    <Notification\n      title={t(\n        \"This asset is not part of an asset list. Please, double-check the asset you’re interacting with and proceed with care. Freighter uses asset lists to check assets you interact with. You can define your own assets lists in Settings.\",\n      )}\n      variant=\"warning\"\n    />\n  );\n};\n\nexport const TokenWarning = ({\n  domain,\n  code,\n  onClose,\n  isVerifiedToken,\n  verifiedLists = [],\n  handleAddToken,\n}: {\n  domain: string;\n  code: string;\n  onClose: () => void;\n  isVerifiedToken: boolean;\n  verifiedLists?: string[];\n  handleAddToken: null | (() => Promise<void>);\n}) => {\n  const { t } = useTranslation();\n  const warningRef = useRef<HTMLDivElement>(null);\n  const { submitStatus } = useSelector(transactionSubmissionSelector);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const closeOverlay = () => {\n    if (warningRef.current) {\n      warningRef.current.style.marginBottom = `-${POPUP_HEIGHT}px`;\n    }\n    const timeout = setTimeout(() => {\n      onClose();\n      clearTimeout(timeout);\n    }, 300);\n  };\n\n  // animate entry\n  useEffect(() => {\n    if (warningRef.current) {\n      const timeout = setTimeout(() => {\n        // Adding extra check to fix flaky tests\n        if (warningRef.current) {\n          warningRef.current.style.marginBottom = \"0\";\n        }\n        clearTimeout(timeout);\n      }, 10);\n    }\n  }, [warningRef]);\n\n  const handleSubmit = async () => {\n    setIsSubmitting(true);\n    if (handleAddToken) {\n      await handleAddToken();\n    }\n\n    setIsSubmitting(false);\n    closeOverlay();\n  };\n\n  return createPortal(\n    <>\n      <LoadingBackground isActive isOpaque />\n      <div className=\"TokenWarning\" data-testid=\"TokenWarning\">\n        <View.Content>\n          <div className=\"TokenWarning__wrapper\" ref={warningRef}>\n            <div className=\"TokenWarning__heading\">\n              <div className=\"TokenWarning__icon\">\n                <SorobanTokenIcon noMargin />\n              </div>\n              <div className=\"TokenWarning__code\">{code}</div>\n              <div className=\"TokenWarning__domain\">{domain}</div>\n              <div className=\"TokenWarning__description\">\n                <div className=\"TokenWarning__description__icon\">\n                  <Icon.User02 />\n                </div>\n                <div className=\"TokenWarning__description__text\">\n                  {t(\"Add Asset Trustline\")}\n                </div>\n              </div>\n            </div>\n            <div data-testid=\"token-warning-notification\">\n              {isVerifiedToken ? (\n                <Notification\n                  title={`${t(\n                    \"This asset is part of the asset lists\",\n                  )} \"${verifiedLists.join(\", \")}.\"`}\n                  variant=\"primary\"\n                >\n                  {t(\n                    \"Freighter uses asset lists to check assets you interact with. You can define your own assets lists in Settings.\",\n                  )}\n                </Notification>\n              ) : (\n                <UnverifiedTokenNotification />\n              )}\n            </div>\n\n            <div className=\"TokenWarning__flags\">\n              <div className=\"TokenWarning__flags__info\">{t(\"Asset Info\")}</div>\n\n              {isVerifiedToken ? null : (\n                <div className=\"TokenWarning__flag\">\n                  <div className=\"TokenWarning__flag__icon\">\n                    <img src={IconUnverified} alt=\"unverified icon\" />\n                  </div>\n                  <div className=\"TokenWarning_flag__content\">\n                    <div className=\"TokenWarning__flag__header TokenWarning__flag__icon--unverified\">\n                      {t(\"Unverified asset\")}\n                    </div>\n                    <div className=\"TokenWarning__flag__content\">\n                      {t(\"Proceed with caution\")}\n                    </div>\n                  </div>\n                </div>\n              )}\n              <div className=\"TokenWarning__flag\">\n                <div className=\"TokenWarning__flag__icon\">\n                  <img src={IconNewAsset} alt=\"new asset icon\" />\n                </div>\n                <div className=\"TokenWarning_flag__content\">\n                  <div className=\"TokenWarning__flag__header TokenWarning__flag__icon\">\n                    {t(\"New asset\")}\n                  </div>\n                  <div className=\"TokenWarning__flag__content\">\n                    {t(\"This is a relatively new asset\")}\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"TokenWarning__bottom-content\">\n              <div className=\"ScamAssetWarning__btns\">\n                <Button\n                  size=\"md\"\n                  isFullWidth\n                  variant=\"secondary\"\n                  type=\"button\"\n                  onClick={closeOverlay}\n                >\n                  {t(\"Cancel\")}\n                </Button>\n                <Button\n                  data-testid=\"add-asset\"\n                  size=\"md\"\n                  isFullWidth\n                  onClick={handleSubmit}\n                  type=\"button\"\n                  variant=\"primary\"\n                  isLoading={\n                    isSubmitting || submitStatus === ActionStatus.PENDING\n                  }\n                >\n                  {t(\"Add asset\")}\n                </Button>\n              </div>{\" \"}\n            </div>\n          </div>\n        </View.Content>\n      </div>\n    </>,\n    document.querySelector(\"#modal-root\")!,\n  );\n};\n\nexport const TransferWarning = ({\n  transfers,\n}: {\n  transfers: TokenArgsDisplay[];\n}) => {\n  const { t } = useTranslation();\n\n  if (!transfers.length) {\n    return null;\n  }\n\n  return (\n    <WarningMessage\n      header=\"Authorizes a token transfer. Proceed with caution.\"\n      variant={WarningMessageVariant.warning}\n    >\n      <div className=\"TokenTransferWarning\">\n        <p>\n          {t(\n            \"This invocation authorizes the following transfers, please review the invocation tree and confirm that you want to proceed.\",\n          )}\n        </p>\n        {transfers.map((transfer, i) => (\n          <WarningMessageTokenDetails\n            index={i}\n            transfer={transfer}\n            key={`${transfer.contractId}-${transfer.amount}-${transfer.to}`}\n          />\n        ))}\n      </div>\n    </WarningMessage>\n  );\n};\n\nexport const InvokerAuthWarning = () => {\n  const { t } = useTranslation();\n\n  return (\n    <WarningMessage\n      header=\"Your account is signing this authorization. Proceed with caution.\"\n      variant={WarningMessageVariant.warning}\n    >\n      <div className=\"InvokerAuthWarning\">\n        <p>\n          {t(\n            \"This authorization uses the source account's credentials, so you are implicitly authorizing this when you sign the transaction.\",\n          )}\n        </p>\n      </div>\n    </WarningMessage>\n  );\n};\n\nexport const UnverifiedTokenTransferWarning = ({\n  transfers,\n}: {\n  transfers: TokenArgsDisplay[];\n}) => {\n  const { t } = useTranslation();\n  const { networkDetails, assetsLists } = useSelector(settingsSelector);\n  const [isUnverifiedToken, setIsUnverifiedToken] = useState(false);\n\n  useEffect(() => {\n    if (!isMainnet(networkDetails) && !isTestnet(networkDetails)) {\n      return;\n    }\n    const fetchVerifiedTokens = async () => {\n      // eslint-disable-next-line\n      for (let j = 0; j < transfers.length; j += 1) {\n        const c = transfers[j].contractId;\n        const verifiedTokens = await getVerifiedTokens({\n          contractId: c,\n          networkDetails,\n          assetsLists,\n        });\n        if (!verifiedTokens.length) {\n          setIsUnverifiedToken(true);\n        }\n      }\n    };\n\n    fetchVerifiedTokens();\n  }, [networkDetails, transfers, assetsLists]);\n\n  return isUnverifiedToken ? (\n    <WarningMessage\n      header=\"This asset is not on an asset list\"\n      variant={WarningMessageVariant.default}\n    >\n      <div className=\"TokenTransferWarning\">\n        <p>\n          {t(\n            `This asset is not part of any of your enabled asset lists (${networkDetails.network})`,\n          )}\n        </p>\n      </div>\n    </WarningMessage>\n  ) : null;\n};\n\nconst WarningMessageTokenDetails = ({\n  transfer,\n  index,\n}: {\n  transfer: { contractId: string; amount: string; to: string };\n  index: number;\n}) => {\n  const publicKey = useSelector(publicKeySelector);\n  const networkDetails = useSelector(settingsNetworkDetailsSelector);\n\n  const [isLoadingTokenDetails, setLoadingTokenDetails] = React.useState(false);\n  const [tokenDetails, setTokenDetails] = React.useState(\n    {} as Record<string, { name: string; symbol: string }>,\n  );\n  React.useEffect(() => {\n    async function _getTokenDetails() {\n      setLoadingTokenDetails(true);\n      const _tokenDetails = {} as Record<\n        string,\n        { name: string; symbol: string }\n      >;\n      try {\n        const tokenDetailsResponse = await getTokenDetails({\n          contractId: transfer.contractId,\n          publicKey,\n          networkDetails,\n        });\n\n        if (!tokenDetailsResponse) {\n          throw new Error(\"failed to fetch token details\");\n        }\n        _tokenDetails[transfer.contractId] = tokenDetailsResponse;\n      } catch (error) {\n        // falls back to only showing contract ID\n        captureException(\n          `Failed to fetch token details - ${JSON.stringify(error)} - ${\n            transfer.contractId\n          } - ${networkDetails.network}`,\n        );\n        console.error(error);\n      }\n      setTokenDetails(_tokenDetails);\n      setLoadingTokenDetails(false);\n    }\n    _getTokenDetails();\n  }, [transfer.contractId, networkDetails, publicKey]);\n\n  return (\n    <div className=\"TokenDetails\">\n      <p className=\"FnName\">TRANSFER #{index + 1}:</p>\n      {/* eslint-disable-next-line */}\n      {isLoadingTokenDetails ? (\n        <div className=\"TokenDetails__loader\">\n          <Loader size=\"1rem\" />\n        </div>\n      ) : tokenDetails[transfer.contractId] ? (\n        <p>\n          <span className=\"InlineLabel\">Token:</span>{\" \"}\n          {`(${\n            tokenDetails[transfer.contractId].name === \"native\"\n              ? \"XLM\"\n              : tokenDetails[transfer.contractId].symbol\n          }) ${tokenDetails[transfer.contractId].name}`}\n        </p>\n      ) : (\n        <p>\n          <span className=\"InlineLabel\">Token: Unknown</span>\n        </p>\n      )}\n      <p>\n        <span className=\"InlineLabel\">Contract ID:</span>\n        <CopyValue\n          value={transfer.contractId}\n          displayValue={transfer.contractId}\n        />\n      </p>\n      <p>\n        <span className=\"InlineLabel\">Amount:</span> {transfer.amount}\n      </p>\n      <p>\n        <span className=\"InlineLabel\">To:</span>\n        <CopyValue value={transfer.to} displayValue={transfer.to} />\n      </p>\n    </div>\n  );\n};\n\nexport const SSLWarningMessage = ({ url }: { url: string }) => {\n  const { t } = useTranslation();\n\n  return (\n    <WarningMessage\n      handleCloseClick={() => window.close()}\n      isActive\n      variant={WarningMessageVariant.warning}\n      header={t(\"WEBSITE CONNECTION IS NOT SECURE\")}\n    >\n      <p>\n        <Trans domain={url}>\n          The website <strong>{url}</strong> does not use an SSL certificate.\n          For additional safety Freighter only works with websites that provide\n          an SSL certificate by default. You may enable connection to domains\n          that do not use an SSL certificate in Settings &gt; Security &gt;\n          Advanced Settings.\n        </Trans>\n      </p>\n    </WarningMessage>\n  );\n};\n\nexport const BlockAidMaliciousLabel = () => {\n  const { t } = useTranslation();\n  return (\n    <div\n      className=\"ScanLabel ScanMalicious\"\n      data-testid=\"blockaid-malicious-label\"\n    >\n      <div className=\"Icon\">\n        <Icon.InfoOctagon className=\"WarningMessage__icon\" />\n      </div>\n      <p className=\"Message\">{t(\"This site was flagged as malicious\")}</p>\n    </div>\n  );\n};\n\nexport const BlockAidMissLabel = () => {\n  const { t } = useTranslation();\n  return (\n    <div className=\"ScanLabel ScanMiss\" data-testid=\"blockaid-miss-label\">\n      <div className=\"Icon\">\n        <Icon.InfoOctagon className=\"WarningMessage__icon\" />\n      </div>\n      <p className=\"Message\">\n        {t(\"Unable to scan site for malicious behavior\")}\n      </p>\n    </div>\n  );\n};\n\nexport const BlockAidSiteScanLabel = ({\n  status,\n  isMalicious,\n}: {\n  status: \"hit\" | \"miss\";\n  isMalicious: boolean;\n}) => {\n  if (status === \"miss\") {\n    return <BlockAidMissLabel />;\n  }\n\n  if (isMalicious) {\n    return <BlockAidMaliciousLabel />;\n  }\n\n  // benign case should not show anything for now\n  return <React.Fragment />;\n};\n\nexport const BlockaidTxScanLabel = ({\n  scanResult,\n  isPopup = false,\n}: {\n  scanResult: BlockAidScanTxResult;\n  isPopup?: boolean;\n}) => {\n  const { t } = useTranslation();\n  const { simulation, validation } = scanResult;\n\n  if (simulation && \"error\" in simulation) {\n    const header = t(\"This transaction is expected to fail\");\n    if (isPopup) {\n      return (\n        <BlockaidWarningModal\n          header={header}\n          description={[simulation.error]}\n          isWarning\n        />\n      );\n    }\n    return (\n      <WarningMessage header={header} variant={WarningMessageVariant.warning}>\n        <div>\n          <p>{t(simulation.error)}</p>\n        </div>\n      </WarningMessage>\n    );\n  }\n\n  let message = null;\n  if (validation && \"result_type\" in validation) {\n    switch (validation.result_type) {\n      case \"Malicious\": {\n        message = {\n          header: t(\"This transaction was flagged as malicious\"),\n          variant: WarningMessageVariant.highAlert,\n          message: validation.description,\n        };\n\n        if (isPopup) {\n          return (\n            <BlockaidWarningModal\n              header={message.header}\n              description={[message.message]}\n              isWarning={false}\n            />\n          );\n        }\n\n        return (\n          <WarningMessage header={message.header} variant={message.variant}>\n            <div>\n              <p>{t(message.message)}</p>\n            </div>\n          </WarningMessage>\n        );\n      }\n\n      case \"Warning\": {\n        message = {\n          header: \"This transaction was flagged as suspicious\",\n          variant: WarningMessageVariant.warning,\n          message: validation.description,\n        };\n\n        if (isPopup) {\n          return (\n            <BlockaidWarningModal\n              header={message.header}\n              description={[message.message]}\n              isWarning\n            />\n          );\n        }\n\n        return (\n          <WarningMessage header={message.header} variant={message.variant}>\n            <div>\n              <p>{t(message.message)}</p>\n            </div>\n          </WarningMessage>\n        );\n      }\n\n      case \"Benign\":\n      default:\n    }\n  }\n  return <></>;\n};\n\nexport const BlockaidAssetScanLabel = ({\n  blockaidData,\n}: {\n  blockaidData: BlockAidScanAssetResult;\n}) => {\n  const isWarning = isBlockaidWarning(blockaidData.result_type);\n\n  return (\n    <BlockaidWarningModal\n      header={`This asset was flagged as ${blockaidData.result_type}`}\n      description={blockaidData.features?.map((f) => f.description) || []}\n      isWarning={isWarning}\n      isAsset\n    />\n  );\n};\n\ninterface BlockaidWarningModalProps {\n  header: string;\n  description: string[];\n  handleCloseClick?: () => void;\n  isActive?: boolean;\n  isWarning: boolean;\n  isAsset?: boolean;\n}\n\nexport const BlockaidWarningModal = ({\n  handleCloseClick,\n  header,\n  description,\n  isActive = false,\n  isWarning,\n  isAsset = false,\n}: BlockaidWarningModalProps) => {\n  const { t } = useTranslation();\n  const [isModalActive, setIsModalActive] = useState(isActive);\n  const variant = isWarning\n    ? WarningMessageVariant.warning\n    : WarningMessageVariant.highAlert;\n\n  const WarningInfoBlock = () => (\n    <WarningMessageHeader\n      header={header}\n      icon={\n        <img\n          src={isWarning ? IconWarningBlockaidYellow : IconWarningBlockaid}\n          alt=\"icon warning blockaid\"\n        />\n      }\n      variant={variant}\n    >\n      <div className=\"WarningMessage__link-wrapper\">\n        <Icon.ChevronRight className=\"WarningMessage__link-icon\" />\n      </div>\n    </WarningMessageHeader>\n  );\n\n  const truncatedDescription = (desc: string) => {\n    const arr = desc.split(\" \");\n\n    return arr.map((word) => {\n      if (word.length > 30) {\n        return (\n          <>\n            <CopyValue\n              value={word}\n              displayValue={`${word.slice(0, 4)}...${word.slice(-4)}`}\n            />{\" \"}\n          </>\n        );\n      }\n\n      return <span key={word}>{word} </span>;\n    });\n  };\n\n  return isModalActive ? (\n    <>\n      <WarningInfoBlock />\n      {createPortal(\n        <div\n          className=\"BlockaidWarningModal\"\n          data-testid={`BlockaidWarningModal__${isAsset ? \"asset\" : \"tx\"}`}\n        >\n          <LoadingBackground isActive />\n          <div className=\"BlockaidWarningModal__modal\">\n            <div\n              className={`BlockaidWarningModal__modal__icon ${\n                isWarning ? \"BlockaidWarningModal__modal__icon--isWarning\" : \"\"\n              }`}\n            >\n              <img\n                className=\"BlockaidWarningModal__modal__image\"\n                src={\n                  isWarning ? IconWarningBlockaidYellow : IconWarningBlockaid\n                }\n                alt=\"icon warning blockaid\"\n              />\n            </div>\n\n            <div className=\"BlockaidWarningModal__modal__title\">{header}</div>\n            <div className=\"BlockaidWarningModal__modal__description\">\n              {t(\n                `${header} by Blockaid. Interacting with this ${\n                  isAsset ? \"token\" : \"transaction\"\n                } may result in loss of funds and is not recommended for the following reasons`,\n              )}\n              :\n              <ul className=\"ScamAssetWarning__list\">\n                {description.map((d) => (\n                  <li key={d.replace(\" \", \"-\")}>{truncatedDescription(d)}</li>\n                ))}\n              </ul>\n            </div>\n            <div className=\"BlockaidWarningModal__modal__byline\">\n              <BlockaidByLine />\n            </div>\n\n            <Button\n              data-testid=\"BlockaidWarningModal__button\"\n              size=\"md\"\n              variant=\"tertiary\"\n              isFullWidth\n              type=\"button\"\n              onClick={() =>\n                handleCloseClick ? handleCloseClick() : setIsModalActive(false)\n              }\n            >\n              {t(\"Got it\")}\n            </Button>\n          </div>\n        </div>,\n        document.querySelector(\"#modal-root\")!,\n      )}\n    </>\n  ) : (\n    <div\n      className=\"WarningMessage__activate-button\"\n      onClick={() => setIsModalActive(true)}\n      data-testid={`BlockaidWarningModal__button__${isAsset ? \"asset\" : \"tx\"}`}\n    >\n      <WarningInfoBlock />\n    </div>\n  );\n};\n\nexport const BlockaidMaliciousTxInternalWarning = ({\n  description,\n}: {\n  description: string;\n}) => {\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"ScamAssetWarning__box\" data-testid=\"ScamAssetWarning__box\">\n      <div className=\"Icon\">\n        <img\n          className=\"ScamAssetWarning__box__icon\"\n          src={IconWarningBlockaid}\n          alt=\"icon warning blockaid\"\n        />\n      </div>\n      <div>\n        <div className=\"ScamAssetWarning__description\">\n          {t(\n            \"This transaction was flagged by Blockaid for the following reasons\",\n          )}\n          :<div>{description}</div>\n        </div>\n        <div className=\"ScamAssetWarning__footer\">\n          <img src={IconShieldBlockaid} alt=\"icon shield blockaid\" />\n          {t(\"Powered by \")}\n          <a rel=\"noreferrer\" href=\"https://www.blockaid.io/\" target=\"_blank\">\n            Blockaid\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { BigNumber } from \"bignumber.js\";\nimport { useTranslation } from \"react-i18next\";\nimport { IconButton, Icon, Button } from \"@stellar/design-system\";\n\nimport { HorizonOperation, AssetType } from \"@shared/api/types\";\nimport { NetworkDetails } from \"@shared/constants/stellar\";\nimport { defaultBlockaidScanAssetResult } from \"@shared/helpers/stellar\";\nimport {\n  getAvailableBalance,\n  getIsPayment,\n  getIsSwap,\n  getStellarExpertUrl,\n  getRawBalance,\n  getIssuerFromBalance,\n  isSorobanIssuer,\n} from \"popup/helpers/account\";\nimport { useAssetDomain } from \"popup/helpers/useAssetDomain\";\nimport { navigateTo } from \"popup/helpers/navigate\";\nimport { formatTokenAmount, isContractId } from \"popup/helpers/soroban\";\nimport { getAssetFromCanonical } from \"helpers/stellar\";\nimport { ROUTES } from \"popup/constants/routes\";\n\nimport {\n  historyItemDetailViewProps,\n  HistoryItem,\n} from \"popup/components/accountHistory/HistoryItem\";\nimport { HistoryList } from \"popup/components/accountHistory/HistoryList\";\nimport { AssetNetworkInfo } from \"popup/components/accountHistory/AssetNetworkInfo\";\nimport {\n  TransactionDetail,\n  TransactionDetailProps,\n} from \"popup/components/accountHistory/TransactionDetail\";\nimport { SlideupModal } from \"popup/components/SlideupModal\";\nimport { SubviewHeader } from \"popup/components/SubviewHeader\";\nimport { View } from \"popup/basics/layout/View\";\nimport {\n  saveAsset,\n  saveDestinationAsset,\n  saveIsToken,\n  transactionSubmissionSelector,\n} from \"popup/ducks/transactionSubmission\";\nimport { AppDispatch } from \"popup/App\";\nimport StellarLogo from \"popup/assets/stellar-logo.png\";\nimport { formatAmount } from \"popup/helpers/formatters\";\nimport { isAssetSuspicious } from \"popup/helpers/blockaid\";\nimport { Loading } from \"popup/components/Loading\";\nimport { BlockaidAssetWarning } from \"popup/components/WarningMessages\";\n\nimport \"./styles.scss\";\n\ninterface AssetDetailProps {\n  assetOperations: HorizonOperation[];\n  accountBalances: AssetType[];\n  networkDetails: NetworkDetails;\n  publicKey: string;\n  selectedAsset: string;\n  subentryCount: number;\n  setSelectedAsset: (selectedAsset: string) => void;\n}\n\nexport const AssetDetail = ({\n  assetOperations,\n  accountBalances,\n  networkDetails,\n  publicKey,\n  selectedAsset,\n  setSelectedAsset,\n  subentryCount,\n}: AssetDetailProps) => {\n  const dispatch: AppDispatch = useDispatch();\n  const isNative = selectedAsset === \"native\";\n\n  const canonical = getAssetFromCanonical(selectedAsset);\n  const isSorobanAsset = canonical.issuer && isSorobanIssuer(canonical.issuer);\n\n  const { accountBalances: balances } = useSelector(\n    transactionSubmissionSelector,\n  );\n  const isSuspicious = isAssetSuspicious(\n    balances.balances?.[selectedAsset]?.blockaidData,\n  );\n\n  const balance = getRawBalance(accountBalances, selectedAsset)!;\n\n  const assetIssuer = balance ? getIssuerFromBalance(balance) : \"\";\n  const total =\n    balance && \"decimals\" in balance\n      ? formatTokenAmount(\n          new BigNumber(balance.total || \"0\"),\n          Number(balance.decimals),\n        )\n      : (balance && new BigNumber(balance?.total).toString()) || \"0\";\n\n  const balanceAvailable = getAvailableBalance({\n    accountBalances,\n    selectedAsset,\n    subentryCount,\n  });\n\n  const availableTotal = `${formatAmount(balanceAvailable)} ${canonical.code}`;\n  const displayTotal = `${formatAmount(total)} ${canonical.code}`;\n\n  const stellarExpertUrl = getStellarExpertUrl(networkDetails);\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isDetailViewShowing, setIsDetailViewShowing] = useState(false);\n\n  const { t } = useTranslation();\n\n  const defaultDetailViewProps: TransactionDetailProps = {\n    ...historyItemDetailViewProps,\n    setIsDetailViewShowing,\n  };\n  const [detailViewProps, setDetailViewProps] = useState(\n    defaultDetailViewProps,\n  );\n\n  const { assetDomain, error: assetError } = useAssetDomain({\n    assetIssuer,\n  });\n\n  const isContract = isContractId(assetIssuer);\n\n  if (!assetOperations && !isSorobanAsset) {\n    return null;\n  }\n\n  if (assetIssuer && !assetDomain && !assetError && !isSorobanAsset) {\n    // if we have an asset issuer, wait until we have the asset domain before continuing\n    return <Loading />;\n  }\n\n  return isDetailViewShowing ? (\n    <TransactionDetail {...detailViewProps} />\n  ) : (\n    <React.Fragment>\n      <SubviewHeader\n        title={canonical.code}\n        subtitle={\n          isNative ? (\n            <div className=\"AssetDetail__available\">\n              <span className=\"AssetDetail__available__copy\">\n                {availableTotal} {t(\"available\")}\n              </span>\n              <span\n                className=\"AssetDetail__available__icon\"\n                onClick={() => setIsModalOpen(true)}\n              >\n                <IconButton\n                  altText=\"Available Info\"\n                  icon={<Icon.InfoCircle />}\n                />{\" \"}\n              </span>\n            </div>\n          ) : null\n        }\n        customBackAction={() => setSelectedAsset(\"\")}\n      />\n      <View.Content>\n        <div className=\"AssetDetail__wrapper\">\n          {balance && \"name\" in balance && (\n            <span className=\"AssetDetail__token-name\">{balance.name}</span>\n          )}\n          <div className=\"AssetDetail__total\">\n            <div\n              className={`AssetDetail__total__copy ${\n                isSuspicious ? \"AssetDetail__total__copy--isSuspicious\" : \"\"\n              }`}\n              data-testid=\"asset-detail-available-copy\"\n            >\n              {displayTotal}\n            </div>\n            <div className=\"AssetDetail__total__network\">\n              <AssetNetworkInfo\n                assetCode={canonical.code}\n                assetIssuer={assetIssuer}\n                assetType={\n                  (balance && \"token\" in balance && balance?.token.type) || \"\"\n                }\n                assetDomain={assetDomain}\n                contractId={\n                  balance && \"decimals\" in balance\n                    ? balance.token.issuer.key\n                    : undefined\n                }\n              />\n            </div>\n          </div>\n          {isSuspicious ? null : (\n            <div className=\"AssetDetail__actions\">\n              {balance?.total &&\n              new BigNumber(balance?.total).toNumber() > 0 ? (\n                <>\n                  <Button\n                    size=\"md\"\n                    variant=\"tertiary\"\n                    onClick={() => {\n                      dispatch(saveAsset(selectedAsset));\n                      if (isContract) {\n                        dispatch(saveIsToken(true));\n                      } else {\n                        dispatch(saveIsToken(false));\n                      }\n                      navigateTo(ROUTES.sendPayment);\n                    }}\n                  >\n                    {t(\"SEND\")}\n                  </Button>\n                  {!isSorobanAsset && (\n                    <Button\n                      size=\"md\"\n                      variant=\"tertiary\"\n                      onClick={() => {\n                        dispatch(saveAsset(selectedAsset));\n                        navigateTo(ROUTES.swap);\n                      }}\n                    >\n                      {t(\"SWAP\")}\n                    </Button>\n                  )}\n                </>\n              ) : (\n                <Button\n                  size=\"md\"\n                  variant=\"tertiary\"\n                  onClick={() => {\n                    dispatch(saveDestinationAsset(selectedAsset));\n                    navigateTo(ROUTES.swap);\n                  }}\n                >\n                  {t(\"SWAP\")}\n                </Button>\n              )}\n            </div>\n          )}\n          <div className=\"AssetDetail__scam-warning\">\n            {isSuspicious && (\n              <BlockaidAssetWarning\n                blockaidData={\n                  balances.balances?.[selectedAsset]?.blockaidData ||\n                  defaultBlockaidScanAssetResult\n                }\n              />\n            )}\n          </div>\n\n          {assetOperations.length ? (\n            <HistoryList assetDetail>\n              <>\n                {assetOperations.map((operation) => {\n                  const historyItemOperation = {\n                    ...operation,\n                    isPayment: getIsPayment(operation.type),\n                    isSwap: getIsSwap(operation),\n                  } as any; // TODO: isPayment/isSwap overload op type\n                  return (\n                    <HistoryItem\n                      key={operation.id}\n                      accountBalances={balances}\n                      operation={historyItemOperation}\n                      publicKey={publicKey}\n                      url={stellarExpertUrl}\n                      networkDetails={networkDetails}\n                      setDetailViewProps={setDetailViewProps}\n                      setIsDetailViewShowing={setIsDetailViewShowing}\n                    />\n                  );\n                })}\n              </>\n            </HistoryList>\n          ) : (\n            <div className=\"AssetDetail__empty\">\n              {t(\"No transactions to show\")}\n            </div>\n          )}\n        </div>\n      </View.Content>\n      {/* TODO: fix the slideup modal */}\n      {isNative && (\n        <SlideupModal isModalOpen={isModalOpen} setIsModalOpen={setIsModalOpen}>\n          <div className=\"AssetDetail__info-modal\">\n            <div className=\"AssetDetail__info-modal__total-box\">\n              <div className=\"AssetDetail__info-modal__asset-code\">\n                <img src={StellarLogo} alt=\"Network icon\" />{\" \"}\n                <div>{canonical.code}</div>\n              </div>\n              <div>{displayTotal}</div>\n            </div>\n            <div className=\"AssetDetail__info-modal__available-box\">\n              <div className=\"AssetDetail__info-modal__balance-row\">\n                <div>{t(\"Total Balance\")}</div>\n                <div>{displayTotal}</div>\n              </div>\n              <div className=\"AssetDetail__info-modal__balance-row\">\n                <div>{t(\"Reserved Balance*\")}</div>\n                {balance &&\n                \"available\" in balance &&\n                balance?.available &&\n                balance?.total ? (\n                  <div>\n                    {formatAmount(\n                      new BigNumber(balanceAvailable)\n                        .minus(new BigNumber(balance?.total))\n                        .toString(),\n                    )}{\" \"}\n                    {canonical.code}\n                  </div>\n                ) : null}\n              </div>\n              <div className=\"AssetDetail__info-modal__total-available-row\">\n                <div>{t(\"Total Available\")}</div>\n                <div>{availableTotal}</div>\n              </div>\n            </div>\n            <div className=\"AssetDetail__info-modal__footnote\">\n              {t(\n                \"* All Stellar accounts must maintain a minimum balance of lumens.\",\n              )}{\" \"}\n              <a\n                href=\"https://developers.stellar.org/docs/glossary/minimum-balance/\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                {t(\"Learn More\")}\n              </a>\n            </div>\n          </div>\n        </SlideupModal>\n      )}\n    </React.Fragment>\n  );\n};\n","import { Button, Notification } from \"@stellar/design-system\";\nimport { Formik, Form } from \"formik\";\nimport React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useDispatch } from \"react-redux\";\n\nimport { fundAccount } from \"popup/ducks/accountServices\";\nimport { ROUTES } from \"popup/constants/routes\";\nimport { navigateTo } from \"popup/helpers/navigate\";\n\nimport \"./styles.scss\";\n\nexport const NotFundedMessage = ({\n  canUseFriendbot,\n  publicKey,\n  setIsAccountFriendbotFunded,\n}: {\n  canUseFriendbot: boolean;\n  publicKey: string;\n  setIsAccountFriendbotFunded: (isAccountFriendbotFunded: boolean) => void;\n}) => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n\n  const handleFundAccount = async () => {\n    // eslint-disable-next-line\n    await dispatch(fundAccount(publicKey));\n    setIsAccountFriendbotFunded(true);\n  };\n\n  return (\n    <div className=\"NotFunded\" data-testid=\"not-funded\">\n      <Notification\n        variant=\"primary\"\n        title={t(\"To start using this account, fund it with at least 1 XLM.\")}\n      >\n        <a\n          className=\"NotFunded__link\"\n          href=\"https://developers.stellar.org/docs/tutorials/create-account/#create-account\"\n          rel=\"noreferrer\"\n          target=\"_blank\"\n        >\n          {t(\"Learn more about account creation\")}\n        </a>\n      </Notification>\n\n      <div className=\"NotFunded__spacer\" />\n\n      <Button\n        variant=\"secondary\"\n        size=\"md\"\n        isFullWidth\n        onClick={() => navigateTo(ROUTES.viewPublicKey)}\n      >\n        {t(\"Add XLM\")}\n      </Button>\n\n      <div className=\"NotFunded__spacer\" />\n\n      {canUseFriendbot && (\n        <Formik initialValues={{}} onSubmit={handleFundAccount}>\n          {({ isSubmitting }) => (\n            <Form>\n              <Button\n                variant=\"primary\"\n                size=\"md\"\n                isFullWidth\n                isLoading={isSubmitting}\n              >\n                {t(\"Fund with Friendbot\")}\n              </Button>\n            </Form>\n          )}\n        </Formik>\n      )}\n    </div>\n  );\n};\n","import { METRIC_NAMES } from \"popup/constants/metricsNames\";\n\nimport { registerHandler, emitMetric } from \"helpers/metrics\";\n\nimport {\n  createAccount,\n  confirmPassword,\n  confirmMnemonicPhrase,\n  recoverAccount,\n} from \"popup/ducks/accountServices\";\nimport { AppState } from \"popup/App\";\n\nregisterHandler<AppState>(createAccount.fulfilled, () => {\n  emitMetric(METRIC_NAMES.accountCreatorSuccess);\n});\nregisterHandler<AppState>(createAccount.rejected, (_state, action) => {\n  const { errorMessage } = action.payload;\n\n  emitMetric(METRIC_NAMES.accountCreatorReject, {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    error_type: errorMessage,\n  });\n});\n\nregisterHandler<AppState>(confirmPassword.fulfilled, () => {\n  emitMetric(METRIC_NAMES.confirmPasswordSuccess);\n});\nregisterHandler<AppState>(confirmPassword.rejected, (_state, action) => {\n  const { errorMessage } = action.payload;\n\n  emitMetric(METRIC_NAMES.confirmPasswordFail, {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    error_type: errorMessage,\n  });\n});\n\nregisterHandler<AppState>(confirmMnemonicPhrase.fulfilled, () => {\n  emitMetric(METRIC_NAMES.accountCreatorMnemonicConfirmPhrase);\n});\nregisterHandler<AppState>(confirmMnemonicPhrase.rejected, (_state, action) => {\n  const { errorMessage } = action.payload;\n\n  emitMetric(METRIC_NAMES.accountCreatorConfirmMnemonicFail, {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    error_type: errorMessage,\n  });\n});\n\nregisterHandler<AppState>(recoverAccount.fulfilled, () => {\n  emitMetric(METRIC_NAMES.recoverAccountSuccess);\n});\nregisterHandler<AppState>(recoverAccount.rejected, (_state, action) => {\n  const { errorMessage } = action.payload;\n\n  emitMetric(METRIC_NAMES.recoverAccountFail, {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    error_type: errorMessage,\n  });\n});\n","import React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  CopyText,\n  Icon,\n  NavButton,\n  Notification,\n} from \"@stellar/design-system\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { getAccountHistory } from \"@shared/api/internal\";\nimport {\n  AccountBalancesInterface,\n  ActionStatus,\n  AssetType,\n} from \"@shared/api/types\";\n\nimport {\n  settingsNetworkDetailsSelector,\n  settingsSorobanSupportedSelector,\n  settingsSelector,\n} from \"popup/ducks/settings\";\nimport { View } from \"popup/basics/layout/View\";\nimport {\n  accountStatusSelector,\n  accountNameSelector,\n  allAccountsSelector,\n  publicKeySelector,\n} from \"popup/ducks/accountServices\";\nimport {\n  getAssetIcons,\n  getAssetDomains,\n  transactionSubmissionSelector,\n  resetSubmission,\n  resetAccountBalanceStatus,\n  getAccountBalances,\n  getSoroswapTokens,\n} from \"popup/ducks/transactionSubmission\";\nimport { ROUTES } from \"popup/constants/routes\";\nimport {\n  AssetOperations,\n  sortBalances,\n  sortOperationsByAsset,\n} from \"popup/helpers/account\";\nimport { navigateTo } from \"popup/helpers/navigate\";\nimport { isFullscreenMode } from \"popup/helpers/isFullscreenMode\";\nimport { useIsSoroswapEnabled } from \"popup/helpers/useIsSwap\";\nimport { AccountAssets } from \"popup/components/account/AccountAssets\";\nimport { AccountHeader } from \"popup/components/account/AccountHeader\";\nimport { AccountOptionsDropdown } from \"popup/components/account/AccountOptionsDropdown\";\nimport { AssetDetail } from \"popup/components/account/AssetDetail\";\nimport { Loading } from \"popup/components/Loading\";\nimport { NotFundedMessage } from \"popup/components/account/NotFundedMessage\";\n\nimport \"popup/metrics/authServices\";\n\nimport \"./styles.scss\";\n\nexport const defaultAccountBalances = {\n  balances: null,\n  isFunded: null,\n} as AccountBalancesInterface;\n\nexport const Account = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const { accountBalances, assetIcons, accountBalanceStatus } = useSelector(\n    transactionSubmissionSelector,\n  );\n  const accountStatus = useSelector(accountStatusSelector);\n  const [isAccountFriendbotFunded, setIsAccountFriendbotFunded] =\n    useState(false);\n\n  const publicKey = useSelector(publicKeySelector);\n  const networkDetails = useSelector(settingsNetworkDetailsSelector);\n  const isSorobanSuported = useSelector(settingsSorobanSupportedSelector);\n  const { userNotification } = useSelector(settingsSelector);\n  const currentAccountName = useSelector(accountNameSelector);\n  const allAccounts = useSelector(allAccountsSelector);\n  const [sortedBalances, setSortedBalances] = useState([] as AssetType[]);\n  const [assetOperations, setAssetOperations] = useState({} as AssetOperations);\n  const [selectedAsset, setSelectedAsset] = useState(\"\");\n  const [isLoading, setLoading] = useState(true);\n  const isSoroswapEnabled = useIsSoroswapEnabled();\n  const isFullscreenModeEnabled = isFullscreenMode();\n\n  const { balances, isFunded, error } = accountBalances;\n\n  useEffect(() => {\n    // reset to avoid any residual data eg switching between send and swap or\n    // previous stale sends\n    setLoading(true);\n    dispatch(resetSubmission());\n    dispatch(\n      getAccountBalances({\n        publicKey,\n        networkDetails,\n      }),\n    );\n\n    return () => {\n      dispatch(resetAccountBalanceStatus());\n    };\n  }, [publicKey, networkDetails, isAccountFriendbotFunded, dispatch]);\n\n  useEffect(() => {\n    if (!balances) {\n      return;\n    }\n\n    if (isSoroswapEnabled) {\n      dispatch(getSoroswapTokens());\n    }\n\n    setSortedBalances(sortBalances(balances));\n    dispatch(getAssetIcons({ balances, networkDetails }));\n    dispatch(getAssetDomains({ balances, networkDetails }));\n  }, [balances, networkDetails, dispatch, isSoroswapEnabled]);\n\n  useEffect(() => {\n    if (!balances) {\n      return;\n    }\n\n    const fetchAccountHistory = async () => {\n      try {\n        const operations = await getAccountHistory(publicKey, networkDetails);\n        setAssetOperations(\n          sortOperationsByAsset({\n            operations,\n            balances: sortedBalances,\n            networkDetails,\n            publicKey,\n          }),\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    };\n    fetchAccountHistory();\n  }, [publicKey, networkDetails, balances, sortedBalances]);\n\n  const hasError = accountBalanceStatus === ActionStatus.ERROR;\n\n  useEffect(() => {\n    if (\n      !(\n        accountBalanceStatus === ActionStatus.PENDING ||\n        accountBalanceStatus === ActionStatus.IDLE ||\n        accountStatus === ActionStatus.PENDING\n      )\n    ) {\n      setLoading(false);\n    }\n  }, [accountBalanceStatus, accountStatus]);\n\n  return selectedAsset ? (\n    <AssetDetail\n      accountBalances={sortedBalances}\n      assetOperations={assetOperations[selectedAsset] || []}\n      networkDetails={networkDetails}\n      publicKey={publicKey}\n      selectedAsset={selectedAsset}\n      setSelectedAsset={setSelectedAsset}\n      subentryCount={accountBalances.subentryCount}\n    />\n  ) : (\n    <>\n      {isLoading ? (\n        <Loading />\n      ) : (\n        <>\n          <AccountHeader\n            // accountDropDownRef={accountDropDownRef}\n            allAccounts={allAccounts}\n            currentAccountName={currentAccountName}\n            publicKey={publicKey}\n            setLoading={setLoading}\n          />\n          <View.Content hasNoTopPadding>\n            <div className=\"AccountView\" data-testid=\"account-view\">\n              <div className=\"AccountView__account-actions\">\n                <div className=\"AccountView__name-key-display\">\n                  <div\n                    className=\"AccountView__account-name\"\n                    data-testid=\"account-view-account-name\"\n                  >\n                    {currentAccountName}\n                  </div>\n                  <CopyText\n                    textToCopy={publicKey}\n                    tooltipPlacement=\"bottom\"\n                    doneLabel=\"Copied address\"\n                  >\n                    <div className=\"AccountView__account-num\">\n                      <Icon.Copy01 />\n                    </div>\n                  </CopyText>\n                </div>\n                <div className=\"AccountView__send-receive-display\">\n                  <div className=\"AccountView__send-receive-button\">\n                    <NavButton\n                      showBorder\n                      title={t(\"Send Payment\")}\n                      id=\"nav-btn-send\"\n                      icon={<Icon.Send01 />}\n                      onClick={() => navigateTo(ROUTES.sendPayment)}\n                    />\n                  </div>\n                  <div\n                    className=\"AccountView__send-receive-button\"\n                    data-testid=\"account-options-dropdown\"\n                  >\n                    <AccountOptionsDropdown isFunded={!!isFunded} />\n                  </div>\n                </div>\n              </div>\n              {hasError && (\n                <div className=\"AccountView__fetch-fail\">\n                  <Notification\n                    variant=\"error\"\n                    title={t(\"Failed to fetch your account balances.\")}\n                  >\n                    {t(\n                      \"Your account balances could not be fetched at this time.\",\n                    )}\n                  </Notification>\n                </div>\n              )}\n              {!isSorobanSuported && (\n                <div className=\"AccountView__fetch-fail\">\n                  <Notification\n                    title={t(\"Soroban RPC is temporarily experiencing issues\")}\n                    variant=\"primary\"\n                  >\n                    {t(\"Some features may be disabled at this time.\")}\n                  </Notification>\n                </div>\n              )}\n              {error?.horizon && (\n                <div className=\"AccountView__fetch-fail\">\n                  <Notification\n                    title={t(\"Horizon is temporarily experiencing issues\")}\n                    variant=\"primary\"\n                  >\n                    {t(\n                      \"Some of your assets may not appear, but they are still safe on the network!\",\n                    )}\n                  </Notification>\n                </div>\n              )}\n              {userNotification?.enabled && (\n                <div className=\"AccountView__fetch-fail\">\n                  <Notification\n                    title={t(\"Please note the following message\")}\n                    variant=\"primary\"\n                  >\n                    {userNotification.message}\n                  </Notification>\n                </div>\n              )}\n              {isFullscreenModeEnabled && (\n                <div className=\"AccountView__fullscreen\">\n                  <Notification\n                    title={t(\"You are in fullscreen mode\")}\n                    variant=\"primary\"\n                  >\n                    {t(\n                      \"Note that you will need to reload this tab to load any account changes that happen outside this session. For your own safety, please close this window when you are done.\",\n                    )}\n                  </Notification>\n                </div>\n              )}\n\n              {isFunded && !hasError && (\n                <div\n                  className=\"AccountView__assets-wrapper\"\n                  data-testid=\"account-assets\"\n                >\n                  <AccountAssets\n                    sortedBalances={sortedBalances}\n                    assetIcons={assetIcons}\n                    setSelectedAsset={setSelectedAsset}\n                  />\n                </div>\n              )}\n            </div>\n          </View.Content>\n          {!isFunded && !hasError && !error?.horizon && (\n            <View.Footer>\n              <NotFundedMessage\n                canUseFriendbot={!!networkDetails.friendbotUrl}\n                setIsAccountFriendbotFunded={setIsAccountFriendbotFunded}\n                publicKey={publicKey}\n              />\n            </View.Footer>\n          )}\n        </>\n      )}\n    </>\n  );\n};\n","import { DEV_SERVER } from \"@shared/constants/services\";\nimport { POPUP_HEIGHT, POPUP_WIDTH } from \"constants/dimensions\";\n\nexport const isFullscreenMode = () =>\n  window.innerHeight !== POPUP_HEIGHT &&\n  window.innerWidth !== POPUP_WIDTH &&\n  !DEV_SERVER;\n","import { useReducer } from \"react\";\n\nimport { getAccountHistory } from \"@shared/api/internal\";\nimport { NetworkDetails } from \"@shared/constants/stellar\";\nimport { ServerApi } from \"stellar-sdk/lib/horizon\";\n\nenum RequestState {\n  IDLE = \"IDLE\",\n  LOADING = \"LOADING\",\n  SUCCESS = \"SUCCESS\",\n  ERROR = \"ERROR\",\n}\n\ninterface SuccessState {\n  state: RequestState.SUCCESS;\n  data: ServerApi.OperationRecord[];\n  error: null;\n}\n\ninterface ErrorState {\n  state: RequestState.ERROR;\n  data: null;\n  error: unknown;\n}\n\ninterface IdleState {\n  state: RequestState.IDLE;\n  data: null;\n  error: null;\n}\n\ninterface LoadingState {\n  state: RequestState.LOADING;\n  data: null;\n  error: null;\n}\n\ntype State = IdleState | LoadingState | SuccessState | ErrorState;\n\ntype Action =\n  | { type: \"FETCH_DATA_START\" }\n  | { type: \"FETCH_DATA_SUCCESS\"; payload: SuccessState[\"data\"] }\n  | { type: \"FETCH_DATA_ERROR\"; payload: ErrorState[\"error\"] };\n\nconst initialState: IdleState = {\n  state: RequestState.IDLE,\n  data: null,\n  error: null,\n};\n\nconst reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"FETCH_DATA_START\":\n      return { state: RequestState.LOADING, error: null, data: null };\n    case \"FETCH_DATA_SUCCESS\":\n      return { error: null, state: RequestState.SUCCESS, data: action.payload };\n    case \"FETCH_DATA_ERROR\":\n      return { data: null, state: RequestState.ERROR, error: action.payload };\n    default:\n      return state;\n  }\n};\n\nfunction useGetHistory(publicKey: string, networkDetails: NetworkDetails) {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const fetchData = async () => {\n    dispatch({ type: \"FETCH_DATA_START\" });\n    try {\n      const data = await getAccountHistory(publicKey, networkDetails);\n      dispatch({ type: \"FETCH_DATA_SUCCESS\", payload: data });\n      return data;\n    } catch (error) {\n      dispatch({ type: \"FETCH_DATA_ERROR\", payload: error });\n      return error;\n    }\n  };\n\n  return {\n    state,\n    fetchData,\n  };\n}\n\nexport { useGetHistory, RequestState };\n","import React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useTranslation } from \"react-i18next\";\nimport { Horizon } from \"stellar-sdk\";\nimport BigNumber from \"bignumber.js\";\n\nimport { SorobanTokenInterface } from \"@shared/constants/soroban/token\";\n\nimport { publicKeySelector } from \"popup/ducks/accountServices\";\nimport {\n  settingsNetworkDetailsSelector,\n  settingsSelector,\n} from \"popup/ducks/settings\";\nimport { transactionSubmissionSelector } from \"popup/ducks/transactionSubmission\";\nimport {\n  getIsPayment,\n  getIsSwap,\n  getStellarExpertUrl,\n} from \"popup/helpers/account\";\nimport { getAttrsFromSorobanHorizonOp } from \"popup/helpers/soroban\";\n\nimport {\n  historyItemDetailViewProps,\n  HistoryItem,\n  HistoryItemOperation,\n} from \"popup/components/accountHistory/HistoryItem\";\nimport { HistoryList } from \"popup/components/accountHistory/HistoryList\";\nimport {\n  TransactionDetail,\n  TransactionDetailProps,\n} from \"popup/components/accountHistory/TransactionDetail\";\nimport { View } from \"popup/basics/layout/View\";\nimport { RequestState, useGetHistory } from \"helpers/hooks/useGetHistory\";\n\nimport \"./styles.scss\";\nimport { Loading } from \"popup/components/Loading\";\n\nenum SELECTOR_OPTIONS {\n  ALL = \"ALL\",\n  SENT = \"SENT\",\n  RECEIVED = \"RECEIVED\",\n}\n\nexport const AccountHistory = () => {\n  /*\n      t(\"ALL\");\n      t(\"SENT\");\n      t(\"RECEIVED\");\n    */\n  type HistorySegments =\n    | {\n        [key in SELECTOR_OPTIONS]: HistoryItemOperation[] | [];\n      }\n    | null;\n\n  const { t } = useTranslation();\n  const publicKey = useSelector(publicKeySelector);\n  const networkDetails = useSelector(settingsNetworkDetailsSelector);\n  const { accountBalances } = useSelector(transactionSubmissionSelector);\n  const { isHideDustEnabled } = useSelector(settingsSelector);\n  const { state: getHistoryState, fetchData } = useGetHistory(\n    publicKey,\n    networkDetails,\n  );\n\n  const [selectedSegment, setSelectedSegment] = useState(SELECTOR_OPTIONS.ALL);\n  const [historySegments, setHistorySegments] = useState(\n    null as HistorySegments,\n  );\n  const [isDetailViewShowing, setIsDetailViewShowing] = useState(false);\n\n  const defaultDetailViewProps: TransactionDetailProps = {\n    ...historyItemDetailViewProps,\n    setIsDetailViewShowing,\n  };\n  const [detailViewProps, setDetailViewProps] = useState(\n    defaultDetailViewProps,\n  );\n\n  const stellarExpertUrl = getStellarExpertUrl(networkDetails);\n\n  useEffect(() => {\n    const getData = async () => {\n      await fetchData();\n    };\n    getData();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    const createSegments = (\n      operations: Horizon.ServerApi.OperationRecord[],\n    ) => {\n      const segments = {\n        [SELECTOR_OPTIONS.ALL]: [] as HistoryItemOperation[],\n        [SELECTOR_OPTIONS.SENT]: [] as HistoryItemOperation[],\n        [SELECTOR_OPTIONS.RECEIVED]: [] as HistoryItemOperation[],\n      };\n      operations.forEach((operation) => {\n        const isPayment = getIsPayment(operation.type);\n        const isSorobanXfer =\n          getAttrsFromSorobanHorizonOp(operation, networkDetails)?.fnName ===\n          SorobanTokenInterface.transfer;\n        const isSwap = getIsSwap(operation);\n        const isCreateExternalAccount =\n          operation.type ===\n            Horizon.HorizonApi.OperationResponseType.createAccount &&\n          operation.account !== publicKey;\n        const isDustPayment =\n          isPayment &&\n          \"asset_type\" in operation &&\n          operation.asset_type === \"native\" &&\n          \"to\" in operation &&\n          operation.to === publicKey &&\n          \"amount\" in operation &&\n          new BigNumber(operation.amount).lte(new BigNumber(0.1));\n        const historyOperation = {\n          ...operation,\n          isPayment,\n          isSwap,\n          isCreateExternalAccount,\n        };\n\n        if (isDustPayment && isHideDustEnabled) {\n          return;\n        }\n\n        if ((isPayment || isSorobanXfer) && !isSwap) {\n          if (operation.source_account === publicKey) {\n            segments[SELECTOR_OPTIONS.SENT].push(historyOperation);\n          } else if (\"to\" in operation && operation.to === publicKey) {\n            segments[SELECTOR_OPTIONS.RECEIVED].push(historyOperation);\n          }\n        }\n\n        if (isCreateExternalAccount) {\n          segments[SELECTOR_OPTIONS.SENT].push(historyOperation);\n        }\n\n        segments[SELECTOR_OPTIONS.ALL].push(historyOperation);\n      });\n\n      return segments;\n    };\n\n    if (getHistoryState.state === RequestState.SUCCESS) {\n      setHistorySegments(createSegments(getHistoryState.data));\n    }\n  }, [\n    getHistoryState.state,\n    getHistoryState.data,\n    publicKey,\n    networkDetails,\n    isHideDustEnabled,\n  ]);\n\n  const isLoaderShowing =\n    getHistoryState.state === RequestState.IDLE ||\n    getHistoryState.state === RequestState.LOADING;\n\n  if (isDetailViewShowing) {\n    return <TransactionDetail {...detailViewProps} />;\n  }\n\n  if (isLoaderShowing) {\n    return <Loading />;\n  }\n\n  const hasEmptyHistory = !getHistoryState?.data?.length;\n\n  return (\n    <View.Content>\n      <div className=\"AccountHistory\" data-testid=\"AccountHistory\">\n        <header className=\"AccountHistory__header\">{t(\"Transactions\")}</header>\n        <div className=\"AccountHistory__selector\">\n          {Object.values(SELECTOR_OPTIONS).map((option) => (\n            <div\n              key={option}\n              className={`AccountHistory__selector__item ${\n                option === selectedSegment\n                  ? \"AccountHistory__selector__item--active\"\n                  : \"\"\n              }`}\n              onClick={() => setSelectedSegment(option)}\n            >\n              {t(option)}\n            </div>\n          ))}\n        </div>\n        <div className=\"AccountHistory__list\">\n          {historySegments?.[SELECTOR_OPTIONS[selectedSegment]].length ? (\n            <HistoryList>\n              <>\n                {historySegments[SELECTOR_OPTIONS[selectedSegment]].map(\n                  (operation: HistoryItemOperation) => (\n                    <HistoryItem\n                      key={operation.id}\n                      accountBalances={accountBalances}\n                      operation={operation}\n                      publicKey={publicKey}\n                      url={stellarExpertUrl}\n                      networkDetails={networkDetails}\n                      setDetailViewProps={setDetailViewProps}\n                      setIsDetailViewShowing={setIsDetailViewShowing}\n                    />\n                  ),\n                )}\n              </>\n            </HistoryList>\n          ) : (\n            <div>{hasEmptyHistory ? t(\"No transactions to show\") : null}</div>\n          )}\n        </div>\n      </div>\n    </View.Content>\n  );\n};\n","import { bool as YupBool, string as YupString, ref as YupRef } from \"yup\";\n\nexport const password = YupString()\n  .min(8, \"Password must be at least 8 characters long\")\n  .required(\"Password is required\")\n  .matches(/.*[A-Z]/, \"Must contain an uppercase letter\");\n\nexport const confirmPassword = YupString()\n  .oneOf([YupRef(\"password\")], \"Passwords must match\")\n  .required(\"Password confirmation is required\");\n\nexport const termsOfUse = YupBool().oneOf(\n  [true],\n  \"Agreeing to the Terms of Use and the Privacy Policy is required\",\n);\n","import React from \"react\";\nimport { addStyleClasses } from \"popup/helpers/addStyleClasses\";\n\nimport \"./styles.scss\";\n\ninterface BoxProps {\n  display?: \"grid\" | \"flex\";\n  children: React.ReactElement | React.ReactElement[];\n  gridCellWidth?: string;\n  gapHorizontal?: string;\n  gapVertical?: string;\n  isFlexRow?: boolean;\n}\n\nexport const Box: React.FC<BoxProps> = ({\n  display = \"grid\",\n  children,\n  gridCellWidth,\n  gapHorizontal,\n  gapVertical,\n  isFlexRow,\n  ...props\n}: BoxProps) => {\n  const customStyle = {\n    // eslint-disable-next-line\n    ...(gridCellWidth ? { \"--Box-grid-cell-width\": gridCellWidth } : {}),\n    // eslint-disable-next-line\n    ...(gapHorizontal ? { \"--Box-gap-horizontal\": gapHorizontal } : {}),\n    // eslint-disable-next-line\n    ...(gapVertical ? { \"--Box-gap-vertical\": gapVertical } : {}),\n    ...(display === \"grid\"\n      ? {\n          // eslint-disable-next-line\n          \"grid-template-columns\": `repeat(auto-fit, ${\n            gridCellWidth || \"100%\"\n          })`,\n        }\n      : {}),\n  } as React.CSSProperties;\n\n  return (\n    <div\n      className={`Box ${addStyleClasses([\n        display === \"grid\" ? \"Box--grid\" : \"Box--flex\",\n        isFlexRow ? \"Box--flex--row\" : \"\",\n      ])}`}\n      style={customStyle}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n};\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport { Alert, Button, Heading, Card } from \"@stellar/design-system\";\n\nimport { BackButton } from \"popup/basics/buttons/BackButton\";\nimport { Box } from \"popup/basics/layout/Box\";\nimport { View } from \"popup/basics/layout/View\";\n\nimport \"./styles.scss\";\n\ninterface OnboardingProps {\n  children: React.ReactNode;\n  layout: \"half\" | \"full\";\n  customWidth?: string;\n}\n\nexport const Onboarding = ({\n  children,\n  layout,\n  customWidth,\n}: OnboardingProps) => {\n  const customStyle = {\n    ...(!customWidth && layout === \"full\"\n      ? // eslint-disable-next-line\n        { \"--Onboarding-layout-width\": \"100%\" }\n      : {}),\n    // eslint-disable-next-line\n    ...(customWidth ? { \"--Onboarding-layout-width\": customWidth } : {}),\n  } as React.CSSProperties;\n\n  return (\n    <div className=\"Onboarding\" style={customStyle}>\n      <>{children}</>\n    </div>\n  );\n};\n\nexport const OnboardingOneCol = ({\n  children,\n  ...props\n}: {\n  children: React.ReactElement | React.ReactElement[];\n}) => (\n  <Box display=\"flex\" gridCellWidth=\"24rem\" gapVertical=\"2rem\" {...props}>\n    {children}\n  </Box>\n);\n\ninterface OnboardingButtonsProps {\n  hasGoBackBtn?: boolean;\n  customBackAction?: () => void;\n  children?: React.ReactElement;\n}\n\nexport const OnboardingButtons = ({\n  hasGoBackBtn,\n  customBackAction,\n  children,\n}: OnboardingButtonsProps) => {\n  const history = useHistory();\n  const { t } = useTranslation();\n\n  const isNewTabSession = history.length === 1;\n  const showBackButton = hasGoBackBtn && !isNewTabSession;\n\n  if (children || showBackButton) {\n    return (\n      <Box display=\"flex\" isFlexRow gapHorizontal=\".75rem\">\n        <>\n          {showBackButton ? (\n            <BackButton\n              customButtonComponent={\n                <Button variant=\"tertiary\" size=\"lg\" type=\"button\">\n                  {t(\"Back\")}\n                </Button>\n              }\n              customBackAction={customBackAction}\n            />\n          ) : null}\n\n          {children}\n        </>\n      </Box>\n    );\n  }\n\n  return null;\n};\n\ninterface OnboardingModalProps {\n  children: React.ReactNode;\n  headerText: string;\n  bodyText: React.ReactNode;\n}\n\nexport const OnboardingModal = ({\n  children,\n  headerText,\n  bodyText,\n}: OnboardingModalProps) => (\n  <View.Content alignment=\"center\" hasNoTopPadding hasNoBottomPadding>\n    <div className=\"Onboarding__card__wrapper\">\n      <Card variant=\"secondary\">\n        <div className=\"Onboarding__card\">\n          <Heading as=\"h2\" size=\"xs\" weight=\"semi-bold\">\n            {headerText}\n          </Heading>\n          <div className=\"Onboarding__card__text\">{bodyText}</div>\n        </div>\n        {children}\n      </Card>\n    </div>\n  </View.Content>\n);\n\nexport const OnboardingError = ({ errorString }: { errorString: string }) => (\n  <View.Content hasNoTopPadding>\n    <div className=\"Onboarding__error\">\n      {errorString ? (\n        <Alert placement=\"inline\" variant=\"error\">\n          {errorString}\n        </Alert>\n      ) : null}\n    </div>\n  </View.Content>\n);\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport {\n  Input,\n  Checkbox,\n  Link,\n  Button,\n  Card,\n  Heading,\n  Icon,\n} from \"@stellar/design-system\";\nimport { Field, FieldProps, Form, FormikErrors, FormikTouched } from \"formik\";\nimport { useTranslation } from \"react-i18next\";\n\nimport {\n  Onboarding,\n  OnboardingButtons,\n  OnboardingOneCol,\n} from \"popup/components/Onboarding\";\nimport { authErrorSelector } from \"popup/ducks/accountServices\";\n\nimport \"./styles.scss\";\n\nexport interface FormValues {\n  password: string;\n  confirmPassword: string;\n  termsOfUse: boolean;\n}\n\ninterface PasswordFormProps {\n  isValid: boolean;\n  dirty: boolean;\n  isSubmitting: boolean;\n  errors: FormikErrors<FormValues>;\n  touched: FormikTouched<FormValues>;\n  values: FormValues;\n  handleSubmit?: (values: FormValues) => void;\n}\n\nexport const initialValues: FormValues = {\n  password: \"\",\n  confirmPassword: \"\",\n  termsOfUse: false,\n};\n\nexport const PasswordForm = ({\n  isValid,\n  dirty,\n  isSubmitting,\n  errors,\n  touched,\n  values,\n  handleSubmit,\n}: PasswordFormProps) => {\n  const authError = useSelector(authErrorSelector);\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"PasswordForm\">\n      <Onboarding layout=\"half\">\n        <Card variant=\"secondary\">\n          <Heading as=\"h2\" size=\"xs\" weight=\"semi-bold\">\n            {t(\"Create a Password\")}\n          </Heading>\n          <div className=\"PasswordForm__subheading\">\n            {t(\"This will be used to unlock your wallet\")}\n          </div>\n          <Form>\n            <OnboardingOneCol>\n              <div className=\"PasswordForm__form-rows\">\n                <Field name=\"password\">\n                  {({ field }: FieldProps) => (\n                    <Input\n                      autoFocus\n                      data-testid=\"account-creator-password-input\"\n                      fieldSize=\"md\"\n                      autoComplete=\"off\"\n                      id=\"new-password-input\"\n                      placeholder={t(\"New password\")}\n                      type=\"password\"\n                      error={\n                        authError ||\n                        (errors.password && touched.password\n                          ? errors.password\n                          : \"\")\n                      }\n                      {...field}\n                    />\n                  )}\n                </Field>\n                <Field name=\"confirmPassword\">\n                  {({ field }: FieldProps) => (\n                    <Input\n                      data-testid=\"account-creator-confirm-password-input\"\n                      fieldSize=\"md\"\n                      autoComplete=\"off\"\n                      id=\"confirm-password-input\"\n                      placeholder={t(\"Confirm password\")}\n                      type=\"password\"\n                      error={\n                        authError ||\n                        (errors.confirmPassword && touched.confirmPassword\n                          ? errors.confirmPassword\n                          : null)\n                      }\n                      {...field}\n                    />\n                  )}\n                </Field>\n              </div>\n\n              <Field name=\"termsOfUse\">\n                {({ field, form }: FieldProps) => (\n                  <div className=\"PasswordForm__tos\">\n                    <Checkbox\n                      data-testid=\"account-creator-termsOfUse-input\"\n                      fieldSize=\"md\"\n                      autoComplete=\"off\"\n                      error={touched.termsOfUse ? errors.termsOfUse : null}\n                      id=\"termsOfUse-input\"\n                      onKeyDown={(e) => {\n                        if (e.key === \"Enter\") {\n                          form.setFieldValue(\"termsOfUse\", !field.value);\n                          e.currentTarget.checked = !field.value;\n                        }\n                      }}\n                      label={\n                        <div className=\"PasswordForm__tos__label\">\n                          <span>\n                            {t(\"I have read and agree to\")}{\" \"}\n                            <Link\n                              variant=\"secondary\"\n                              href=\"https://stellar.org/terms-of-service\"\n                            >\n                              {t(\"Terms of Use\")}\n                            </Link>\n                          </span>\n                          <Icon.LinkExternal01 />\n                        </div>\n                      }\n                      {...field}\n                    />\n                  </div>\n                )}\n              </Field>\n\n              <OnboardingButtons hasGoBackBtn>\n                <Button\n                  data-testid=\"account-creator-submit\"\n                  size=\"lg\"\n                  variant=\"secondary\"\n                  isLoading={isSubmitting}\n                  disabled={!(dirty && isValid)}\n                  {...(handleSubmit\n                    ? { onClick: () => handleSubmit(values), type: \"button\" }\n                    : { type: \"submit\" })}\n                >\n                  {t(\"Confirm\")}\n                </Button>\n              </OnboardingButtons>\n            </OnboardingOneCol>\n          </Form>\n        </Card>\n      </Onboarding>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Field } from \"formik\";\n\nimport \"./styles.scss\";\n\ntype CheckButtonProps = {\n  onChange: (e: any) => void;\n  onKeyDown?: (e: any) => void;\n  wordKey: string;\n  word: string;\n  wordNumber: () => string;\n};\n\nexport const CheckButton = ({\n  onChange,\n  onKeyDown,\n  wordKey,\n  word,\n  wordNumber,\n}: CheckButtonProps) => (\n  <div className=\"CheckButton__wrapper\">\n    <Field\n      className=\"CheckButton\"\n      id={wordKey}\n      onChange={(e: React.FormEvent) => onChange(e)}\n      type=\"checkbox\"\n      name={wordKey}\n      key={wordKey}\n      text={word}\n      onKeyDown={(e: React.KeyboardEvent) => {\n        if (onKeyDown) {\n          onKeyDown(e);\n        }\n      }}\n      value={wordKey}\n    />\n    <label className=\"ButtonLabel\" htmlFor={wordKey} data-testid={word}>\n      <div className=\"ButtonLabel__number\">{wordNumber()}</div>{\" \"}\n      <div className=\"ButtonLabel__word\">{word}</div>\n    </label>\n  </div>\n);\n","import React, { useEffect, useState } from \"react\";\nimport shuffle from \"lodash/shuffle\";\nimport { Form, Formik, FormikHelpers, FormikValues } from \"formik\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Button, Card, Text } from \"@stellar/design-system\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { AppDispatch } from \"popup/App\";\nimport {\n  confirmMnemonicPhrase,\n  confirmMigratedMnemonicPhrase,\n  authErrorSelector,\n} from \"popup/ducks/accountServices\";\n\nimport { navigateTo } from \"popup/helpers/navigate\";\nimport { ROUTES } from \"popup/constants/routes\";\n\nimport { OnboardingModal, OnboardingError } from \"popup/components/Onboarding\";\n\nimport { CheckButton } from \"../CheckButton\";\n\nimport \"./styles.scss\";\n\nconst convertToWord = (wordKey: string) => wordKey.replace(/-.*/, \"\");\n\nexport const ConfirmMnemonicPhrase = ({\n  mnemonicPhrase,\n  isMigration,\n}: {\n  mnemonicPhrase: string;\n  isMigration?: boolean;\n}) => {\n  const { t } = useTranslation();\n  const dispatch: AppDispatch = useDispatch();\n  const [words, setWords] = useState([\"\"]);\n\n  useEffect(() => {\n    if (mnemonicPhrase) {\n      setWords(shuffle(mnemonicPhrase.split(\" \")));\n    }\n  }, [mnemonicPhrase]);\n\n  const initialWordState = words.reduce(\n    (obj, current, i) => ({\n      ...obj,\n      // tag each word with an index because words can repeat\n      [`${current}-${i}`]: false,\n    }),\n    {},\n  );\n  const [selectedWords, setSelectedWords] = useState<string[]>([]);\n  const authError = useSelector(authErrorSelector);\n\n  const updatePhrase = (target: HTMLInputElement) => {\n    if (target.checked) {\n      return setSelectedWords((prevState) => [...prevState, target.name]);\n    }\n    return setSelectedWords((prevState) => {\n      const currentArr = [...prevState];\n      currentArr.splice(currentArr.indexOf(target.name), 1);\n      return [...currentArr];\n    });\n  };\n\n  const wordStateArr: [string, boolean][] = Object.entries(initialWordState);\n\n  const handleSubmit = async (\n    _values: FormikValues,\n    formikHelpers: FormikHelpers<FormikValues>,\n  ): Promise<void> => {\n    if (isMigration) {\n      const res = await dispatch(\n        confirmMigratedMnemonicPhrase(joinSelectedWords()),\n      );\n      if (confirmMigratedMnemonicPhrase.fulfilled.match(res)) {\n        navigateTo(ROUTES.accountMigrationConfirmMigration);\n      }\n    } else {\n      dispatch(confirmMnemonicPhrase(joinSelectedWords()));\n    }\n\n    setSelectedWords([]);\n    formikHelpers.resetForm();\n  };\n\n  const handleSkip = async () => {\n    // confirm the mnemonic phrase for the user\n\n    await dispatch(confirmMnemonicPhrase(mnemonicPhrase));\n  };\n\n  const joinSelectedWords = () =>\n    selectedWords.map((word) => convertToWord(word)).join(\" \");\n\n  return (\n    <div className=\"ConfirmMnemonicPhrase\">\n      <OnboardingModal\n        data-testid=\"confirm-mnemonic-phrase\"\n        headerText=\"Confirm Your Recovery Phrase\"\n        bodyText={\n          <>\n            <Text as=\"p\" size=\"md\">\n              {t(\n                \"Please select each word in the same order you have them noted to confirm you got them right.\",\n              )}\n            </Text>\n          </>\n        }\n      >\n        <Formik initialValues={initialWordState} onSubmit={handleSubmit}>\n          {({ dirty, isSubmitting, handleChange }) => (\n            <Form>\n              <div className=\"ConfirmMnemonicPhrase__card-wrapper\">\n                <Card variant=\"primary\">\n                  <div className=\"ConfirmMnemonicPhrase__word-bubble-wrapper\">\n                    {wordStateArr.map(([wordKey]) => (\n                      <CheckButton\n                        key={wordKey}\n                        onChange={(e) => {\n                          handleChange(e);\n                          updatePhrase(e.target as HTMLInputElement);\n                        }}\n                        onKeyDown={(e) => {\n                          if (e.key === \"Enter\") {\n                            e.preventDefault();\n                            e.target.checked = e.target.value !== \"true\";\n                            handleChange(e);\n                            updatePhrase(e.target as HTMLInputElement);\n                          }\n                        }}\n                        wordKey={wordKey}\n                        word={convertToWord(wordKey)}\n                        wordNumber={() => {\n                          const wordIndex = selectedWords.findIndex(\n                            (selectedWord) => selectedWord === wordKey,\n                          );\n\n                          if (wordIndex > -1) {\n                            return String(wordIndex + 1);\n                          }\n                          return \"\";\n                        }}\n                      />\n                    ))}\n                  </div>\n                </Card>\n              </div>\n              <div className=\"ConfirmMnemonicPhrase__footer\">\n                <div className=\"ConfirmMnemonicPhrase__footer__buttons\">\n                  <Button\n                    size=\"lg\"\n                    data-testid=\"display-mnemonic-phrase-skip-btn\"\n                    variant=\"tertiary\"\n                    isFullWidth\n                    type=\"button\"\n                    onClick={handleSkip}\n                  >\n                    {t(\"Skip\")}\n                  </Button>\n                  <Button\n                    size=\"lg\"\n                    data-testid=\"display-mnemonic-phrase-confirm-btn\"\n                    variant=\"secondary\"\n                    type=\"submit\"\n                    disabled={!dirty && !!joinSelectedWords().length}\n                    isLoading={isSubmitting}\n                    isFullWidth\n                  >\n                    {t(\"Confirm\")}\n                  </Button>\n                </div>\n                <div>\n                  {t(\n                    \"You can access this later in the app, but we strongly recommend saving this in a safe place.\",\n                  )}\n                </div>\n              </div>\n            </Form>\n          )}\n        </Formik>\n      </OnboardingModal>\n      <OnboardingError\n        errorString={authError ? t(\"Order is incorrect, try again\") : \"\"}\n      />\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Card } from \"@stellar/design-system\";\n// @ts-ignore\nimport { generateMnemonic } from \"stellar-hd-wallet\";\nimport random from \"lodash/random\";\n\nimport \"./styles.scss\";\n\ninterface GenerateMnemonicPhraseDisplayProps {\n  mnemonicPhrase: string;\n}\n\nexport const generateMnemonicPhraseDisplay = ({\n  mnemonicPhrase = \"\",\n}: GenerateMnemonicPhraseDisplayProps) =>\n  mnemonicPhrase.split(\" \").map((word: string, i: number) => {\n    /*\n      As a security measure, we want to prevent writing the mnemonic phrase to the DOM.\n      The browser can leak this string into memory where a hacker could possibly access it.\n      A solution here is to insert random, hidden words into the string so the browser is\n      only has an obfuscated menemonic phrase that can leak into memory.\n    */\n\n    const randomNumber = random(1, 10);\n    const randomWordArr = generateMnemonic().split(\" \");\n    const randomWordIndex = random(0, randomWordArr.length - 1);\n    const randomWord = randomWordArr[randomWordIndex];\n\n    return (\n      // eslint-disable-next-line react/no-array-index-key\n      <li className=\"MnemonicDisplay__list-item\" key={`${word}-${i}`}>\n        {randomNumber % 2 === 0 ? (\n          <>\n            <span className=\"MnemonicDisplay__random-word\">{randomWord}</span>\n\n            <span data-testid=\"word\">{word}</span>\n          </>\n        ) : (\n          <>\n            <span data-testid=\"word\">{word}</span>\n            <span className=\"MnemonicDisplay__random-word\">{randomWord}</span>\n          </>\n        )}\n      </li>\n    );\n  });\n\ninterface MnemonicDisplayProps {\n  mnemonicPhrase: string;\n  isPopupView?: boolean;\n}\n\nexport const MnemonicDisplay = ({\n  mnemonicPhrase,\n  isPopupView,\n}: MnemonicDisplayProps) => (\n  <div className=\"MnemonicDisplay\">\n    <Card variant=\"primary\">\n      <ol\n        onCopy={(e) => e.preventDefault()}\n        className={`MnemonicDisplay__ordered-list ${\n          isPopupView ? \"MnemonicDisplay__ordered-list--popup-view\" : \"\"\n        }`}\n      >\n        {generateMnemonicPhraseDisplay({ mnemonicPhrase })}\n      </ol>\n    </Card>\n  </div>\n);\n","import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Button, Text } from \"@stellar/design-system\";\n\nimport { OnboardingModal } from \"popup/components/Onboarding\";\n\nimport { MnemonicDisplay } from \"../MnemonicDisplay\";\n\nimport \"./styles.scss\";\n\nexport const DisplayMnemonicPhrase = ({\n  mnemonicPhrase,\n  setIsConfirmed,\n}: {\n  mnemonicPhrase: string;\n  setIsConfirmed: (confirmed: boolean) => void;\n}) => {\n  const { t } = useTranslation();\n\n  return (\n    <OnboardingModal\n      data-testid=\"display-mnemonic-phrase\"\n      headerText=\"Your Recovery Phrase\"\n      bodyText={\n        <>\n          <Text as=\"p\" size=\"md\">\n            {t(\n              \"Never disclose your recovery phrase! If you do, someone will be able to access your wallet.\",\n            )}\n          </Text>\n        </>\n      }\n    >\n      <MnemonicDisplay mnemonicPhrase={mnemonicPhrase} />\n      <Button\n        size=\"md\"\n        data-testid=\"display-mnemonic-phrase-next-btn\"\n        isFullWidth\n        variant=\"secondary\"\n        onClick={() => {\n          setIsConfirmed(true);\n        }}\n      >\n        {t(\"I’ve saved my phrase somewhere safe\")}\n      </Button>\n    </OnboardingModal>\n  );\n};\n","import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport { Button, Text, Icon } from \"@stellar/design-system\";\n\nimport { APPLICATION_STATE } from \"@shared/constants/applicationState\";\n\nimport { ROUTES } from \"popup/constants/routes\";\nimport { Onboarding, OnboardingModal } from \"popup/components/Onboarding\";\nimport { ConfirmMnemonicPhrase } from \"popup/components/mnemonicPhrase/ConfirmMnemonicPhrase\";\nimport { DisplayMnemonicPhrase } from \"popup/components/mnemonicPhrase/DisplayMnemonicPhrase\";\nimport {\n  applicationStateSelector,\n  confirmMnemonicPhrase,\n} from \"popup/ducks/accountServices\";\nimport { View } from \"popup/basics/layout/View\";\n\nimport \"./styles.scss\";\n\ninterface MnemonicPhraseProps {\n  mnemonicPhrase: string;\n}\n\nexport const MnemonicPhrase = ({\n  mnemonicPhrase = \"\",\n}: MnemonicPhraseProps) => {\n  const { t } = useTranslation();\n  const applicationState = useSelector(applicationStateSelector);\n  const [isConfirmed, setIsConfirmed] = useState(false);\n  const [isModalShowing, setIsModalShowing] = useState(true);\n  const dispatch = useDispatch();\n\n  const handleSkip = () => {\n    // confirm the mnemonic phrase for the user\n\n    dispatch(confirmMnemonicPhrase(mnemonicPhrase));\n  };\n\n  if (applicationState === APPLICATION_STATE.MNEMONIC_PHRASE_CONFIRMED) {\n    return <Redirect to={ROUTES.mnemonicPhraseConfirmed} />;\n  }\n\n  if (mnemonicPhrase) {\n    if (isModalShowing) {\n      return (\n        <div\n          className=\"MnemonicPhrase__view__wrapper\"\n          data-testid=\"MnemonicPhrase__modal\"\n        >\n          <OnboardingModal\n            headerText={t(\"Recovery Phrase\")}\n            bodyText={\n              <>\n                <Text as=\"p\" size=\"md\">\n                  {t(\n                    \"Your recovery phrase gives you access to your account and is the only way to access it in a new browser. \",\n                  )}\n                  <span className=\"MnemonicPhrase__modal__text--highlight\">\n                    {t(\"Keep it in a safe place.\")}\n                  </span>\n                </Text>\n                <Text as=\"p\" size=\"md\">\n                  {t(\n                    \"For your security, we'll check if you got it right in the next step.\",\n                  )}\n                </Text>\n              </>\n            }\n          >\n            <div className=\"MnemonicPhrase__modal__rows\">\n              <div className=\"MnemonicPhrase__modal__row\">\n                <div className=\"MnemonicPhrase__modal__row__icon\">\n                  <Icon.Lock01 />\n                </div>\n                <div className=\"MnemonicPhrase__modal__row__text\">\n                  {t(\n                    \"Your recovery phrase gives you full access to your wallets and funds\",\n                  )}\n                </div>\n              </div>\n              <div className=\"MnemonicPhrase__modal__row\">\n                <div className=\"MnemonicPhrase__modal__row__icon\">\n                  <Icon.Passcode />\n                </div>\n                <div className=\"MnemonicPhrase__modal__row__text\">\n                  {t(\n                    \"If you forget your password, you can use the recovery phrase to access your wallet\",\n                  )}\n                </div>\n              </div>\n              <div className=\"MnemonicPhrase__modal__row\">\n                <div className=\"MnemonicPhrase__modal__row__icon\">\n                  <Icon.EyeOff />\n                </div>\n                <div className=\"MnemonicPhrase__modal__row__text\">\n                  {t(\"NEVER share this phrase with anyone\")}\n                </div>\n              </div>\n              <div className=\"MnemonicPhrase__modal__row\">\n                <div className=\"MnemonicPhrase__modal__row__icon\">\n                  <Icon.AlertCircle />\n                </div>\n                <div className=\"MnemonicPhrase__modal__row__text\">\n                  {t(\n                    \"No one from Stellar Development Foundation will ever ask for your recovery phrase\",\n                  )}\n                </div>\n              </div>\n            </div>\n            <div className=\"MnemonicPhrase__modal__footer\">\n              <Button\n                variant=\"secondary\"\n                isFullWidth\n                size=\"lg\"\n                onClick={() => setIsModalShowing(false)}\n              >\n                {t(\"Show recovery phrase\")}\n              </Button>\n              <Button\n                variant=\"tertiary\"\n                isFullWidth\n                size=\"lg\"\n                onClick={handleSkip}\n              >\n                {t(\"Do this later\")}\n              </Button>\n            </div>\n          </OnboardingModal>\n        </div>\n      );\n    }\n    return isConfirmed ? (\n      <div className=\"MnemonicPhrase__view__wrapper\">\n        <View.Content alignment=\"center\" hasNoTopPadding>\n          <Onboarding layout=\"full\" customWidth=\"31rem\">\n            <ConfirmMnemonicPhrase mnemonicPhrase={mnemonicPhrase} />\n          </Onboarding>\n        </View.Content>\n      </div>\n    ) : (\n      <div className=\"MnemonicPhrase__view__wrapper\">\n        <View.Content alignment=\"center\" hasNoTopPadding>\n          <Onboarding layout=\"full\">\n            <DisplayMnemonicPhrase\n              mnemonicPhrase={mnemonicPhrase}\n              setIsConfirmed={setIsConfirmed}\n            />\n          </Onboarding>\n        </View.Content>\n      </div>\n    );\n  }\n\n  return null;\n};\n","import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { Formik } from \"formik\";\nimport { object as YupObject } from \"yup\";\n\nimport { showBackupPhrase } from \"@shared/api/internal\";\nimport {\n  password as passwordValidator,\n  confirmPassword as confirmPasswordValidator,\n  termsOfUse as termsofUseValidator,\n} from \"popup/helpers/validators\";\nimport { createAccount, publicKeySelector } from \"popup/ducks/accountServices\";\nimport { View } from \"popup/basics/layout/View\";\n\nimport {\n  PasswordForm,\n  initialValues,\n  FormValues,\n} from \"popup/components/accountCreator/PasswordForm\";\nimport { MnemonicPhrase } from \"popup/views/MnemonicPhrase\";\n\nimport \"./styles.scss\";\n\nexport const AccountCreator = () => {\n  const publicKey = useSelector(publicKeySelector);\n  const dispatch = useDispatch();\n\n  const [mnemonicPhrase, setMnemonicPhrase] = useState(\"\");\n\n  const handleSubmit = async (values: FormValues) => {\n    // eslint-disable-next-line\n    await dispatch(createAccount(values.password));\n    const res = await showBackupPhrase(values.password);\n\n    setMnemonicPhrase(res.mnemonicPhrase);\n  };\n\n  const AccountCreatorSchema = YupObject().shape({\n    password: passwordValidator,\n    confirmPassword: confirmPasswordValidator,\n    termsOfUse: termsofUseValidator,\n  });\n\n  return mnemonicPhrase && publicKey ? (\n    <MnemonicPhrase mnemonicPhrase={mnemonicPhrase} />\n  ) : (\n    <React.Fragment>\n      <View.Content\n        alignment=\"center\"\n        data-testid=\"account-creator-view\"\n        hasNoTopPadding\n        hasNoBottomPadding\n      >\n        <Formik\n          initialValues={initialValues}\n          onSubmit={handleSubmit}\n          validationSchema={AccountCreatorSchema}\n        >\n          {({ isValid, dirty, isSubmitting, errors, touched, values }) => (\n            <PasswordForm\n              isValid={isValid}\n              dirty={dirty}\n              isSubmitting={isSubmitting}\n              errors={errors}\n              touched={touched}\n              values={values}\n            />\n          )}\n        </Formik>\n      </View.Content>\n    </React.Fragment>\n  );\n};\n","import { Button, Text, Input } from \"@stellar/design-system\";\nimport { Field, Form, Formik, FieldProps } from \"formik\";\nimport React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useSelector } from \"react-redux\";\n\nimport { truncatedPublicKey } from \"helpers/stellar\";\n\nimport { IdenticonImg } from \"popup/components/identicons/IdenticonImg\";\nimport { View } from \"popup/basics/layout/View\";\nimport { authErrorSelector } from \"popup/ducks/accountServices\";\n\nimport \"./styles.scss\";\n\ninterface FormValues {\n  password: string;\n}\n\ninterface EnterPasswordProps {\n  accountAddress?: string;\n  title?: string;\n  description?: string;\n  onConfirm: (password: string) => Promise<void>;\n  onCancel?: () => void;\n  confirmButtonTitle?: string;\n  cancelButtonTitle?: string;\n}\n\nexport const EnterPassword = ({\n  accountAddress,\n  title,\n  description,\n  onConfirm,\n  onCancel,\n  confirmButtonTitle,\n  cancelButtonTitle,\n}: EnterPasswordProps) => {\n  const { t } = useTranslation();\n  const titleLabel = title || t(\"Enter your password\");\n  const descriptionLabel = `${\n    description || t(\"Enter your account password to verify your account.\")\n  }`;\n  const confirmLabel = confirmButtonTitle || t(\"Continue\");\n  const cancelLabel = cancelButtonTitle || t(\"Cancel\");\n\n  const initialValues: FormValues = {\n    password: \"\",\n  };\n\n  const authError = useSelector(authErrorSelector);\n\n  const handleSubmit = async (values: FormValues) => {\n    await onConfirm(values.password);\n  };\n\n  const handleReset = () => {\n    onCancel?.();\n  };\n\n  return (\n    <View.Content alignment=\"center\">\n      <div className=\"EnterPassword\">\n        <div className=\"EnterPassword__wrapper\">\n          {accountAddress && (\n            <>\n              <div className=\"EnterPassword__wrapper__identicon\">\n                <IdenticonImg publicKey={accountAddress} />\n              </div>\n\n              <Text as=\"div\" size=\"xs\" addlClassName=\"EnterPassword__gray11\">\n                {truncatedPublicKey(accountAddress)}\n              </Text>\n\n              <div className=\"EnterPassword__spacer-big\" />\n            </>\n          )}\n\n          <Text as=\"div\" size=\"sm\">\n            {titleLabel}\n          </Text>\n\n          <Text\n            as=\"div\"\n            size=\"xs\"\n            addlClassName=\"EnterPassword__gray11 EnterPassword__text-centered\"\n          >\n            {descriptionLabel}\n          </Text>\n\n          <div className=\"EnterPassword__wrapper__formik\">\n            <Formik\n              initialValues={initialValues}\n              onSubmit={handleSubmit}\n              onReset={handleReset}\n            >\n              {({ dirty, isSubmitting, isValid, errors, touched }) => (\n                <Form>\n                  <Field name=\"password\">\n                    {({ field }: FieldProps) => (\n                      <Input\n                        {...field}\n                        id=\"password-input\"\n                        isPassword\n                        fieldSize=\"md\"\n                        autoComplete=\"off\"\n                        placeholder={t(\"Enter Password\")}\n                        error={\n                          authError ||\n                          (errors.password && touched.password\n                            ? errors.password\n                            : \"\")\n                        }\n                      />\n                    )}\n                  </Field>\n\n                  <div className=\"EnterPassword__spacer-small\" />\n\n                  <div className=\"EnterPassword__wrapper__formik__buttons\">\n                    {onCancel && (\n                      <Button\n                        size=\"md\"\n                        isFullWidth\n                        variant=\"tertiary\"\n                        type=\"reset\"\n                      >\n                        {cancelLabel}\n                      </Button>\n                    )}\n\n                    <Button\n                      size=\"md\"\n                      isFullWidth\n                      variant=\"secondary\"\n                      type=\"submit\"\n                      isLoading={isSubmitting}\n                      disabled={!(dirty && isValid)}\n                    >\n                      {confirmLabel}\n                    </Button>\n                  </div>\n                </Form>\n              )}\n            </Formik>\n          </div>\n        </div>\n      </div>\n    </View.Content>\n  );\n};\n","import React, { useCallback, useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { emitMetric } from \"helpers/metrics\";\n\nimport { AppDispatch } from \"popup/App\";\nimport { ROUTES } from \"popup/constants/routes\";\nimport { METRIC_NAMES } from \"popup/constants/metricsNames\";\nimport { navigateTo } from \"popup/helpers/navigate\";\nimport { SubviewHeader } from \"popup/components/SubviewHeader\";\nimport {\n  addAccount,\n  authErrorSelector,\n  clearApiError,\n  hasPrivateKeySelector,\n  publicKeySelector,\n} from \"popup/ducks/accountServices\";\nimport { EnterPassword } from \"popup/components/EnterPassword\";\n\nexport const AddAccount = () => {\n  const { t } = useTranslation();\n  const dispatch: AppDispatch = useDispatch();\n  const authError = useSelector(authErrorSelector);\n  const publicKey = useSelector(publicKeySelector);\n  const hasPrivateKey = useSelector(hasPrivateKeySelector);\n\n  // In case a password is not provided here popupMessageListener/addAccount\n  // will try to use the existing password value saved in the session store\n  const handleAddAccount = useCallback(\n    async (password: string = \"\") => {\n      const res = await dispatch(addAccount(password));\n\n      if (addAccount.fulfilled.match(res)) {\n        emitMetric(METRIC_NAMES.accountScreenAddAccount, {\n          // eslint-disable-next-line @typescript-eslint/naming-convention\n          number_of_accounts: res.payload.allAccounts.length,\n        });\n        navigateTo(ROUTES.account);\n      }\n    },\n    [dispatch],\n  );\n\n  const handleEnterPassword = async (password: string) => {\n    await handleAddAccount(password);\n  };\n\n  // If we have a private key we can assume the user password is also saved in\n  // the current session store, so no need to ask for it again\n  useEffect(() => {\n    if (hasPrivateKey) {\n      handleAddAccount();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(\n    () => () => dispatch(clearApiError()) as unknown as void,\n    [dispatch],\n  );\n\n  // No need to ask for password if it's already stored, so let's just briefly\n  // wait until user is navigated to the next screen\n  if (hasPrivateKey && !authError) {\n    return null;\n  }\n\n  // Ask for user password in case it's not saved in current session store\n  return (\n    <React.Fragment>\n      <SubviewHeader title=\"\" />\n\n      <EnterPassword\n        accountAddress={publicKey}\n        onConfirm={handleEnterPassword}\n        confirmButtonTitle={t(\"Create New Address\")}\n      />\n    </React.Fragment>\n  );\n};\n","import { Button } from \"@stellar/design-system\";\nimport React from \"react\";\n\nimport IconXRemove from \"popup/assets/icon-x-remove.svg\";\n\ninterface RemoveButtonProps {\n  onClick: () => void;\n}\n\nexport const RemoveButton = ({ onClick }: RemoveButtonProps) => (\n  <Button size=\"md\" variant=\"tertiary\" onClick={onClick}>\n    <img src={IconXRemove} alt=\"icon x remove\" />\n  </Button>\n);\n","import { Button } from \"@stellar/design-system\";\nimport React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport { saveAllowList, settingsSelector } from \"popup/ducks/settings\";\nimport { SubviewHeader } from \"popup/components/SubviewHeader\";\nimport { PunycodedDomain } from \"popup/components/PunycodedDomain\";\nimport { View } from \"popup/basics/layout/View\";\nimport { RemoveButton } from \"popup/basics/buttons/RemoveButton\";\n\nimport \"./styles.scss\";\n\nexport const ManageConnectedApps = () => {\n  const dispatch = useDispatch();\n  const { t } = useTranslation();\n  const { allowList } = useSelector(settingsSelector);\n\n  const handleRemove = (domainToRemove: string) => {\n    const allowListToSave = allowList.filter((item) => item !== domainToRemove);\n\n    dispatch(\n      saveAllowList({\n        allowList: allowListToSave,\n      }),\n    );\n  };\n\n  const handleRemoveAll = () => {\n    dispatch(saveAllowList({ allowList: [] }));\n  };\n\n  return (\n    <React.Fragment>\n      <SubviewHeader title={t(\"Connected apps\")} />\n      <View.Content>\n        <div className=\"ManageConnectedApps\">\n          {allowList.length ? (\n            <div className=\"ManageConnectedApps__wrapper\">\n              <div className=\"ManageConnectedApps__list\">\n                {allowList.map(\n                  (allowedDomain) =>\n                    allowedDomain && (\n                      <div\n                        className=\"ManageConnectedApps__row\"\n                        key={allowedDomain}\n                      >\n                        <PunycodedDomain domain={allowedDomain} isRow />\n                        <RemoveButton\n                          onClick={() => handleRemove(allowedDomain)}\n                        />\n                      </div>\n                    ),\n                )}\n              </div>\n\n              <Button\n                size=\"md\"\n                variant=\"error\"\n                isFullWidth\n                onClick={handleRemoveAll}\n              >\n                {t(\"Disconnect all\")}\n              </Button>\n            </div>\n          ) : (\n            <div className=\"ManageConnectedApps__empty\">\n              {t(\"No connected apps found\")}\n            </div>\n          )}\n        </div>\n      </View.Content>\n    </React.Fragment>\n  );\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Icon } from \"@stellar/design-system\";\n\nimport { ROUTES } from \"popup/constants/routes\";\n\nimport \"./styles.scss\";\n\ninterface ListNavLinkProps {\n  children: string | React.ReactNode;\n  href: string | ROUTES;\n  searchParams?: string;\n  icon?: React.ReactNode;\n}\n\nconst renderListNavLinkIcon = (icon: React.ReactNode) => (\n  <div className=\"ListNavLink__icon\">{icon}</div>\n);\n\nexport const ListNavLink = ({\n  children,\n  href,\n  searchParams = \"\",\n  icon,\n}: ListNavLinkProps) => {\n  const fullHref = `${href}${searchParams}`;\n  return (\n    <div className=\"ListNavLink\">\n      {icon ? renderListNavLinkIcon(icon) : null}\n      {Object.values(ROUTES).includes(href as ROUTES) ? (\n        <Link to={fullHref}>\n          {children} <Icon.ChevronRight className=\"ListNavLink__arrow\" />\n        </Link>\n      ) : (\n        <a rel=\"noreferrer\" target=\"_blank\" href={fullHref}>\n          {children} <Icon.ChevronRight className=\"ListNavLink__arrow\" />\n        </a>\n      )}\n    </div>\n  );\n};\n\ninterface ListNavButtonLinkProps {\n  children: string | React.ReactNode;\n  handleClick: () => void;\n}\n\nexport const ListNavButtonLink = ({\n  children,\n  handleClick,\n}: ListNavButtonLinkProps) => (\n  <div className=\"ListNavLink\">\n    <span\n      onClick={(e) => {\n        e.preventDefault();\n        handleClick();\n      }}\n    >\n      {children} <Icon.ChevronRight className=\"ListNavLink__arrow\" />\n    </span>\n  </div>\n);\n\nexport const ListNavLinkWrapper = ({\n  children,\n}: {\n  children: React.ReactNode;\n}) => <div className=\"ListNavLink__wrapper\">{children}</div>;\n","import React from \"react\";\nimport { Button, Select, Loader, Badge } from \"@stellar/design-system\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { ListNavLink, ListNavLinkWrapper } from \"popup/basics/ListNavLink\";\nimport { ROUTES } from \"popup/constants/routes\";\nimport { navigateTo } from \"popup/helpers/navigate\";\nimport { NETWORKS } from \"@shared/constants/stellar\";\nimport { AssetsListKey } from \"@shared/constants/soroban/token\";\n\nimport { SubviewHeader } from \"popup/components/SubviewHeader\";\nimport { NetworkIcon } from \"popup/components/manageNetwork/NetworkIcon\";\nimport { View } from \"popup/basics/layout/View\";\n\nimport {\n  AssetsListsData,\n  SortedAssetsListsData,\n} from \"popup/views/ManageAssetsLists\";\n\nimport \"./styles.scss\";\n\nconst ASSETS_LISTS_NETWORKS = [\n  [\"Mainnet\", NETWORKS.PUBLIC],\n  [\"Testnet\", NETWORKS.TESTNET],\n];\n\ninterface AssetListsProps {\n  sortedAssetsListsData: SortedAssetsListsData;\n  handleSelectChange: (e: React.ChangeEvent<HTMLSelectElement>) => void;\n  selectedNetwork: AssetsListKey;\n  isLoading: boolean;\n}\n\nconst AssetListLink = ({ assetList }: { assetList: AssetsListsData }) => (\n  <ListNavLink\n    href={ROUTES.manageAssetsListsModifyAssetList}\n    searchParams={`?asset-list-url=${encodeURIComponent(assetList.url)}`}\n    key={assetList.name}\n  >\n    <div>\n      <div className=\"ManageAssetsLists__title\">{assetList.name}</div>\n      <div className=\"ManageAssetsLists__subtitle\">{assetList.provider}</div>\n    </div>\n  </ListNavLink>\n);\n\nexport const AssetLists = ({\n  sortedAssetsListsData,\n  handleSelectChange,\n  selectedNetwork,\n  isLoading,\n}: AssetListsProps) => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <SubviewHeader title=\"Asset Lists\" />\n      <View.Content hasNoTopPadding>\n        <div className=\"ManageAssetsLists__select-wrapper\">\n          <Select\n            fieldSize=\"sm\"\n            id=\"select\"\n            className=\"ManageAssetsLists__select\"\n            onChange={handleSelectChange}\n          >\n            {ASSETS_LISTS_NETWORKS.map(([networkName, networkValue]) => (\n              <option\n                value={networkValue}\n                key={networkName}\n                selected={networkValue === selectedNetwork}\n              >\n                {networkName}\n              </option>\n            ))}\n          </Select>\n        </div>\n        <div className=\"ManageAssetsLists__network\">\n          <NetworkIcon index={selectedNetwork === NETWORKS.PUBLIC ? 0 : 1} />\n        </div>\n        {isLoading ? (\n          <div className=\"ManageAssetsLists__loader\">\n            <Loader size=\"5rem\" />\n          </div>\n        ) : (\n          <>\n            <div className=\"ManageAssetsLists__list\">\n              <div className=\"ManageAssetsLists__badge\">\n                <Badge variant=\"success\">{t(\"Enabled\")}</Badge>\n              </div>\n              <ListNavLinkWrapper>\n                {sortedAssetsListsData.enabled.map((assetList) => (\n                  <AssetListLink assetList={assetList} />\n                ))}\n              </ListNavLinkWrapper>\n            </div>\n\n            {sortedAssetsListsData.disabled.length ? (\n              <div className=\"ManageAssetsLists__list\">\n                <div className=\"ManageAssetsLists__badge\">\n                  <Badge variant=\"tertiary\">{t(\"Disabled\")}</Badge>\n                </div>\n                <ListNavLinkWrapper>\n                  {sortedAssetsListsData.disabled.map((assetList) => (\n                    <AssetListLink assetList={assetList} />\n                  ))}\n                </ListNavLinkWrapper>\n              </div>\n            ) : null}\n          </>\n        )}\n      </View.Content>\n      <View.Footer>\n        <Button\n          disabled={isLoading}\n          size=\"md\"\n          isFullWidth\n          variant=\"tertiary\"\n          onClick={() => navigateTo(ROUTES.manageAssetsListsModifyAssetList)}\n        >\n          {t(\"Add new list\")}\n        </Button>\n      </View.Footer>\n    </>\n  );\n};\n","import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Button } from \"@stellar/design-system\";\n\nimport { LoadingBackground } from \"popup/basics/LoadingBackground\";\nimport { View } from \"popup/basics/layout/View\";\n\nimport \"./styles.scss\";\n\ninterface DeleteModalProps {\n  handleCancel: () => void;\n  handleSubmit: () => void;\n}\n\nexport const DeleteModal = ({\n  handleCancel,\n  handleSubmit,\n}: DeleteModalProps) => {\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"DeleteModal\">\n      <View.Content>\n        <div className=\"DeleteModal__content\">\n          <div className=\"DeleteModal__title\">\n            {t(\"Are you sure you want to delete this list?\")}\n          </div>\n          <div className=\"DeleteModal__body\">\n            {t(\"Are you sure you want to delete this list?\")}{\" \"}\n            {t(\"If you delete this list, you will have to re-add it manually.\")}\n          </div>\n          <div className=\"DeleteModal__button-row\">\n            <Button\n              size=\"md\"\n              type=\"button\"\n              isFullWidth\n              variant=\"secondary\"\n              onClick={handleCancel}\n            >\n              {t(\"Cancel\")}\n            </Button>\n            <Button\n              size=\"md\"\n              type=\"button\"\n              isFullWidth\n              variant=\"error\"\n              onClick={handleSubmit}\n            >\n              {t(\"Confirm delete\")}\n            </Button>\n          </div>\n        </div>\n      </View.Content>\n      <LoadingBackground isActive />\n    </div>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { Button, Input, Toggle, Notification } from \"@stellar/design-system\";\nimport { Formik, Form, Field, FieldProps } from \"formik\";\nimport { useTranslation } from \"react-i18next\";\nimport { useDispatch } from \"react-redux\";\nimport { useLocation } from \"react-router-dom\";\nimport { captureException } from \"@sentry/browser\";\n\nimport {\n  DEFAULT_ASSETS_LISTS,\n  AssetsListKey,\n} from \"@shared/constants/soroban/token\";\nimport { ROUTES } from \"popup/constants/routes\";\nimport { AppDispatch } from \"popup/App\";\n\nimport { AssetsListsData } from \"popup/views/ManageAssetsLists\";\nimport { SubviewHeader } from \"popup/components/SubviewHeader\";\nimport { View } from \"popup/basics/layout/View\";\nimport { addAssetsList, modifyAssetsList } from \"popup/ducks/settings\";\nimport { navigateTo } from \"popup/helpers/navigate\";\nimport { schemaValidatedAssetList } from \"popup/helpers/searchAsset\";\n\nimport \"./styles.scss\";\nimport { DeleteModal } from \"../DeleteModal\";\n\ninterface ModifyAssetListProps {\n  selectedNetwork: AssetsListKey;\n  assetsListsData: AssetsListsData[];\n}\n\ninterface FormValues {\n  assetList: string;\n}\n\nexport const ModifyAssetList = ({\n  selectedNetwork,\n  assetsListsData,\n}: ModifyAssetListProps) => {\n  const { t } = useTranslation();\n  const location = useLocation();\n  const params = new URLSearchParams(location.search);\n  const assetListUrl = params.get(\"asset-list-url\");\n  const dispatch: AppDispatch = useDispatch();\n  const [fetchErrorString, setFetchErrorString] = useState(\"\");\n  const [submitErrorString, setSubmitErrorString] = useState(\"\");\n  const [assetListInfo, setAssetListInfo] = useState({} as AssetsListsData);\n  const [isFetchingAssetList, setIsFetchingAssetList] = useState(false);\n  const [isEditing, setIsEditing] = useState(false);\n  const [isDefaultAssetList, setIsDefaultAssetList] = useState(false);\n  const [isShowingDeleteModal, setIsShowingDeleteModal] = useState(false);\n\n  const defaultAssetsList = DEFAULT_ASSETS_LISTS[selectedNetwork];\n\n  useEffect(() => {\n    if (assetListUrl) {\n      /* Based on the query param, we're in EDIT mode. Prepopulate some information */\n      const decodedAssetListUrl = decodeURIComponent(assetListUrl);\n      const assetsListsSelection = assetsListsData.find(\n        ({ url }) => url === decodedAssetListUrl,\n      );\n      if (assetsListsSelection) {\n        const { url, name, description, provider, isEnabled } =\n          assetsListsSelection;\n        setAssetListInfo({\n          url,\n          name,\n          description,\n          provider,\n          isEnabled,\n        });\n        setIsEditing(true);\n\n        if (\n          defaultAssetsList.find(\n            ({ url: defaultUrl }) => defaultUrl === decodedAssetListUrl,\n          )\n        ) {\n          // this is a default network, disable some features\n          setIsDefaultAssetList(true);\n        }\n      }\n    }\n  }, [assetsListsData, assetListUrl, defaultAssetsList]);\n\n  const handleSearch = async (event: React.MouseEvent, values: FormValues) => {\n    let url;\n    let res;\n    setIsFetchingAssetList(true);\n    setFetchErrorString(\"\");\n    setSubmitErrorString(\"\");\n    setAssetListInfo({} as AssetsListsData);\n    event.preventDefault();\n\n    try {\n      url = new URL(values.assetList);\n    } catch (err) {\n      console.error(err);\n      setFetchErrorString(\"Unable to parse URL\");\n      setIsFetchingAssetList(false);\n      return;\n    }\n\n    try {\n      res = await fetch(url);\n    } catch (err) {\n      console.error(err);\n      setFetchErrorString(\"Unable to fetch asset list\");\n      setIsFetchingAssetList(false);\n      return;\n    }\n\n    if (!res.ok) {\n      setFetchErrorString(\"Unable to fetch asset list\");\n      setIsFetchingAssetList(false);\n      return;\n    }\n\n    const resJson = await res.json();\n\n    // check against the SEP-0042 schema\n    const validatedList = await schemaValidatedAssetList(resJson);\n\n    if (!validatedList) {\n      captureException(\"Unable to fetch SEP-0042 JSON schema\");\n      setFetchErrorString(\"Unable to validate asset asset list\");\n      return;\n    }\n\n    if (validatedList.errors?.length) {\n      const errors = validatedList.errors.map(\n        ({ stack }: { stack: string }) => stack,\n      );\n\n      setFetchErrorString(\n        `Fetched asset list does not conform to schema: ${JSON.stringify(\n          errors.join(\" | \"),\n        )}`,\n      );\n      setIsFetchingAssetList(false);\n      return;\n    }\n\n    if (resJson.network !== selectedNetwork.toLowerCase()) {\n      const getNetworkName = (network: string) =>\n        network === \"public\" ? \"Mainnet\" : \"Testnet\";\n      setFetchErrorString(\n        `The entered asset list belongs to \"${getNetworkName(\n          resJson.network as string,\n        )}\": Currently editing \"${getNetworkName(\n          selectedNetwork.toLowerCase(),\n        )}\" lists.`,\n      );\n      setIsFetchingAssetList(false);\n      return;\n    }\n\n    setFetchErrorString(\"\");\n    setAssetListInfo({\n      url: values.assetList,\n      name: resJson.name,\n      description: resJson.description,\n      provider: resJson.provider,\n      isEnabled:\n        assetListInfo.isEnabled === undefined ? true : assetListInfo.isEnabled,\n    });\n\n    setIsFetchingAssetList(false);\n  };\n\n  /* handle editing an exisiting asset list's \"enabled\" status */\n  const handleIsEnabledChange = async (\n    e: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    setAssetListInfo({\n      ...assetListInfo,\n      isEnabled: e.target.checked,\n    });\n    if (isEditing) {\n      await dispatch(\n        modifyAssetsList({\n          assetsList: {\n            url: assetListInfo.url,\n            isEnabled: e.target.checked,\n          },\n          network: selectedNetwork,\n          isDeleteAssetsList: false,\n        }),\n      );\n    }\n  };\n\n  /* handle adding a brand a new asset list */\n  const handleAddAssetList = async (values: FormValues) => {\n    const assetsList = {\n      url: values.assetList,\n      isEnabled: assetListInfo.isEnabled,\n    };\n    const addAssetsListResp = await dispatch(\n      addAssetsList({ assetsList, network: selectedNetwork }),\n    );\n\n    if (addAssetsList.rejected.match(addAssetsListResp)) {\n      setSubmitErrorString(\n        addAssetsListResp.payload?.errorMessage || \"Unable to save asset list\",\n      );\n    }\n\n    if (addAssetsList.fulfilled.match(addAssetsListResp)) {\n      navigateTo(ROUTES.manageAssetsLists);\n    }\n  };\n\n  /* handle deleting an existing asset list  */\n  const handleEditAssetList = async () => {\n    const modifyAssetsListResp = await dispatch(\n      modifyAssetsList({\n        assetsList: {\n          url: assetListInfo.url,\n          isEnabled: assetListInfo.isEnabled,\n        },\n        network: selectedNetwork,\n        isDeleteAssetsList: true,\n      }),\n    );\n\n    if (modifyAssetsList.rejected.match(modifyAssetsListResp)) {\n      setSubmitErrorString(\n        modifyAssetsListResp.payload?.errorMessage ||\n          \"Unable to delete asset list\",\n      );\n    }\n\n    if (modifyAssetsList.fulfilled.match(modifyAssetsListResp)) {\n      navigateTo(ROUTES.manageAssetsLists);\n    }\n  };\n\n  /* Show the confirm delete modal */\n  const handleShowDeleteModal = () => {\n    setIsShowingDeleteModal(true);\n  };\n\n  return (\n    <>\n      <SubviewHeader title=\"Add Asset List\" />\n      <View.Content hasNoTopPadding>\n        <Formik\n          initialValues={{\n            assetList: assetListInfo.url || \"\",\n            isEnabled: assetListInfo.isEnabled || true,\n          }}\n          onSubmit={isEditing ? handleShowDeleteModal : handleAddAssetList}\n          enableReinitialize={true}\n        >\n          {({ isSubmitting, isValid, errors, values, setSubmitting }) => (\n            <Form>\n              {isShowingDeleteModal ? (\n                <DeleteModal\n                  handleCancel={() => {\n                    setIsShowingDeleteModal(false);\n                    setSubmitting(false);\n                  }}\n                  handleSubmit={handleEditAssetList}\n                />\n              ) : null}\n              <div>\n                <label className=\"ModifyAssetList__label\">\n                  {t(\"Enter a Stellar Asset List compatible URL\")}\n                </label>\n                <div className=\"ModifyAssetList__input\">\n                  <Field name=\"assetList\">\n                    {({ field }: FieldProps) => (\n                      <Input\n                        fieldSize=\"md\"\n                        autoFocus\n                        autoComplete=\"off\"\n                        id=\"assetList\"\n                        placeholder={t(\"Token List URL\")}\n                        {...field}\n                        error={errors.assetList}\n                        disabled={isDefaultAssetList}\n                      />\n                    )}\n                  </Field>\n                </div>\n              </div>\n              <Button\n                size=\"md\"\n                isFullWidth\n                variant=\"tertiary\"\n                isLoading={isFetchingAssetList}\n                disabled={!isValid || isDefaultAssetList}\n                onClick={(e) => handleSearch(e, values)}\n              >\n                {t(\"Fetch list information\")}\n              </Button>\n              <div className=\"ModifyAssetList__results\">\n                {Object.keys(assetListInfo).length ? (\n                  <>\n                    <div className=\"ModifyAssetList__info\">\n                      <div className=\"AddAssetList__info__name\">\n                        {assetListInfo.name}\n                      </div>\n                      <div className=\"ModifyAssetList__info__provider\">\n                        {t(\"by\")} {assetListInfo.provider}\n                      </div>\n                      <div className=\"ModifyAssetList__info__description\">\n                        {assetListInfo.description}\n                      </div>\n                    </div>\n                    <div className=\"ModifyAssetList__enable\">\n                      <label\n                        htmlFor=\"isEnabled\"\n                        className=\"ModifyAssetList__enable__label\"\n                      >\n                        {t(\"Enable this list\")}\n                      </label>\n                      <Toggle\n                        checked={assetListInfo.isEnabled}\n                        id=\"isEnabled\"\n                        // @ts-ignore\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          handleIsEnabledChange(e)\n                        }\n                      />\n                    </div>\n                  </>\n                ) : null}\n                {fetchErrorString ? (\n                  <View.Inset hasScrollShadow>\n                    <div className=\"ModifyAssetList__not-found\">\n                      {fetchErrorString}\n                    </div>\n                  </View.Inset>\n                ) : null}\n                {submitErrorString ? (\n                  <div className=\"ModifyAssetList__submit-error\">\n                    <Notification variant=\"warning\" title={submitErrorString} />\n                  </div>\n                ) : null}\n              </div>\n\n              {isEditing ? (\n                <Button\n                  size=\"md\"\n                  isFullWidth\n                  variant=\"error\"\n                  type=\"submit\"\n                  isLoading={isSubmitting}\n                  disabled={isDefaultAssetList}\n                >\n                  {t(\"Delete\")}\n                </Button>\n              ) : (\n                <Button\n                  size=\"md\"\n                  isFullWidth\n                  variant=\"secondary\"\n                  type=\"submit\"\n                  isLoading={isSubmitting}\n                  disabled={Boolean(!Object.keys(assetListInfo).length)}\n                >\n                  {t(\"Add list\")}\n                </Button>\n              )}\n            </Form>\n          )}\n        </Formik>\n      </View.Content>\n    </>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Switch } from \"react-router-dom\";\nimport { captureException } from \"@sentry/browser\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { ROUTES } from \"popup/constants/routes\";\nimport { NETWORKS } from \"@shared/constants/stellar\";\nimport { AssetsListKey } from \"@shared/constants/soroban/token\";\nimport { settingsSelector } from \"popup/ducks/settings\";\nimport { PublicKeyRoute } from \"popup/Router\";\n\nimport { AssetLists } from \"popup/components/manageAssetsLists/AssetLists\";\nimport { ModifyAssetList } from \"popup/components/manageAssetsLists/ModifyAssetList\";\n\nimport \"./styles.scss\";\n\nexport interface AssetsListsData {\n  url: string;\n  name: string;\n  provider: string;\n  description: string;\n  isEnabled: boolean;\n}\n\nexport interface SortedAssetsListsData {\n  enabled: AssetsListsData[];\n  disabled: AssetsListsData[];\n}\n\nexport const ManageAssetsLists = () => {\n  const [selectedNetwork, setSelectedNetwork] = useState(\"\" as AssetsListKey);\n  const [assetsListsData, setAssetsListsData] = useState(\n    [] as AssetsListsData[],\n  );\n  const [sortedAssetsListsData, setSortedAssetsListsData] = useState({\n    enabled: [],\n    disabled: [],\n  } as SortedAssetsListsData);\n  const [isLoading, setIsLoading] = useState(true);\n  const { assetsLists, networkDetails } = useSelector(settingsSelector);\n  const { t } = useTranslation();\n\n  useEffect(() => {\n    if (!selectedNetwork) {\n      return;\n    }\n    const networkLists = assetsLists[selectedNetwork] || [];\n    const listsArr: AssetsListsData[] = [];\n\n    const fetchLists = async () => {\n      setIsLoading(true);\n\n      // TODO: make these calls concurrent\n      // eslint-disable-next-line no-restricted-syntax\n      for (const networkList of networkLists) {\n        const { url = \"\", isEnabled } = networkList;\n        try {\n          const res = await fetch(url);\n          const resJson: AssetsListsData = await res.json();\n          resJson.url = url;\n          resJson.isEnabled = isEnabled;\n          listsArr.push(resJson);\n        } catch (e) {\n          captureException(`Failed to load asset list: ${url}`);\n        }\n      }\n\n      setAssetsListsData(listsArr);\n      setIsLoading(false);\n    };\n\n    fetchLists();\n  }, [selectedNetwork, assetsLists]);\n\n  useEffect(() => {\n    if (assetsListsData.length) {\n      const sortedList: SortedAssetsListsData = {\n        enabled: [],\n        disabled: [],\n      };\n      assetsListsData.forEach((list) => {\n        if (list.isEnabled) {\n          sortedList.enabled.push(list);\n        } else {\n          sortedList.disabled.push(list);\n        }\n      });\n\n      setSortedAssetsListsData(sortedList);\n    }\n  }, [assetsListsData]);\n\n  useEffect(() => {\n    setSelectedNetwork(\n      networkDetails.network === NETWORKS.TESTNET\n        ? NETWORKS.TESTNET\n        : NETWORKS.PUBLIC,\n    );\n  }, [networkDetails]);\n\n  const handleSelectChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedNetwork(e.target.value as AssetsListKey);\n  };\n\n  return assetsLists ? (\n    <>\n      <Switch>\n        <PublicKeyRoute exact path={ROUTES.manageAssetsLists}>\n          <AssetLists\n            sortedAssetsListsData={sortedAssetsListsData}\n            handleSelectChange={handleSelectChange}\n            selectedNetwork={selectedNetwork}\n            isLoading={isLoading}\n          />\n        </PublicKeyRoute>\n        <PublicKeyRoute exact path={ROUTES.manageAssetsListsModifyAssetList}>\n          <ModifyAssetList\n            assetsListsData={assetsListsData}\n            selectedNetwork={selectedNetwork}\n          />\n        </PublicKeyRoute>\n      </Switch>\n    </>\n  ) : (\n    <div>{t(\"Unable to parse assets lists\")}</div>\n  );\n};\n","import React from \"react\";\n\nimport \"./styles.scss\";\n\ninterface FormRowsProps {\n  children: React.ReactNode;\n}\nexport const FormRows = ({ children }: FormRowsProps) => (\n  <div className=\"FormRows\">{children}</div>\n);\n\ninterface SubmitButtonWrapperProps {\n  children: React.ReactNode;\n  isCenterAligned?: boolean;\n}\nexport const SubmitButtonWrapper = ({\n  children,\n  isCenterAligned,\n}: SubmitButtonWrapperProps) => (\n  <div\n    className={`SubmitButtonWrapper ${\n      isCenterAligned ? \"SubmitButtonWrapper--center\" : \"\"\n    }`}\n  >\n    {children}\n  </div>\n);\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Form, Field, FieldProps, Formik } from \"formik\";\nimport { bool as YupBool, object as YupObject, string as YupString } from \"yup\";\nimport {\n  Button,\n  Checkbox,\n  Icon,\n  Input,\n  Notification,\n} from \"@stellar/design-system\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { ROUTES } from \"popup/constants/routes\";\nimport { METRIC_NAMES } from \"popup/constants/metricsNames\";\nimport { AppDispatch } from \"popup/App\";\nimport { navigateTo } from \"popup/helpers/navigate\";\nimport { emitMetric } from \"helpers/metrics\";\nimport { FormRows } from \"popup/basics/Forms\";\nimport { importAccount, authErrorSelector } from \"popup/ducks/accountServices\";\n\nimport { SubviewHeader } from \"popup/components/SubviewHeader\";\n\nimport \"./styles.scss\";\nimport { View } from \"popup/basics/layout/View\";\n\nexport const ImportAccount = () => {\n  interface FormValues {\n    password: string;\n    privateKey: string;\n    authorization: boolean;\n  }\n\n  const initialValues: FormValues = {\n    password: \"\",\n    privateKey: \"\",\n    authorization: false,\n  };\n\n  const ImportAccountSchema = YupObject().shape({\n    privateKey: YupString().required(),\n    password: YupString().required(),\n    authorization: YupBool().oneOf([true], \"required\"),\n  });\n\n  const { t } = useTranslation();\n  const dispatch: AppDispatch = useDispatch();\n  const authError = useSelector(authErrorSelector);\n\n  const handleSubmit = async (values: FormValues) => {\n    const { password, privateKey } = values;\n\n    const res = await dispatch(importAccount({ password, privateKey }));\n\n    if (importAccount.fulfilled.match(res)) {\n      emitMetric(METRIC_NAMES.accountScreenImportAccount, {\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        number_of_accounts: res.payload.allAccounts.length,\n      });\n      navigateTo(ROUTES.account);\n    } else {\n      emitMetric(METRIC_NAMES.accountScreenImportAccountFail, {\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        error_type: res.payload?.errorMessage || \"\",\n      });\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <SubviewHeader title={t(\"Import Stellar Secret Key\")} />\n\n      <Formik\n        initialValues={initialValues}\n        onSubmit={handleSubmit}\n        validationSchema={ImportAccountSchema}\n      >\n        {({ dirty, isSubmitting, isValid }) => (\n          <Form className=\"View__contentAndFooterWrapper\">\n            <View.Content>\n              <div className=\"ImportAccount__warning-block\">\n                <Notification\n                  variant=\"warning\"\n                  icon={<Icon.InfoOctagon />}\n                  title={t(\"Read before importing your key\")}\n                >\n                  {t(\n                    \"Freighter can’t recover your imported secret key using your recovery phrase. Storing your secret key is your responsibility. Freighter will never ask for your secret key outside of the extension.\",\n                  )}\n                </Notification>\n              </div>\n\n              <FormRows>\n                <Field name=\"privateKey\">\n                  {({ field }: FieldProps) => (\n                    <Input\n                      fieldSize=\"md\"\n                      autoComplete=\"off\"\n                      id=\"privateKey-input\"\n                      type=\"password\"\n                      placeholder={t(\"Your Stellar secret key\")}\n                      error={authError}\n                      {...field}\n                    />\n                  )}\n                </Field>\n                <Field name=\"password\">\n                  {({ field }: FieldProps) => (\n                    <Input\n                      fieldSize=\"md\"\n                      autoComplete=\"off\"\n                      id=\"password-input\"\n                      type=\"password\"\n                      placeholder={t(\"Enter password\")}\n                      error={authError}\n                      {...field}\n                    />\n                  )}\n                </Field>\n                <Field name=\"authorization\">\n                  {({ field }: FieldProps) => (\n                    <Checkbox\n                      fieldSize=\"md\"\n                      autoComplete=\"off\"\n                      id=\"authorization-input\"\n                      label={t(\n                        \"I’m aware Freighter can’t recover the imported  secret key\",\n                      )}\n                      {...field}\n                    />\n                  )}\n                </Field>\n              </FormRows>\n            </View.Content>\n            <View.Footer isInline>\n              <Button\n                size=\"md\"\n                isFullWidth\n                variant=\"secondary\"\n                onClick={() => navigateTo(ROUTES.account)}\n              >\n                {t(\"Cancel\")}\n              </Button>\n              <Button\n                size=\"md\"\n                isFullWidth\n                variant=\"primary\"\n                type=\"submit\"\n                isLoading={isSubmitting}\n                disabled={!(dirty && isValid)}\n              >\n                {t(\"Import\")}\n              </Button>\n            </View.Footer>\n          </Form>\n        )}\n      </Formik>\n    </React.Fragment>\n  );\n};\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport { navigateTo } from \"popup/helpers/navigate\";\nimport { ROUTES } from \"popup/constants/routes\";\nimport { SubviewHeader } from \"popup/components/SubviewHeader\";\nimport { setConnectingWalletType } from \"popup/ducks/accountServices\";\nimport { walletAssets } from \"popup/helpers/hardwareConnect\";\nimport {\n  ConfigurableWalletType,\n  WalletType,\n} from \"@shared/constants/hardwareWallet\";\n\nimport \"./styles.scss\";\nimport { View } from \"popup/basics/layout/View\";\n\nconst WalletOption = ({\n  walletType,\n}: {\n  walletType: ConfigurableWalletType;\n}) => {\n  const dispatch = useDispatch();\n\n  const handleContinue = (type: ConfigurableWalletType) => {\n    dispatch(setConnectingWalletType(type));\n    navigateTo(ROUTES.connectWalletPlugin, `?walletType=${walletType}`);\n  };\n\n  return (\n    <li\n      className=\"SelectHardwareWallet__option\"\n      onClick={() => handleContinue(walletType)}\n    >\n      <img src={walletAssets[walletType].logo} alt={`${walletType} logo`} />\n    </li>\n  );\n};\n\nexport const SelectHardwareWallet = () => (\n  <>\n    <SubviewHeader\n      title=\"Connect a hardware wallet\"\n      hasBackButton={true}\n      customBackAction={() => navigateTo(ROUTES.account)}\n    />\n    <View.Content>\n      <div className=\"SelectHardwareWallet\">\n        <p>Select a hardware wallet you’d like to use with Freighter.</p>\n        <ul className=\"SelectHardwareWallet__options-list\">\n          {Object.entries(WalletType).map(([_k, v]) =>\n            v ? (\n              <WalletOption key={v} walletType={v as ConfigurableWalletType} />\n            ) : null,\n          )}\n        </ul>\n      </div>\n    </View.Content>\n  </>\n);\n","import { createAsyncThunk } from \"@reduxjs/toolkit\";\n\nimport {\n  rejectAccess as internalRejectAccess,\n  grantAccess as internalGrantAccess,\n  signTransaction as internalSignTransaction,\n  signBlob as internalSignBlob,\n  signAuthEntry as internalSignAuthEntry,\n} from \"@shared/api/internal\";\n\nexport const grantAccess = createAsyncThunk(\"grantAccess\", internalGrantAccess);\n\nexport const rejectAccess = createAsyncThunk(\n  \"rejectAccess\",\n  internalRejectAccess,\n);\n\nexport const signTransaction = createAsyncThunk(\n  \"signTransaction\",\n  internalSignTransaction,\n);\n\nexport const signBlob = createAsyncThunk(\"signBlob\", internalSignBlob);\nexport const signEntry = createAsyncThunk(\"signEntry\", internalSignAuthEntry);\n\n// Basically an alias for metrics purposes\nexport const rejectTransaction = createAsyncThunk(\n  \"rejectTransaction\",\n  internalRejectAccess,\n);\n\n// Basically an alias for metrics purposes\nexport const rejectBlob = createAsyncThunk(\"rejectBlob\", internalRejectAccess);\nexport const rejectAuthEntry = createAsyncThunk(\n  \"rejectAuthEntry\",\n  internalRejectAccess,\n);\n","import React, { useEffect } from \"react\";\n\nimport \"./styles.scss\";\n\ninterface ModalHeaderProps {\n  children: React.ReactNode;\n}\n\nexport const ModalHeader = ({ children }: ModalHeaderProps) => (\n  <section className=\"ModalWrapper__header\">{children}</section>\n);\n\ninterface ModalWrapperProps {\n  children: React.ReactNode;\n}\n\nexport const ModalWrapper = ({ children }: ModalWrapperProps) => {\n  useEffect(() => {\n    const disableScrollXClass = \"ModalWrapper__disable-scroll-x\";\n    document.querySelector(\"body\")?.classList.add(disableScrollXClass);\n\n    return () =>\n      document.querySelector(\"body\")?.classList.remove(disableScrollXClass);\n  }, []);\n\n  return (\n    <div className=\"ModalWrapper__scrollbar\">\n      <section className=\"ModalWrapper\">{children} </section>\n    </div>\n  );\n};\n\ninterface ButtonsContainerProps {\n  children: React.ReactNode;\n}\n\nexport const ButtonsContainer = ({ children }: ButtonsContainerProps) => (\n  <div className=\"ModalWrapper__buttons-container\">{children}</div>\n);\n","import { METRIC_NAMES } from \"popup/constants/metricsNames\";\n\nimport {\n  grantAccess,\n  rejectAccess,\n  signEntry,\n  signTransaction,\n  signBlob,\n  rejectTransaction,\n} from \"popup/ducks/access\";\nimport { registerHandler, emitMetric, MetricsData } from \"helpers/metrics\";\nimport { METRICS_DATA } from \"constants/localStorageTypes\";\nimport { AppState } from \"popup/App\";\n\nregisterHandler<AppState>(grantAccess.fulfilled, () => {\n  emitMetric(METRIC_NAMES.grantAccessSuccess);\n});\nregisterHandler<AppState>(rejectAccess.fulfilled, () => {\n  emitMetric(METRIC_NAMES.grantAccessFail);\n});\nregisterHandler<AppState>(signTransaction.fulfilled, () => {\n  const metricsData: MetricsData = JSON.parse(\n    localStorage.getItem(METRICS_DATA) || \"{}\",\n  );\n  emitMetric(METRIC_NAMES.signTransaction, {\n    accountType: metricsData.accountType,\n  });\n});\nregisterHandler<AppState>(rejectTransaction.fulfilled, () => {\n  emitMetric(METRIC_NAMES.rejectTransaction);\n});\nregisterHandler<AppState>(signBlob.fulfilled, () => {\n  const metricsData: MetricsData = JSON.parse(\n    localStorage.getItem(METRICS_DATA) || \"{}\",\n  );\n  emitMetric(METRIC_NAMES.signBlob, {\n    accountType: metricsData.accountType,\n  });\n});\nregisterHandler<AppState>(signEntry.fulfilled, () => {\n  const metricsData: MetricsData = JSON.parse(\n    localStorage.getItem(METRICS_DATA) || \"{}\",\n  );\n  emitMetric(METRIC_NAMES.signAuthEntry, {\n    accountType: metricsData.accountType,\n  });\n});\n","import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useLocation } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport { Button, Loader } from \"@stellar/design-system\";\n\nimport { getUrlHostname, parsedSearchParam } from \"helpers/urls\";\nimport { rejectAccess, grantAccess } from \"popup/ducks/access\";\nimport { publicKeySelector } from \"popup/ducks/accountServices\";\nimport { ButtonsContainer, ModalWrapper } from \"popup/basics/Modal\";\nimport { DomainScanModalInfo } from \"popup/components/ModalInfo\";\nimport { KeyIdenticon } from \"popup/components/identicons/KeyIdenticon\";\nimport { settingsNetworkDetailsSelector } from \"popup/ducks/settings\";\nimport { useScanSite } from \"popup/helpers/blockaid\";\n\nimport \"popup/metrics/access\";\nimport \"./styles.scss\";\n\nexport const GrantAccess = () => {\n  const { t } = useTranslation();\n  const location = useLocation();\n  const dispatch = useDispatch();\n  const [isGranting, setIsGranting] = useState(false);\n\n  const { url } = parsedSearchParam(location.search);\n  const domain = getUrlHostname(url);\n  const publicKey = useSelector(publicKeySelector);\n  const networkDetails = useSelector(settingsNetworkDetailsSelector);\n  const { scanSite, isLoading, data } = useScanSite();\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await scanSite(url, networkDetails);\n    };\n    fetchData();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const rejectAndClose = () => {\n    dispatch(rejectAccess());\n    window.close();\n  };\n\n  const grantAndClose = async () => {\n    setIsGranting(true);\n    // eslint-disable-next-line\n    await dispatch(grantAccess(url));\n    window.close();\n  };\n\n  const isMalicious =\n    data && \"is_malicious\" in data ? data.is_malicious : false;\n\n  return (\n    <>\n      <ModalWrapper>\n        {isLoading ? (\n          <div className=\"GrantAccess__loader\">\n            <Loader size=\"5rem\" />\n          </div>\n        ) : (\n          <DomainScanModalInfo\n            domain={domain}\n            isMalicious={isMalicious}\n            scanStatus={data.status}\n            subject={t(\n              `Allow ${domain} to view your wallet address, balance, activity and request approval for transactions`,\n            )}\n          >\n            <div\n              className=\"GrantAccess__SigningWith\"\n              data-testid=\"grant-access-view\"\n            >\n              <h5>Connecting with</h5>\n              <div className=\"GrantAccess__PublicKey\">\n                <KeyIdenticon publicKey={publicKey} />\n              </div>\n            </div>\n            {isMalicious ? (\n              <ButtonsContainer>\n                <Button\n                  size=\"md\"\n                  isFullWidth\n                  variant=\"error\"\n                  isLoading={isGranting}\n                  onClick={() => grantAndClose()}\n                >\n                  {t(\"Connect anyway\")}\n                </Button>\n                <Button\n                  size=\"md\"\n                  isFullWidth\n                  variant=\"tertiary\"\n                  onClick={rejectAndClose}\n                >\n                  {t(\"Reject\")}\n                </Button>\n              </ButtonsContainer>\n            ) : (\n              <ButtonsContainer>\n                <Button\n                  size=\"md\"\n                  isFullWidth\n                  variant=\"tertiary\"\n                  onClick={rejectAndClose}\n                >\n                  {t(\"Cancel\")}\n                </Button>\n                <Button\n                  size=\"md\"\n                  isFullWidth\n                  variant=\"secondary\"\n                  isLoading={isGranting}\n                  onClick={() => grantAndClose()}\n                >\n                  {t(\"Connect\")}\n                </Button>\n              </ButtonsContainer>\n            )}\n          </DomainScanModalInfo>\n        )}\n      </ModalWrapper>\n    </>\n  );\n};\n","import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Text, Icon } from \"@stellar/design-system\";\n\nimport { emitMetric } from \"helpers/metrics\";\n\nimport { METRIC_NAMES } from \"popup/constants/metricsNames\";\nimport { Onboarding, OnboardingModal } from \"popup/components/Onboarding\";\nimport { View } from \"popup/basics/layout/View\";\n\nimport LogoWelcome from \"popup/assets/logo-freighter-welcome.svg\";\n\nimport \"./styles.scss\";\n\nexport const FullscreenSuccessMessage = () => {\n  const { t } = useTranslation();\n\n  emitMetric(METRIC_NAMES.recoverAccountFinished);\n\n  return (\n    <>\n      <div className=\"FullscreenSuccessMessage__pin\">\n        <div className=\"FullscreenSuccessMessage__pin__row\">\n          {t(\"Pin Freighter to the toolbar\")}\n        </div>\n        <div className=\"FullscreenSuccessMessage__pin__row\">\n          <div className=\"FullscreenSuccessMessage__pin__row__gradient\"></div>\n          <div className=\"FullscreenSuccessMessage__pin__row__toolbar\">\n            <Icon.PuzzlePiece01 />\n          </div>\n        </div>\n        <div className=\"FullscreenSuccessMessage__pin__row\">\n          <div className=\"FullscreenSuccessMessage__pin__row__logo\">\n            <img src={LogoWelcome} alt=\"Freighter logo\" />\n          </div>\n          <div className=\"FullscreenSuccessMessage__pin__row__text\">\n            {t(\"Freighter - Stellar Wallet\")}\n          </div>\n          <div className=\"FullscreenSuccessMessage__pin__row__pin-icon\">\n            <Icon.Pin01 />\n          </div>\n        </div>\n      </div>\n      <View.Content alignment=\"center\" hasNoTopPadding>\n        <div className=\"FullscreenSuccessMessage\">\n          <Onboarding layout=\"half\">\n            <OnboardingModal\n              headerText={t(\"You’re all set!\")}\n              bodyText={\n                <div className=\"FullscreenSuccessMessage__text\">\n                  <Text as=\"p\" size=\"md\">\n                    {t(\n                      \"To access your wallet, click Freighter from your browser Extensions browser menu.\",\n                    )}\n                  </Text>\n                </div>\n              }\n            >\n              <div className=\"FullscreenSuccessMessage__infoBlock\">\n                <div className=\"FullscreenSuccessMessage__infoBlock__row\">\n                  <div className=\"FullscreenSuccessMessage__infoBlock__row__icon\">\n                    <Icon.Globe01 />\n                  </div>\n                  <div className=\"FullscreenSuccessMessage__infoBlock__row__text\">\n                    {t(\n                      \"Always check the domain of websites you're using Freighter with\",\n                    )}\n                  </div>\n                </div>\n                <div className=\"FullscreenSuccessMessage__infoBlock__row\">\n                  <div className=\"FullscreenSuccessMessage__infoBlock__row__icon\">\n                    <Icon.LockKeyholeSquare />\n                  </div>\n                  <div className=\"FullscreenSuccessMessage__infoBlock__row__text\">\n                    {t(\n                      \"Freighter cannot recover your account if you lose your recovery phrase, so keep it safe\",\n                    )}\n                  </div>\n                </div>\n              </div>\n            </OnboardingModal>\n          </Onboarding>\n        </div>\n      </View.Content>\n    </>\n  );\n};\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Formik, Form } from \"formik\";\nimport { object as YupObject } from \"yup\";\nimport {\n  Card,\n  Input,\n  Icon,\n  Button,\n  Text,\n  Toggle,\n} from \"@stellar/design-system\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { AppDispatch } from \"popup/App\";\nimport {\n  PasswordForm,\n  initialValues,\n  FormValues,\n} from \"popup/components/accountCreator/PasswordForm\";\nimport {\n  Onboarding,\n  OnboardingError,\n  OnboardingModal,\n} from \"popup/components/Onboarding\";\nimport { View } from \"popup/basics/layout/View\";\n\nimport { ROUTES } from \"popup/constants/routes\";\nimport { navigateTo } from \"popup/helpers/navigate\";\nimport {\n  password as passwordValidator,\n  confirmPassword as confirmPasswordValidator,\n  termsOfUse as termsofUseValidator,\n} from \"popup/helpers/validators\";\nimport {\n  authErrorSelector,\n  publicKeySelector,\n  recoverAccount,\n} from \"popup/ducks/accountServices\";\n\nimport \"./styles.scss\";\n\ninterface PhraseInputProps {\n  phraseInput: string;\n  index: number;\n  handleMnemonicInputChange: (value: string, index: number) => void;\n  isTextShowing: boolean;\n  isLongPhrase: boolean;\n}\n\nconst PhraseInput = ({\n  phraseInput,\n  index,\n  handleMnemonicInputChange,\n  isTextShowing,\n  isLongPhrase,\n}: PhraseInputProps) => {\n  const [inputValue, setInputValue] = useState(\"\");\n\n  useEffect(() => {\n    setInputValue(\"\");\n  }, [isLongPhrase]);\n\n  return (\n    <div key={phraseInput} className=\"RecoverAccount__phrase-input\">\n      <div className=\"RecoverAccount__phrase-input__number\">\n        {(index + 1).toString().padStart(2, \"0\")}\n      </div>\n      <Input\n        fieldSize=\"md\"\n        autoComplete=\"off\"\n        id={phraseInput}\n        name={phraseInput}\n        onChange={(e) => {\n          handleMnemonicInputChange(e.target.value, index);\n          setInputValue(e.target.value);\n        }}\n        onPaste={(e) => e.preventDefault()}\n        type={isTextShowing ? \"text\" : \"password\"}\n        value={inputValue}\n      />\n    </div>\n  );\n};\n\nconst SHORT_PHRASE = 12;\nconst LONG_PHRASE = 24;\n\nconst buildMnemonicPhrase = (mnemonicPhraseArr: string[]) =>\n  mnemonicPhraseArr.join(\" \").trim();\n\nexport const RecoverAccount = () => {\n  const { t } = useTranslation();\n  const publicKey = useSelector(publicKeySelector);\n  const authError = useSelector(authErrorSelector);\n  const publicKeyRef = useRef(publicKey);\n  const RecoverAccountSchema = YupObject().shape({\n    password: passwordValidator,\n    confirmPassword: confirmPasswordValidator,\n    termsOfUse: termsofUseValidator,\n  });\n\n  const dispatch: AppDispatch = useDispatch();\n  const [isLongPhrase, setIsLongPhrase] = useState(false);\n  const [isTextShowing, setIsTextShowing] = useState(false);\n  const [phraseInputs, setPhraseInputs] = useState([] as string[]);\n  const [mnemonicPhraseArr, setMnemonicPhraseArr] = useState([] as string[]);\n  const [password, setPassword] = useState(\"\");\n\n  const handleConfirm = (values: FormValues) => {\n    setPassword(values.password);\n  };\n\n  const handleSubmit = async () => {\n    await dispatch(\n      recoverAccount({\n        password,\n        mnemonicPhrase: buildMnemonicPhrase(mnemonicPhraseArr),\n      }),\n    );\n  };\n\n  useEffect(() => {\n    if (publicKey && publicKey !== publicKeyRef.current) {\n      navigateTo(ROUTES.recoverAccountSuccess);\n    }\n  }, [publicKey]);\n\n  useEffect(() => {\n    const phraseInputsArr: string[] = [];\n    let PHRASE_LENGTH = SHORT_PHRASE;\n\n    // delay to account for css transition\n    setTimeout(() => {\n      PHRASE_LENGTH = isLongPhrase ? LONG_PHRASE : SHORT_PHRASE;\n\n      // eslint-disable-next-line no-plusplus\n      for (let i = 1; i <= PHRASE_LENGTH; i++) {\n        phraseInputsArr.push(`MnemonicPhrase-${i}`);\n      }\n      setPhraseInputs(phraseInputsArr);\n\n      if (PHRASE_LENGTH === SHORT_PHRASE) {\n        // when going back to 12 words, clear all the fields\n        setMnemonicPhraseArr([]);\n      }\n    }, 150);\n  }, [isLongPhrase]);\n\n  const handleMnemonicInputChange = (value: string, i: number) => {\n    const arr = [...mnemonicPhraseArr];\n    arr[i] = value;\n\n    setMnemonicPhraseArr(arr);\n  };\n\n  return (\n    <React.Fragment>\n      <View.Content alignment=\"center\" hasNoTopPadding hasNoBottomPadding>\n        <Formik\n          initialValues={initialValues}\n          validationSchema={RecoverAccountSchema}\n          onSubmit={handleSubmit}\n        >\n          {({ dirty, touched, isSubmitting, isValid, errors, values }) => (\n            <>\n              {password ? (\n                <div className=\"RecoverAccount\">\n                  <Form>\n                    <Onboarding layout=\"half\">\n                      <OnboardingModal\n                        data-testid=\"confirm-mnemonic-phrase\"\n                        headerText=\"Import wallet from recovery phrase\"\n                        bodyText={\n                          <>\n                            <Text as=\"p\" size=\"md\">\n                              {t(\n                                \"Enter your mnemonic phrase to restore your wallet\",\n                              )}\n                            </Text>\n                          </>\n                        }\n                      >\n                        <Card variant=\"primary\">\n                          <div className=\"RecoverAccount__mnemonic-wrapper\">\n                            <div\n                              className={`RecoverAccount__mnemonic-input ${\n                                isLongPhrase\n                                  ? \"RecoverAccount__mnemonic-input--long-phrase\"\n                                  : \"\"\n                              }`}\n                            >\n                              {phraseInputs.map((phraseInput, i) => (\n                                <PhraseInput\n                                  key={phraseInput}\n                                  phraseInput={phraseInput}\n                                  handleMnemonicInputChange={\n                                    handleMnemonicInputChange\n                                  }\n                                  isTextShowing={isTextShowing}\n                                  isLongPhrase={isLongPhrase}\n                                  index={i}\n                                />\n                              ))}\n                            </div>\n                          </div>\n                        </Card>\n                        <div className=\"RecoverAccount__mnemonic-footer\">\n                          <div className=\"RecoverAccount__mnemonic-footer__row\">\n                            <div className=\"RecoverAccount__phrase-toggle\">\n                              <div>{SHORT_PHRASE} word</div>\n                              <Toggle\n                                fieldSize=\"md\"\n                                checked={isLongPhrase}\n                                id=\"RecoverAccount__toggle\"\n                                onChange={() => setIsLongPhrase(!isLongPhrase)}\n                              />\n                              <div>{LONG_PHRASE} word</div>\n                            </div>\n                            <div className=\"RecoverAccount__mnemonic__text-toggle\">\n                              <Button\n                                variant=\"tertiary\"\n                                onClick={() => setIsTextShowing(!isTextShowing)}\n                                size=\"sm\"\n                                type=\"button\"\n                              >\n                                <span> {isTextShowing ? \"Hide\" : \"Show\"}</span>\n                                {isTextShowing ? <Icon.EyeOff /> : <Icon.Eye />}\n                              </Button>\n                            </div>\n                          </div>\n\n                          <div className=\"RecoverAccount__import\">\n                            <Button\n                              variant=\"secondary\"\n                              size=\"lg\"\n                              type=\"submit\"\n                              isFullWidth\n                              disabled={\n                                !(\n                                  dirty &&\n                                  isValid &&\n                                  buildMnemonicPhrase(mnemonicPhraseArr).length\n                                )\n                              }\n                              isLoading={isSubmitting}\n                            >\n                              {t(\"Import\")}\n                            </Button>\n                          </div>\n                        </div>\n                      </OnboardingModal>\n                      <OnboardingError\n                        errorString={\n                          authError ? t(\"Invalid mnemonic phrase\") : \"\"\n                        }\n                      />\n                    </Onboarding>\n                  </Form>\n                </div>\n              ) : (\n                <PasswordForm\n                  isValid={isValid}\n                  dirty={dirty}\n                  isSubmitting={isSubmitting}\n                  errors={errors}\n                  touched={touched}\n                  values={values}\n                  handleSubmit={handleConfirm}\n                />\n              )}\n            </>\n          )}\n        </Formik>\n      </View.Content>\n    </React.Fragment>\n  );\n};\n","import { useEffect, useRef, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { AppDispatch } from \"popup/App\";\nimport { signTransaction, rejectTransaction } from \"popup/ducks/access\";\n\nimport { Account } from \"@shared/api/types\";\n\nimport {\n  allAccountsSelector,\n  confirmPassword,\n  hardwareWalletTypeSelector,\n  hasPrivateKeySelector,\n  makeAccountActive,\n  publicKeySelector,\n} from \"popup/ducks/accountServices\";\n\nimport {\n  ShowOverlayStatus,\n  startHwSign,\n  transactionSubmissionSelector,\n} from \"popup/ducks/transactionSubmission\";\nimport { emitMetric } from \"helpers/metrics\";\nimport { METRIC_NAMES } from \"popup/constants/metricsNames\";\n\nexport function useSetupSigningFlow(\n  reject: typeof rejectTransaction,\n  signFn: typeof signTransaction,\n  transactionXdr: string,\n  accountToSign?: string,\n) {\n  const [isConfirming, setIsConfirming] = useState(false);\n  const [isPasswordRequired, setIsPasswordRequired] = useState(false);\n  const [startedHwSign, setStartedHwSign] = useState(false);\n  const [accountNotFound, setAccountNotFound] = useState(false);\n  const [currentAccount, setCurrentAccount] = useState({} as Account);\n\n  const dispatch: AppDispatch = useDispatch();\n  const allAccounts = useSelector(allAccountsSelector);\n  const hasPrivateKey = useSelector(hasPrivateKeySelector);\n  const hardwareWalletType = useSelector(hardwareWalletTypeSelector);\n  const publicKey = useSelector(publicKeySelector);\n\n  // the public key the user had selected before starting this flow\n  const defaultPublicKey = useRef(publicKey);\n  const allAccountsMap = useRef({} as { [key: string]: Account });\n  const isHardwareWallet = !!hardwareWalletType;\n  const {\n    hardwareWalletData: { status: hwStatus },\n  } = useSelector(transactionSubmissionSelector);\n\n  const rejectAndClose = () => {\n    emitMetric(METRIC_NAMES.rejectSigning);\n    dispatch(reject());\n    window.close();\n  };\n\n  const signAndClose = async () => {\n    if (isHardwareWallet) {\n      dispatch(\n        startHwSign({ transactionXDR: transactionXdr, shouldSubmit: false }),\n      );\n      setStartedHwSign(true);\n    } else {\n      await dispatch(signFn());\n      await emitMetric(METRIC_NAMES.approveSign);\n      window.close();\n    }\n  };\n\n  const handleApprove = async () => {\n    setIsConfirming(true);\n\n    if (hasPrivateKey) {\n      await signAndClose();\n    } else {\n      setIsPasswordRequired(true);\n    }\n\n    setIsConfirming(false);\n  };\n\n  const verifyPasswordThenSign = async (password: string) => {\n    const confirmPasswordResp = await dispatch(confirmPassword(password));\n\n    if (confirmPassword.fulfilled.match(confirmPasswordResp)) {\n      await signAndClose();\n    }\n  };\n\n  useEffect(() => {\n    if (startedHwSign && hwStatus === ShowOverlayStatus.IDLE) {\n      window.close();\n    }\n  }, [startedHwSign, hwStatus]);\n\n  useEffect(() => {\n    // handle auto selecting the right account based on `accountToSign`\n    let autoSelectedAccountDetails;\n\n    allAccounts.forEach((account) => {\n      if (accountToSign) {\n        // does the user have the `accountToSign` somewhere in the accounts list?\n        if (account.publicKey === accountToSign) {\n          // if the `accountToSign` is found, but it isn't active, make it active\n          if (defaultPublicKey.current !== account.publicKey) {\n            dispatch(makeAccountActive(account.publicKey));\n          }\n\n          // save the details of the `accountToSign`\n          autoSelectedAccountDetails = account;\n        }\n      }\n\n      // create an object so we don't need to keep iterating over allAccounts when we switch accounts\n      allAccountsMap.current[account.publicKey] = account;\n    });\n\n    if (!autoSelectedAccountDetails) {\n      setAccountNotFound(true);\n    }\n  }, [accountToSign, allAccounts, dispatch]);\n\n  useEffect(() => {\n    // handle any changes to the current acct - whether by auto select or manual select\n    setCurrentAccount(allAccountsMap.current[publicKey] || ({} as Account));\n  }, [allAccounts, publicKey]);\n\n  return {\n    allAccounts,\n    accountNotFound,\n    currentAccount,\n    handleApprove,\n    isHardwareWallet,\n    publicKey,\n    hwStatus,\n    isConfirming,\n    isPasswordRequired,\n    rejectAndClose,\n    setIsPasswordRequired,\n    verifyPasswordThenSign,\n    hardwareWalletType,\n  };\n}\n","import get from \"lodash/get\";\nimport React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory, useLocation } from \"react-router-dom\";\n\nimport { ROUTES } from \"popup/constants/routes\";\nimport { navigateTo } from \"popup/helpers/navigate\";\nimport {\n  confirmPassword,\n  publicKeySelector,\n} from \"popup/ducks/accountServices\";\nimport { EnterPassword } from \"popup/components/EnterPassword\";\n\nimport \"./styles.scss\";\n\ninterface VerifyAccountProps {\n  isApproval?: boolean;\n  customBackAction?: () => void;\n  customSubmit?: (password: string) => Promise<void>;\n}\n\nexport const VerifyAccount = ({\n  isApproval,\n  customBackAction,\n  customSubmit,\n}: VerifyAccountProps) => {\n  const { t } = useTranslation();\n  const location = useLocation();\n  const dispatch = useDispatch();\n\n  const publicKey = useSelector(publicKeySelector);\n\n  const from = get(location, \"state.from.pathname\", \"\") as ROUTES;\n\n  const history = useHistory();\n\n  const handleConfirm = async (password: string) => {\n    if (customSubmit) {\n      await customSubmit(password);\n    } else {\n      // eslint-disable-next-line\n      await dispatch(confirmPassword(password));\n      navigateTo(from || ROUTES.account);\n    }\n  };\n\n  const handleCancel = () => {\n    if (customBackAction) {\n      customBackAction();\n      return;\n    }\n\n    history.goBack();\n  };\n\n  return (\n    <React.Fragment>\n      <div className=\"VerifyAccount\">\n        <EnterPassword\n          accountAddress={publicKey}\n          description={\n            isApproval\n              ? undefined\n              : t(\"Enter your account password to authorize this transaction.\")\n          }\n          confirmButtonTitle={isApproval ? undefined : t(\"Submit\")}\n          onConfirm={handleConfirm}\n          onCancel={handleCancel}\n        />\n      </div>\n    </React.Fragment>\n  );\n};\n","import React, { ReactNode } from \"react\";\nimport classnames from \"classnames\";\n\nimport \"./styles.scss\";\n\ninterface TabsProps {\n  tabs: string[];\n  renderTab: (tab: string) => ReactNode;\n}\n\nexport const Tabs = (props: TabsProps) => {\n  const [activeTab, setActiveTab] = React.useState(props.tabs[0]);\n  return (\n    <div className=\"Tabs\">\n      <div className=\"Tabs__Selectors\">\n        {props.tabs.map((tab) => {\n          const classes = classnames(\"Tab\", { Active: activeTab === tab });\n          return (\n            <div\n              data-testid={`Tab-${tab}`}\n              className={classes}\n              key={tab}\n              onClick={() => setActiveTab(tab)}\n            >\n              {tab}\n            </div>\n          );\n        })}\n      </div>\n      <div className=\"Tabs__Body\">{props.renderTab(activeTab)}</div>\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport { Icon } from \"@stellar/design-system\";\nimport { stroopToXlm } from \"helpers/stellar\";\nimport { MemoType } from \"stellar-sdk\";\n\nimport \"./styles.scss\";\n\nconst mapMemoLabel: any = {\n  id: \"MEMO_ID\",\n  hash: \"MEMO_HASH\",\n  text: \"MEMO_TEXT\",\n  return: \"MEMO_RETURN\",\n  none: \"MEMO_NONE\",\n};\n\ninterface SummaryProps {\n  operationNames: string[];\n  fee: string;\n  sequenceNumber: string;\n  memo?: { value: string; type: MemoType };\n}\n\nexport const Summary = (props: SummaryProps) => (\n  <>\n    <h5>Operations</h5>\n    <div className=\"Operations\">\n      {props.operationNames.map((opName) => (\n        <div key={opName} className=\"OpName\">\n          <Icon.CodeCircle01 />\n          <p>{opName}</p>\n        </div>\n      ))}\n    </div>\n    <h5>Transaction Info</h5>\n    <div className=\"TxInfo\">\n      <div className=\"TxInfoBlock\">\n        <div className=\"TxInfoBlock__title\">\n          <Icon.ParagraphSpacing />\n          <p>Operations</p>\n        </div>\n        <p className=\"TxInfoBlock__value\">{props.operationNames.length}</p>\n      </div>\n      <div className=\"TxInfoBlock\">\n        <div className=\"TxInfoBlock__title\">\n          <Icon.Percent03 />\n          <p>Fees</p>\n        </div>\n        <p className=\"TxInfoBlock__value\">\n          {stroopToXlm(props.fee).toString()} XLM\n        </p>\n      </div>\n      <div className=\"TxInfoBlock\">\n        <div className=\"TxInfoBlock__title\">\n          <Icon.ArrowSquareRight />\n          <p>Sequence #</p>\n        </div>\n        <p className=\"TxInfoBlock__value\">{props.sequenceNumber}</p>\n      </div>\n      {props.memo && props.memo.value && (\n        <div className=\"TxInfoBlock\" data-testid=\"MemoBlock\">\n          <div className=\"TxInfoBlock__title\">\n            <Icon.CoinsHand />\n            <p>Memo</p>\n          </div>\n          <p className=\"TxInfoBlock__value\">{`${props.memo.value} (${\n            mapMemoLabel[props.memo.type]\n          })`}</p>\n        </div>\n      )}\n    </div>\n  </>\n);\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  Asset,\n  Claimant,\n  LiquidityPoolAsset,\n  nativeToScVal,\n  Operation,\n  Signer,\n  SignerKeyOptions,\n  StrKey,\n  xdr,\n} from \"stellar-sdk\";\nimport { Loader } from \"@stellar/design-system\";\nimport { getContractSpec } from \"@shared/api/internal\";\n\nimport { CLAIM_PREDICATES } from \"constants/transaction\";\nimport { KeyIdenticon } from \"popup/components/identicons/KeyIdenticon\";\nimport { CopyValue } from \"popup/components/CopyValue\";\nimport { truncateString } from \"helpers/stellar\";\nimport { formattedBuffer } from \"popup/helpers/formatters\";\n\nimport {\n  buildInvocationTree,\n  getCreateContractArgs,\n  InvocationTree,\n  scValByType,\n} from \"popup/helpers/soroban\";\nimport { settingsNetworkDetailsSelector } from \"popup/ducks/settings\";\nimport \"./styles.scss\";\n\nexport const KeyValueList = ({\n  operationKey,\n  operationValue,\n}: {\n  operationKey: string;\n  operationValue: string | number | React.ReactNode;\n}) => (\n  <div className=\"Operations__pair\" data-testid=\"OperationKeyVal\">\n    <div className=\"Operations__pair--key\" data-testid=\"OperationKeyVal__key\">\n      {operationKey}\n    </div>\n    <div\n      className=\"Operations__pair--value\"\n      data-testid=\"OperationKeyVal__value\"\n    >\n      {operationValue}\n    </div>\n  </div>\n);\n\nexport const KeyValueWithPublicKey = ({\n  operationKey,\n  operationValue,\n}: {\n  operationKey: string;\n  operationValue: string;\n}) => (\n  <KeyValueList\n    operationKey={operationKey}\n    operationValue={<KeyIdenticon publicKey={operationValue} isSmall />}\n  />\n);\n\nconst InvocationByType = ({ _invocation }: { _invocation: InvocationTree }) => {\n  const { t } = useTranslation();\n  switch (_invocation.type) {\n    case \"execute\": {\n      return (\n        <>\n          <KeyValueWithPublicKey\n            operationKey={t(\"Source\")}\n            operationValue={_invocation.args.source}\n          />\n          <KeyValueList\n            operationKey={t(\"Function Name\")}\n            operationValue={_invocation.args.function}\n          />\n          <KeyValueInvokeHostFnArgs\n            args={_invocation.args.args.map(nativeToScVal)}\n            fnName={_invocation.args.function}\n            contractId={_invocation.args.source}\n          />\n        </>\n      );\n    }\n\n    case \"create\": {\n      return (\n        <>\n          <KeyValueList\n            operationKey={t(\"Type\")}\n            operationValue={_invocation.args.type}\n          />\n          {_invocation.args.wasm && (\n            <>\n              <KeyValueList\n                operationKey={t(\"Salt\")}\n                operationValue={truncateString(\n                  _invocation.args.wasm.salt as string,\n                )}\n              />\n              <KeyValueList\n                operationKey={t(\"Hash\")}\n                operationValue={_invocation.args.wasm.hash}\n              />\n              <KeyValueWithPublicKey\n                operationKey={t(\"Address\")}\n                operationValue={_invocation.args.wasm.address}\n              />\n            </>\n          )}\n          {_invocation.args.asset && (\n            <KeyValueList\n              operationKey={t(\"Asset\")}\n              operationValue={_invocation.args.asset}\n            />\n          )}\n        </>\n      );\n    }\n\n    default:\n      return <></>;\n  }\n};\n\nexport const KeyValueInvocation = ({\n  invocation,\n}: {\n  invocation: InvocationTree;\n}) => (\n  <>\n    <KeyValueList operationKey=\"Sub Invocation\" operationValue=\"\" />\n    <InvocationByType _invocation={invocation} />\n    {invocation.invocations.map((subInvocation) => (\n      <KeyValueInvocation key={subInvocation.type} invocation={subInvocation} />\n    ))}\n  </>\n);\n\nexport const KeyValueAuthEntry = ({\n  entry,\n}: {\n  entry: xdr.SorobanAuthorizationEntry;\n}) => {\n  const invocation = entry.rootInvocation();\n  const invocationTree = buildInvocationTree(invocation);\n\n  return (\n    <>\n      <KeyValueList operationKey=\"Root Invocation\" operationValue=\"\" />\n      <InvocationByType _invocation={invocationTree} />\n      {invocationTree.invocations.map((subInvocation) => (\n        <KeyValueInvocation\n          key={subInvocation.type}\n          invocation={subInvocation}\n        />\n      ))}\n    </>\n  );\n};\n\nexport const KeyValueSigner = ({ signer }: { signer: Signer }) => {\n  const { t } = useTranslation();\n\n  function renderSignerType() {\n    if (\"ed25519PublicKey\" in signer) {\n      return (\n        <KeyValueWithPublicKey\n          operationKey={t(\"Signer\")}\n          operationValue={signer.ed25519PublicKey}\n        />\n      );\n    }\n\n    if (\"sha256Hash\" in signer) {\n      return (\n        <KeyValueList\n          operationKey={t(\"Signer\")}\n          operationValue={formattedBuffer(signer.sha256Hash)}\n        />\n      );\n    }\n\n    if (\"preAuthTx\" in signer) {\n      return (\n        <KeyValueList\n          operationKey={t(\"Signer\")}\n          operationValue={formattedBuffer(signer.preAuthTx)}\n        />\n      );\n    }\n\n    if (\"ed25519SignedPayload\" in signer) {\n      return (\n        <KeyValueList\n          operationKey={t(\"Signer\")}\n          operationValue={truncateString(signer.ed25519SignedPayload)}\n        />\n      );\n    }\n    return <></>;\n  }\n\n  return (\n    <>\n      {renderSignerType()}\n      <KeyValueList\n        operationKey={t(\"Signer Weight\")}\n        operationValue={signer.weight}\n      />\n    </>\n  );\n};\n\nexport const KeyValueLine = ({\n  line,\n}: {\n  line: Asset | LiquidityPoolAsset;\n}) => {\n  const { t } = useTranslation();\n  if (\"assetA\" in line) {\n    return (\n      <>\n        <KeyValueList\n          operationKey={t(\"Asset A\")}\n          operationValue={line.assetA.getCode()}\n        />\n        <KeyValueList\n          operationKey={t(\"Asset B\")}\n          operationValue={line.assetB.getCode()}\n        />\n        <KeyValueList operationKey={t(\"Fee\")} operationValue={line.fee} />\n      </>\n    );\n  }\n  return (\n    <KeyValueList operationKey={t(\"Asset Code\")} operationValue={line.code} />\n  );\n};\n\nexport const KeyValueClaimants = ({ claimants }: { claimants: Claimant[] }) => {\n  const { t } = useTranslation();\n\n  function claimPredicateValue(\n    predicate: xdr.ClaimPredicate,\n    hideKey: boolean = false,\n  ): React.ReactNode {\n    switch (predicate.switch().name) {\n      case \"claimPredicateUnconditional\": {\n        return (\n          <KeyValueList\n            operationKey={hideKey ? \"\" : t(\"Predicate\")}\n            operationValue={CLAIM_PREDICATES[predicate.switch().name]}\n          />\n        );\n      }\n\n      case \"claimPredicateAnd\": {\n        return (\n          <>\n            <KeyValueList\n              operationKey={hideKey ? \"\" : t(\"Predicate\")}\n              operationValue={CLAIM_PREDICATES[predicate.switch().name]}\n            />\n            {predicate.andPredicates().map((p) => claimPredicateValue(p, true))}\n          </>\n        );\n      }\n\n      case \"claimPredicateBeforeAbsoluteTime\": {\n        return (\n          <>\n            <KeyValueList\n              operationKey={hideKey ? \"\" : t(\"Predicate\")}\n              operationValue={CLAIM_PREDICATES[predicate.switch().name]}\n            />\n            <KeyValueList\n              operationKey=\"\"\n              operationValue={predicate.absBefore().toString()}\n            />\n          </>\n        );\n      }\n\n      case \"claimPredicateBeforeRelativeTime\": {\n        return (\n          <>\n            <KeyValueList\n              operationKey={hideKey ? \"\" : t(\"Predicate\")}\n              operationValue={CLAIM_PREDICATES[predicate.switch().name]}\n            />\n            <KeyValueList\n              operationKey=\"\"\n              operationValue={predicate.relBefore().toString()}\n            />\n          </>\n        );\n      }\n\n      case \"claimPredicateNot\": {\n        const not = predicate.notPredicate();\n        if (not) {\n          return (\n            <>\n              <KeyValueList\n                operationKey={hideKey ? \"\" : t(\"Predicate\")}\n                operationValue={CLAIM_PREDICATES[predicate.switch().name]}\n              />\n              {claimPredicateValue(not, true)}\n            </>\n          );\n        }\n        return <></>;\n      }\n\n      case \"claimPredicateOr\": {\n        return (\n          <>\n            <KeyValueList\n              operationKey={hideKey ? \"\" : t(\"Predicate\")}\n              operationValue={CLAIM_PREDICATES[predicate.switch().name]}\n            />\n            {predicate.orPredicates().map((p) => claimPredicateValue(p, true))}\n          </>\n        );\n      }\n\n      default: {\n        return <></>;\n      }\n    }\n  }\n  return (\n    <>\n      {claimants.map((claimant, i) => (\n        <React.Fragment\n          key={claimant.destination + claimant.predicate.switch().name}\n        >\n          <KeyValueWithPublicKey\n            operationKey={t(`Destination #${i + 1}`)}\n            operationValue={claimant.destination}\n          />\n          {claimPredicateValue(claimant.predicate)}\n        </React.Fragment>\n      ))}\n    </>\n  );\n};\n\nexport const KeyValueSignerKeyOptions = ({\n  signer,\n}: {\n  signer: SignerKeyOptions;\n}) => {\n  const { t } = useTranslation();\n\n  if (\"ed25519PublicKey\" in signer) {\n    return (\n      <KeyValueWithPublicKey\n        operationKey={t(\"Signer Key\")}\n        operationValue={signer.ed25519PublicKey}\n      />\n    );\n  }\n\n  if (\"sha256Hash\" in signer) {\n    return (\n      <KeyValueList\n        operationKey={t(\"Signer Sha256 Hash\")}\n        operationValue={signer.sha256Hash}\n      />\n    );\n  }\n\n  if (\"preAuthTx\" in signer) {\n    return (\n      <KeyValueList\n        operationKey={t(\"Pre Auth Transaction\")}\n        operationValue={signer.preAuthTx}\n      />\n    );\n  }\n\n  if (\"ed25519SignedPayload\" in signer) {\n    return (\n      <KeyValueList\n        operationKey={t(\"Signed Payload\")}\n        operationValue={signer.ed25519SignedPayload}\n      />\n    );\n  }\n  return <></>;\n};\n\nexport const KeyValueInvokeHostFnArgs = ({\n  args,\n  contractId,\n  fnName,\n}: {\n  args: xdr.ScVal[];\n  contractId?: string;\n  fnName?: string;\n}) => {\n  const [isLoading, setLoading] = React.useState(true);\n  const [argNames, setArgNames] = React.useState([] as string[]);\n  const networkDetails = useSelector(settingsNetworkDetailsSelector);\n\n  React.useEffect(() => {\n    async function getSpec(id: string, name: string) {\n      try {\n        const spec = await getContractSpec({ contractId: id, networkDetails });\n        const { definitions } = spec;\n        const invocationSpec = definitions[name];\n        const argNamesPositional = invocationSpec.properties?.args\n          ?.required as string[];\n        setArgNames(argNamesPositional);\n        setLoading(false);\n      } catch (error) {\n        setLoading(false);\n      }\n    }\n\n    if (contractId && fnName) {\n      getSpec(contractId, fnName);\n    } else {\n      setLoading(false);\n    }\n  }, [contractId, fnName, networkDetails]);\n\n  return isLoading ? (\n    <div className=\"Operations__pair--invoke\" data-testid=\"OperationKeyVal\">\n      <Loader size=\"1rem\" />\n    </div>\n  ) : (\n    <div className=\"Operations__pair--invoke\" data-testid=\"OperationKeyVal\">\n      <div>Parameters</div>\n      <div className=\"OperationParameters\" data-testid=\"OperationParameters\">\n        {args.map((arg, ind) => (\n          <div\n            className=\"Parameter\"\n            key={arg.toXDR().toString()}\n            data-testid=\"Parameter\"\n          >\n            {argNames[ind] && (\n              <div data-testid=\"ParameterName\">{argNames[ind]}</div>\n            )}\n            {arg.switch() === xdr.ScValType.scvAddress() ? (\n              <CopyValue\n                value={scValByType(arg)}\n                displayValue={scValByType(arg)}\n              />\n            ) : (\n              scValByType(arg)\n            )}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport const KeyValueInvokeHostFn = ({\n  op,\n}: {\n  op: Operation.InvokeHostFunction;\n}) => {\n  const { t } = useTranslation();\n  const hostfn = op.func;\n\n  function renderDetails() {\n    switch (hostfn.switch()) {\n      case xdr.HostFunctionType.hostFunctionTypeCreateContractV2():\n      case xdr.HostFunctionType.hostFunctionTypeCreateContract(): {\n        const createContractArgs = getCreateContractArgs(hostfn);\n        const preimage = createContractArgs.contractIdPreimage;\n        const executable = createContractArgs.executable;\n        const createV2Args = createContractArgs.constructorArgs;\n        const executableType = executable.switch().name;\n        const wasmHash = executable.wasmHash();\n\n        if (preimage.switch().name === \"contractIdPreimageFromAddress\") {\n          const preimageFromAddress = preimage.fromAddress();\n          const address = preimageFromAddress.address();\n          const salt = preimageFromAddress.salt().toString(\"hex\");\n\n          const addressType = address.switch();\n          if (addressType.name === \"scAddressTypeAccount\") {\n            const accountId = StrKey.encodeEd25519PublicKey(\n              address.accountId().ed25519(),\n            );\n            return (\n              <>\n                <KeyValueList\n                  operationKey={t(\"Invocation Type\")}\n                  operationValue=\"Create Contract\"\n                />\n                <KeyValueWithPublicKey\n                  operationKey={t(\"Account ID\")}\n                  operationValue={accountId}\n                />\n                <KeyValueList\n                  operationKey={t(\"Salt\")}\n                  operationValue={\n                    <CopyValue\n                      value={salt}\n                      displayValue={truncateString(salt, 8)}\n                    />\n                  }\n                />\n                <KeyValueList\n                  operationKey={t(\"Executable Type\")}\n                  operationValue={executableType}\n                />\n                {executable.wasmHash() && (\n                  <KeyValueList\n                    operationKey={t(\"Executable Wasm Hash\")}\n                    operationValue={\n                      <CopyValue\n                        value={wasmHash.toString(\"hex\")}\n                        displayValue={truncateString(\n                          wasmHash.toString(\"hex\"),\n                          8,\n                        )}\n                      />\n                    }\n                  />\n                )}\n                {createV2Args && (\n                  <KeyValueInvokeHostFnArgs args={createV2Args} />\n                )}\n              </>\n            );\n          }\n          const contractId = StrKey.encodeContract(address.contractId());\n          return (\n            <>\n              <KeyValueList\n                operationKey={t(\"Invocation Type\")}\n                operationValue=\"Create Contract\"\n              />\n              <KeyValueWithPublicKey\n                operationKey={t(\"Contract ID\")}\n                operationValue={contractId}\n              />\n              <KeyValueList\n                operationKey={t(\"Salt\")}\n                operationValue={\n                  <CopyValue\n                    value={salt}\n                    displayValue={truncateString(salt, 8)}\n                  />\n                }\n              />\n              <KeyValueList\n                operationKey={t(\"Executable Type\")}\n                operationValue={executableType}\n              />\n              {executable.wasmHash() && (\n                <KeyValueList\n                  operationKey={t(\"Executable Wasm Hash\")}\n                  operationValue={\n                    <CopyValue\n                      value={wasmHash.toString(\"hex\")}\n                      displayValue={truncateString(wasmHash.toString(\"hex\"), 8)}\n                    />\n                  }\n                />\n              )}\n              {createV2Args && <KeyValueInvokeHostFnArgs args={createV2Args} />}\n            </>\n          );\n        }\n\n        // contractIdPreimageFromAsset\n        const preimageFromAsset = preimage.fromAsset();\n        const preimageValue = preimageFromAsset.value()!;\n\n        return (\n          <>\n            <KeyValueList\n              operationKey={t(\"Invocation Type\")}\n              operationValue=\"Create Contract\"\n            />\n            {preimageFromAsset.switch().name === \"assetTypeCreditAlphanum4\" ||\n            preimageFromAsset.switch().name === \"assetTypeCreditAlphanum12\" ? (\n              <>\n                <KeyValueList\n                  operationKey={t(\"Asset Code\")}\n                  operationValue={(preimageValue as xdr.AlphaNum12)\n                    .assetCode()\n                    .toString()}\n                />\n                <KeyValueList\n                  operationKey={t(\"Issuer\")}\n                  operationValue={\n                    <CopyValue\n                      value={StrKey.encodeEd25519PublicKey(\n                        (preimageValue as xdr.AlphaNum12).issuer().ed25519(),\n                      )}\n                      displayValue={truncateString(\n                        StrKey.encodeEd25519PublicKey(\n                          (preimageValue as xdr.AlphaNum12).issuer().ed25519(),\n                        ),\n                      )}\n                    />\n                  }\n                />\n              </>\n            ) : null}\n\n            <KeyValueList\n              operationKey={t(\"Executable Type\")}\n              operationValue={executableType}\n            />\n            {executable.wasmHash() && (\n              <KeyValueList\n                operationKey={t(\"Executable Wasm Hash\")}\n                operationValue={\n                  <CopyValue\n                    value={wasmHash.toString(\"hex\")}\n                    displayValue={truncateString(wasmHash.toString(\"hex\"), 8)}\n                  />\n                }\n              />\n            )}\n            {createV2Args && <KeyValueInvokeHostFnArgs args={createV2Args} />}\n          </>\n        );\n      }\n\n      case xdr.HostFunctionType.hostFunctionTypeInvokeContract(): {\n        const invocation = hostfn.invokeContract();\n        const contractId = StrKey.encodeContract(\n          invocation.contractAddress().contractId(),\n        );\n        const fnName = invocation.functionName().toString();\n        const args = invocation.args();\n\n        return (\n          <>\n            <KeyValueList\n              operationKey={t(\"Invocation Type\")}\n              operationValue=\"Invoke Contract\"\n            />\n            <KeyValueList\n              operationKey={t(\"Contract ID\")}\n              operationValue={\n                <CopyValue\n                  value={contractId}\n                  displayValue={truncateString(contractId, 6)}\n                />\n              }\n            />\n            <KeyValueList\n              operationKey={t(\"Function Name\")}\n              operationValue={fnName}\n            />\n            <KeyValueInvokeHostFnArgs\n              args={args}\n              contractId={contractId}\n              fnName={fnName}\n            />\n          </>\n        );\n      }\n\n      case xdr.HostFunctionType.hostFunctionTypeUploadContractWasm(): {\n        const wasm = hostfn.wasm().toString();\n        return (\n          <>\n            <KeyValueList\n              operationKey={t(\"Invocation Type\")}\n              operationValue=\"Upload Contract Wasm\"\n            />\n            <KeyValueList operationKey={t(\"wasm\")} operationValue={wasm} />\n          </>\n        );\n      }\n\n      default:\n        return <></>;\n    }\n  }\n  return renderDetails();\n};\n\nexport const PathList = ({ paths }: { paths: Asset[] }) => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <div>{t(\"Paths\")}: </div>\n      {paths.map(({ code, issuer }, i) => (\n        <div className=\"Operations--list--item\" key={`${code} ${i + 1}`}>\n          <div>#{i + 1}</div>\n          <KeyValueList operationKey=\"Asset Code\" operationValue={code} />\n          {issuer ? (\n            <KeyValueList\n              operationKey=\"Issuer\"\n              operationValue={<KeyIdenticon publicKey={issuer} isSmall />}\n            />\n          ) : null}\n        </div>\n      ))}\n    </>\n  );\n};\n","import React, { useEffect } from \"react\";\nimport { Icon, IconButton } from \"@stellar/design-system\";\nimport { useSelector } from \"react-redux\";\nimport { useTranslation } from \"react-i18next\";\nimport { Operation } from \"stellar-sdk\";\n\nimport {\n  FLAG_TYPES,\n  OPERATION_TYPES,\n  TRANSACTION_WARNING,\n} from \"constants/transaction\";\n\nimport { FlaggedKeys } from \"types/transactions\";\n\nimport { settingsNetworkDetailsSelector } from \"popup/ducks/settings\";\nimport { truncateString, truncatedPoolId } from \"helpers/stellar\";\nimport { scanAsset } from \"popup/helpers/blockaid\";\n\nimport {\n  KeyValueClaimants,\n  KeyValueInvokeHostFn,\n  KeyValueLine,\n  KeyValueList,\n  KeyValueSigner,\n  KeyValueSignerKeyOptions,\n  KeyValueWithPublicKey,\n  PathList,\n} from \"./KeyVal\";\nimport \"./styles.scss\";\n\nconst MemoRequiredWarning = ({\n  isDestMemoRequired,\n}: {\n  isDestMemoRequired: boolean;\n}) => {\n  const { t } = useTranslation();\n\n  return isDestMemoRequired ? (\n    <KeyValueList\n      operationKey=\"\"\n      operationValue={\n        <IconButton\n          label={t(\"Memo required\")}\n          altText=\"Error\"\n          icon={<Icon.InfoCircle />}\n          variant=\"error\"\n        />\n      }\n    />\n  ) : null;\n};\n\nconst DestinationWarning = ({\n  destination,\n  flaggedKeys,\n  isMemoRequired,\n}: {\n  destination: string;\n  flaggedKeys: FlaggedKeys;\n  isMemoRequired: boolean;\n}) => {\n  const flaggedTags = flaggedKeys[destination]?.tags || [];\n  const isDestMemoRequired = flaggedTags.includes(\n    TRANSACTION_WARNING.memoRequired,\n  );\n\n  return (\n    <>\n      {isMemoRequired ? (\n        <MemoRequiredWarning isDestMemoRequired={isDestMemoRequired} />\n      ) : null}\n    </>\n  );\n};\n\nexport const Operations = ({\n  flaggedKeys,\n  isMemoRequired,\n  operations = [] as Operation[],\n}: {\n  flaggedKeys: FlaggedKeys;\n  isMemoRequired: boolean;\n  operations: Operation[];\n}) => {\n  const { t } = useTranslation();\n\n  const AuthorizationMapToDisplay: { [index: string]: string } = {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    \"1\": \"Authorization Required\",\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    \"2\": \"Authorization Revocable\",\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    \"4\": \"Authorization Immutable\",\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    \"8\": \"Authorization Clawback Enabled\",\n  };\n\n  const RenderOpByType = ({ op }: { op: Operation }) => {\n    const networkDetails = useSelector(settingsNetworkDetailsSelector);\n\n    useEffect(() => {\n      const scan = async () => {\n        let sendAsset;\n        let destAsset;\n\n        if (op.type === \"payment\") {\n          sendAsset = op.asset;\n        }\n\n        if (\n          op.type === \"pathPaymentStrictReceive\" ||\n          op.type === \"pathPaymentStrictSend\"\n        ) {\n          sendAsset = op.sendAsset;\n          destAsset = op.destAsset;\n        }\n\n        if (sendAsset) {\n          await scanAsset(\n            `${sendAsset.code}-${sendAsset.issuer}`,\n            networkDetails,\n          );\n        }\n\n        if (destAsset) {\n          await scanAsset(\n            `${destAsset.code}-${destAsset.issuer}`,\n            networkDetails,\n          );\n        }\n      };\n\n      scan();\n    }, [networkDetails, op]);\n\n    switch (op.type) {\n      case \"createAccount\": {\n        const destination = op.destination;\n        const startingBalance = op.startingBalance;\n        return (\n          <>\n            <KeyValueWithPublicKey\n              operationKey={t(\"Destination\")}\n              operationValue={destination}\n            />\n            <DestinationWarning\n              destination={destination}\n              flaggedKeys={flaggedKeys}\n              isMemoRequired={isMemoRequired}\n            />\n            <KeyValueList\n              operationKey={t(\"Starting Balance\")}\n              operationValue={`${startingBalance} XLM`}\n            />\n          </>\n        );\n      }\n\n      case \"payment\": {\n        const destination = op.destination;\n        const amount = op.amount;\n        const asset = op.asset;\n        return (\n          <>\n            <KeyValueWithPublicKey\n              operationKey={t(\"Destination\")}\n              operationValue={destination}\n            />\n            <DestinationWarning\n              destination={destination}\n              flaggedKeys={flaggedKeys}\n              isMemoRequired={isMemoRequired}\n            />\n            <KeyValueList\n              operationKey={t(\"Asset Code\")}\n              operationValue={asset.code}\n            />\n            <KeyValueList operationKey={t(\"Amount\")} operationValue={amount} />\n          </>\n        );\n      }\n\n      case \"pathPaymentStrictReceive\": {\n        const { sendAsset, sendMax, destination, destAsset, destAmount, path } =\n          op;\n        return (\n          <>\n            <KeyValueList\n              operationKey={t(\"Asset Code\")}\n              operationValue={sendAsset.code}\n            />\n            <KeyValueList\n              operationKey={t(\"Send Max\")}\n              operationValue={sendMax}\n            />\n            <KeyValueWithPublicKey\n              operationKey={t(\"Destination\")}\n              operationValue={destination}\n            />\n            <DestinationWarning\n              destination={destination}\n              flaggedKeys={flaggedKeys}\n              isMemoRequired={isMemoRequired}\n            />\n            <KeyValueWithPublicKey\n              operationKey={t(\"Destination Asset\")}\n              operationValue={destAsset.code}\n            />\n            <KeyValueList\n              operationKey={t(\"Destination Amount\")}\n              operationValue={destAmount}\n            />\n            <PathList paths={path} />\n          </>\n        );\n      }\n\n      case \"pathPaymentStrictSend\": {\n        const { sendAsset, sendAmount, destination, destAsset, destMin, path } =\n          op;\n        return (\n          <>\n            <KeyValueList\n              operationKey={t(\"Asset Code\")}\n              operationValue={sendAsset.code}\n            />\n            <KeyValueList\n              operationKey={t(\"Send Amount\")}\n              operationValue={sendAmount}\n            />\n            <KeyValueWithPublicKey\n              operationKey={t(\"Destination\")}\n              operationValue={destination}\n            />\n            <DestinationWarning\n              destination={destination}\n              flaggedKeys={flaggedKeys}\n              isMemoRequired={isMemoRequired}\n            />\n            <KeyValueWithPublicKey\n              operationKey={t(\"Destination Asset\")}\n              operationValue={destAsset.code}\n            />\n            <KeyValueList\n              operationKey={t(\"Destination Minimum\")}\n              operationValue={destMin}\n            />\n            <PathList paths={path} />\n          </>\n        );\n      }\n\n      case \"createPassiveSellOffer\": {\n        const { selling, buying, amount, price } = op;\n        return (\n          <>\n            <KeyValueList\n              operationKey={t(\"Buying\")}\n              operationValue={buying.code}\n            />\n            <KeyValueList operationKey={t(\"Amount\")} operationValue={amount} />\n            <KeyValueList\n              operationKey={t(\"Selling\")}\n              operationValue={selling.code}\n            />\n            <KeyValueList operationKey={t(\"Price\")} operationValue={price} />\n          </>\n        );\n      }\n\n      case \"manageSellOffer\": {\n        const { offerId, selling, buying, price, amount } = op;\n        return (\n          <>\n            <KeyValueList\n              operationKey={t(\"Offer ID\")}\n              operationValue={offerId}\n            />\n            <KeyValueList\n              operationKey={t(\"Selling\")}\n              operationValue={selling.code}\n            />\n            <KeyValueList\n              operationKey={t(\"Buying\")}\n              operationValue={buying.code}\n            />\n            <KeyValueList operationKey={t(\"Amount\")} operationValue={amount} />\n            <KeyValueList operationKey={t(\"Price\")} operationValue={price} />\n          </>\n        );\n      }\n\n      case \"manageBuyOffer\": {\n        const { selling, buying, buyAmount, price, offerId } = op;\n        return (\n          <>\n            <KeyValueList\n              operationKey={t(\"Offer ID\")}\n              operationValue={offerId}\n            />\n            <KeyValueList\n              operationKey={t(\"Buying\")}\n              operationValue={buying.code}\n            />\n            <KeyValueList\n              operationKey={t(\"Buy Amount\")}\n              operationValue={buyAmount}\n            />\n            <KeyValueList\n              operationKey={t(\"Selling\")}\n              operationValue={selling.code}\n            />\n            <KeyValueList operationKey={t(\"Price\")} operationValue={price} />\n          </>\n        );\n      }\n\n      case \"setOptions\": {\n        const {\n          inflationDest,\n          clearFlags,\n          setFlags,\n          masterWeight,\n          lowThreshold,\n          medThreshold,\n          highThreshold,\n          homeDomain,\n          signer,\n        } = op;\n        return (\n          <>\n            {signer && <KeyValueSigner signer={signer} />}\n            {inflationDest && (\n              <KeyValueWithPublicKey\n                operationKey={t(\"Inflation Destination\")}\n                operationValue={inflationDest}\n              />\n            )}\n            {homeDomain && (\n              <KeyValueList\n                operationKey={t(\"Home Domain\")}\n                operationValue={homeDomain}\n              />\n            )}\n            {highThreshold && (\n              <KeyValueList\n                operationKey={t(\"High Threshold\")}\n                operationValue={highThreshold?.toString()}\n              />\n            )}\n            {medThreshold && (\n              <KeyValueList\n                operationKey={t(\"Medium Threshold\")}\n                operationValue={medThreshold?.toString()}\n              />\n            )}\n            {lowThreshold && (\n              <KeyValueList\n                operationKey={t(\"Low Threshold\")}\n                operationValue={lowThreshold?.toString()}\n              />\n            )}\n            {masterWeight && (\n              <KeyValueList\n                operationKey={t(\"Master Weight\")}\n                operationValue={masterWeight?.toString()}\n              />\n            )}\n            {setFlags && (\n              <KeyValueList\n                operationKey={t(\"Set Flags\")}\n                operationValue={AuthorizationMapToDisplay[setFlags?.toString()]}\n              />\n            )}\n            {clearFlags && (\n              <KeyValueList\n                operationKey={t(\"Clear Flags\")}\n                operationValue={\n                  AuthorizationMapToDisplay[clearFlags.toString()]\n                }\n              />\n            )}\n          </>\n        );\n      }\n\n      case \"changeTrust\": {\n        const { type, limit, line } = op;\n        return (\n          <>\n            <KeyValueLine line={line} />\n            <KeyValueList operationKey={t(\"Type\")} operationValue={type} />\n            <KeyValueList operationKey={t(\"Limit\")} operationValue={limit} />\n          </>\n        );\n      }\n\n      case \"allowTrust\": {\n        const { trustor, assetCode, authorize } = op;\n        return (\n          <>\n            <KeyValueWithPublicKey\n              operationKey={t(\"Trustor\")}\n              operationValue={trustor}\n            />\n            <KeyValueList\n              operationKey={t(\"Asset Code\")}\n              operationValue={assetCode}\n            />\n            <KeyValueList\n              operationKey={t(\"Authorize\")}\n              operationValue={authorize}\n            />\n          </>\n        );\n      }\n\n      case \"accountMerge\": {\n        const { destination } = op;\n        return (\n          <>\n            <KeyValueWithPublicKey\n              operationKey={t(\"Destination\")}\n              operationValue={destination}\n            />\n            <DestinationWarning\n              destination={destination}\n              flaggedKeys={flaggedKeys}\n              isMemoRequired={isMemoRequired}\n            />\n          </>\n        );\n      }\n\n      case \"manageData\": {\n        const { name, value } = op;\n        return (\n          <>\n            <KeyValueList operationKey={t(\"Name\")} operationValue={name} />\n            {value && (\n              <KeyValueList\n                operationKey={t(\"Value\")}\n                operationValue={value?.toString()}\n              />\n            )}\n          </>\n        );\n      }\n\n      case \"bumpSequence\": {\n        const { bumpTo } = op;\n        return (\n          <KeyValueList operationKey={t(\"Bump To\")} operationValue={bumpTo} />\n        );\n      }\n\n      case \"createClaimableBalance\": {\n        const { asset, amount, claimants } = op;\n        return (\n          <>\n            <KeyValueList\n              operationKey={t(\"Asset Code\")}\n              operationValue={asset.code}\n            />\n            <KeyValueList operationKey={t(\"Amount\")} operationValue={amount} />\n            <KeyValueClaimants claimants={claimants} />\n          </>\n        );\n      }\n\n      case \"claimClaimableBalance\": {\n        const { balanceId } = op;\n        return (\n          <KeyValueList\n            operationKey={t(\"Balance ID\")}\n            operationValue={truncateString(balanceId)}\n          />\n        );\n      }\n\n      case \"beginSponsoringFutureReserves\": {\n        const { sponsoredId } = op;\n        return (\n          <KeyValueList\n            operationKey={t(\"Sponsored ID\")}\n            operationValue={truncateString(sponsoredId)}\n          />\n        );\n      }\n\n      case \"endSponsoringFutureReserves\": {\n        const { type } = op;\n        return (\n          <>\n            <KeyValueList operationKey={t(\"Type\")} operationValue={type} />\n          </>\n        );\n      }\n\n      case \"clawback\": {\n        const { asset, amount, from } = op;\n        return (\n          <>\n            <KeyValueList\n              operationKey={t(\"Asset Code\")}\n              operationValue={asset.code}\n            />\n            <KeyValueList operationKey={t(\"Amount\")} operationValue={amount} />\n            <KeyValueWithPublicKey\n              operationKey={t(\"From\")}\n              operationValue={from}\n            />\n          </>\n        );\n      }\n\n      case \"clawbackClaimableBalance\": {\n        const { balanceId } = op;\n        return (\n          <KeyValueList\n            operationKey={t(\"Balance ID\")}\n            operationValue={truncateString(balanceId)}\n          />\n        );\n      }\n\n      case \"setTrustLineFlags\": {\n        const { trustor, asset, flags } = op;\n        return (\n          <>\n            <KeyValueWithPublicKey\n              operationKey={t(\"Trustor\")}\n              operationValue={trustor}\n            />\n            <KeyValueList\n              operationKey={t(\"Asset Code\")}\n              operationValue={asset.code}\n            />\n            {flags.authorized && (\n              <KeyValueList\n                operationKey={t(FLAG_TYPES.authorized)}\n                operationValue={flags.authorized}\n              />\n            )}\n            {flags.authorizedToMaintainLiabilities && (\n              <KeyValueList\n                operationKey={t(FLAG_TYPES.authorizedToMaintainLiabilities)}\n                operationValue={flags.authorizedToMaintainLiabilities}\n              />\n            )}\n            {flags.clawbackEnabled && (\n              <KeyValueList\n                operationKey={t(FLAG_TYPES.clawbackEnabled)}\n                operationValue={flags.clawbackEnabled}\n              />\n            )}\n          </>\n        );\n      }\n\n      case \"liquidityPoolDeposit\": {\n        const { liquidityPoolId, maxAmountA, maxAmountB, maxPrice, minPrice } =\n          op;\n        return (\n          <>\n            <KeyValueList\n              operationKey={t(\"Liquidity Pool ID\")}\n              operationValue={truncatedPoolId(liquidityPoolId)}\n            />\n            <KeyValueList\n              operationKey={t(\"Max Amount A\")}\n              operationValue={maxAmountA}\n            />\n            <KeyValueList\n              operationKey={t(\"Max Amount B\")}\n              operationValue={maxAmountB}\n            />\n            <KeyValueList\n              operationKey={t(\"Max Price\")}\n              operationValue={maxPrice}\n            />\n            <KeyValueList\n              operationKey={t(\"Min Price\")}\n              operationValue={minPrice}\n            />\n          </>\n        );\n      }\n\n      case \"liquidityPoolWithdraw\": {\n        const { liquidityPoolId, amount, minAmountA, minAmountB } = op;\n        return (\n          <>\n            <KeyValueList\n              operationKey={t(\"Liquidity Pool ID\")}\n              operationValue={truncatedPoolId(liquidityPoolId)}\n            />\n            <KeyValueList\n              operationKey={t(\"Min Amount A\")}\n              operationValue={minAmountA}\n            />\n            <KeyValueList\n              operationKey={t(\"Min Amount B\")}\n              operationValue={minAmountB}\n            />\n            <KeyValueList operationKey={t(\"Amount\")} operationValue={amount} />\n          </>\n        );\n      }\n\n      case \"extendFootprintTtl\": {\n        const { extendTo } = op;\n        return (\n          <KeyValueList\n            operationKey={t(\"Extend To\")}\n            operationValue={extendTo}\n          />\n        );\n      }\n\n      case \"invokeHostFunction\": {\n        return <KeyValueInvokeHostFn op={op} />;\n      }\n\n      case \"restoreFootprint\":\n      case \"inflation\":\n      default: {\n        // OperationType is missing some types\n        // Issue: https://github.com/stellar/js-stellar-base/issues/728\n        const type = op.type as string;\n        if (type === \"revokeTrustlineSponsorship\") {\n          const _op = op as unknown as Operation.RevokeTrustlineSponsorship;\n          const { account, asset } = _op;\n          return (\n            <>\n              <KeyValueWithPublicKey\n                operationKey={t(\"Account\")}\n                operationValue={account}\n              />\n              {\"liquidityPoolId\" in asset && (\n                <KeyValueList\n                  operationKey={t(\"Liquidity Pool ID\")}\n                  operationValue={truncatedPoolId(asset.liquidityPoolId)}\n                />\n              )}\n              {\"code\" in asset && (\n                <KeyValueList\n                  operationKey={t(\"Liquidity Pool ID\")}\n                  operationValue={asset.code}\n                />\n              )}\n            </>\n          );\n        }\n        if (type === \"revokeAccountSponsorship\") {\n          const _op = op as unknown as Operation.RevokeAccountSponsorship;\n          const { account } = _op;\n          return (\n            <KeyValueWithPublicKey\n              operationKey={t(\"Account\")}\n              operationValue={account}\n            />\n          );\n        }\n        if (type === \"revokeOfferSponsorship\") {\n          const _op = op as unknown as Operation.RevokeOfferSponsorship;\n          const { seller, offerId } = _op;\n          return (\n            <>\n              <KeyValueWithPublicKey\n                operationKey={t(\"Seller\")}\n                operationValue={seller}\n              />\n              <KeyValueList\n                operationKey={t(\"Offer ID\")}\n                operationValue={offerId}\n              />\n            </>\n          );\n        }\n        if (type === \"revokeDataSponsorship\") {\n          const _op = op as unknown as Operation.RevokeDataSponsorship;\n          const { account, name } = _op;\n          return (\n            <>\n              <KeyValueWithPublicKey\n                operationKey={t(\"Account\")}\n                operationValue={account}\n              />\n              <KeyValueList operationKey={t(\"Name\")} operationValue={name} />\n            </>\n          );\n        }\n        if (type === \"revokeClaimableBalanceSponsorship\") {\n          const _op =\n            op as unknown as Operation.RevokeClaimableBalanceSponsorship;\n          const { balanceId } = _op;\n          return (\n            <KeyValueList\n              operationKey={t(\"Balance ID\")}\n              operationValue={truncateString(balanceId)}\n            />\n          );\n        }\n        if (type === \"revokeSignerSponsorship\") {\n          const _op = op as unknown as Operation.RevokeSignerSponsorship;\n          const { account, signer } = _op;\n          return (\n            <>\n              <KeyValueSignerKeyOptions signer={signer} />\n              <KeyValueWithPublicKey\n                operationKey={t(\"Account\")}\n                operationValue={account}\n              />\n            </>\n          );\n        }\n        return <></>;\n      }\n    }\n  };\n\n  return (\n    <div className=\"Operations\">\n      {operations.map((op, i: number) => {\n        const operationIndex = i + 1;\n        const sourceVal = op.source;\n        const type = op.type;\n\n        return (\n          <div\n            className=\"Operations--wrapper\"\n            key={operationIndex}\n            data-testid=\"OperationsWrapper\"\n          >\n            <div className=\"Operations--header\">\n              <Icon.ParagraphSpacing />\n              <strong className=\"OpType\">\n                {OPERATION_TYPES[type] || type}\n              </strong>\n            </div>\n            <div className=\"Operations--item\">\n              {sourceVal && (\n                <KeyValueWithPublicKey\n                  operationKey={t(\"Source\")}\n                  operationValue={sourceVal || \"\"}\n                />\n              )}\n              <RenderOpByType op={op} />\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Operation } from \"stellar-sdk\";\n\nimport \"./styles.scss\";\nimport { Operations } from \"popup/components/signTransaction/Operations\";\nimport { FlaggedKeys } from \"types/transactions\";\n\ninterface DetailsProps {\n  operations: Operation[];\n  flaggedKeys: FlaggedKeys;\n  isMemoRequired: boolean;\n}\n\nexport const Details = ({\n  operations,\n  flaggedKeys,\n  isMemoRequired,\n}: DetailsProps) => (\n  <div className=\"DetailsBody\" data-testid=\"DetailsBody\">\n    <Operations\n      operations={operations}\n      flaggedKeys={flaggedKeys}\n      isMemoRequired={isMemoRequired}\n    />\n  </div>\n);\n","import React from \"react\";\nimport { CopyText, Icon } from \"@stellar/design-system\";\n\nimport \"./styles.scss\";\n\ninterface DataProps {\n  xdr: string;\n}\n\nexport const Data = ({ xdr }: DataProps) => (\n  <>\n    <div className=\"BodyWrapper__TitleRow\">\n      <h5>Raw XDR</h5>\n      <CopyText textToCopy={xdr} doneLabel=\"XDR COPIED\" tooltipPlacement=\"left\">\n        <Icon.Copy01 />\n      </CopyText>\n    </div>\n    <div className=\"BodyWrapper__Xdr\">{xdr}</div>\n  </>\n);\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useTranslation, Trans } from \"react-i18next\";\nimport { Button, Icon, Notification } from \"@stellar/design-system\";\nimport {\n  MuxedAccount,\n  Transaction,\n  TransactionBuilder,\n  Federation,\n  Memo,\n  MemoType,\n  Operation,\n} from \"stellar-sdk\";\n\nimport { ActionStatus } from \"@shared/api/types\";\nimport { signTransaction, rejectTransaction } from \"popup/ducks/access\";\nimport {\n  isNonSSLEnabledSelector,\n  settingsNetworkDetailsSelector,\n} from \"popup/ducks/settings\";\n\nimport {\n  ShowOverlayStatus,\n  getAccountBalances,\n  resetAccountBalanceStatus,\n  transactionSubmissionSelector,\n} from \"popup/ducks/transactionSubmission\";\n\nimport { OPERATION_TYPES, TRANSACTION_WARNING } from \"constants/transaction\";\n\nimport { encodeObject, parsedSearchParam } from \"helpers/urls\";\nimport { emitMetric } from \"helpers/metrics\";\nimport {\n  getTransactionInfo,\n  isFederationAddress,\n  isMuxedAccount,\n  stroopToXlm,\n  truncatedPublicKey,\n} from \"helpers/stellar\";\nimport { decodeMemo } from \"popup/helpers/parseTransaction\";\nimport { useSetupSigningFlow } from \"popup/helpers/useSetupSigningFlow\";\nimport { navigateTo } from \"popup/helpers/navigate\";\nimport { useScanTx } from \"popup/helpers/blockaid\";\nimport { ROUTES } from \"popup/constants/routes\";\nimport { METRIC_NAMES } from \"popup/constants/metricsNames\";\n\nimport { AccountList } from \"popup/components/account/AccountList\";\nimport { PunycodedDomain } from \"popup/components/PunycodedDomain\";\nimport {\n  WarningMessageVariant,\n  WarningMessage,\n  FirstTimeWarningMessage,\n  MemoWarningMessage,\n  SSLWarningMessage,\n  BlockaidTxScanLabel,\n} from \"popup/components/WarningMessages\";\nimport { HardwareSign } from \"popup/components/hardwareConnect/HardwareSign\";\nimport { KeyIdenticon } from \"popup/components/identicons/KeyIdenticon\";\nimport { SlideupModal } from \"popup/components/SlideupModal\";\nimport { Loading } from \"popup/components/Loading\";\n\nimport { VerifyAccount } from \"popup/views/VerifyAccount\";\nimport { Tabs } from \"popup/components/Tabs\";\nimport { Summary } from \"./Preview/Summary\";\nimport { Details } from \"./Preview/Details\";\nimport { Data } from \"./Preview/Data\";\n\nimport \"./styles.scss\";\n\nexport const SignTransaction = () => {\n  const location = useLocation();\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n  const [hasAcceptedInsufficientFee, setHasAcceptedInsufficientFee] =\n    useState(false);\n\n  const { accountBalances, accountBalanceStatus } = useSelector(\n    transactionSubmissionSelector,\n  );\n  const isNonSSLEnabled = useSelector(isNonSSLEnabledSelector);\n  const networkDetails = useSelector(settingsNetworkDetailsSelector);\n  const { networkName, networkPassphrase } = networkDetails;\n  const { scanTx, isLoading: isLoadingScan, data: scanResult } = useScanTx();\n  const flaggedMalicious =\n    scanResult?.validation &&\n    \"result_type\" in scanResult.validation &&\n    scanResult.validation.result_type === \"Malicious\";\n\n  const tx = getTransactionInfo(location.search);\n  const { url } = parsedSearchParam(location.search);\n\n  const {\n    accountToSign: _accountToSign,\n    transaction: { _fee, _networkPassphrase },\n    transactionXdr,\n    domain,\n    isDomainListedAllowed,\n    isHttpsDomain,\n    flaggedKeys,\n  } = tx;\n\n  // rebuild transaction to get Transaction prototypes\n  const transaction = TransactionBuilder.fromXDR(\n    transactionXdr,\n    _networkPassphrase as string,\n  );\n\n  let isFeeBump = false;\n  let _memo = {};\n  let _sequence = \"\";\n\n  if (\"innerTransaction\" in transaction) {\n    isFeeBump = true;\n  } else {\n    _sequence = transaction.sequence;\n    _memo = transaction.memo;\n  }\n\n  const decodedMemo = decodeMemo(_memo);\n\n  const memo = decodedMemo?.value;\n  let accountToSign = _accountToSign;\n\n  const {\n    allAccounts,\n    accountNotFound,\n    currentAccount,\n    isConfirming,\n    isPasswordRequired,\n    publicKey,\n    handleApprove,\n    hwStatus,\n    rejectAndClose,\n    setIsPasswordRequired,\n    verifyPasswordThenSign,\n    hardwareWalletType,\n  } = useSetupSigningFlow(\n    rejectTransaction,\n    signTransaction,\n    transactionXdr,\n    accountToSign,\n  );\n\n  const flaggedKeyValues = Object.values(flaggedKeys);\n  const isMemoRequired = flaggedKeyValues.some(\n    ({ tags }) => tags.includes(TRANSACTION_WARNING.memoRequired) && !memo,\n  );\n\n  const resolveFederatedAddress = useCallback(async (inputDest: string) => {\n    let resolvedPublicKey;\n    try {\n      const fedResp = await Federation.Server.resolve(inputDest);\n      resolvedPublicKey = fedResp.account_id;\n    } catch (e) {\n      console.error(e);\n    }\n\n    return resolvedPublicKey;\n  }, []);\n\n  const decodeAccountToSign = async () => {\n    if (_accountToSign) {\n      if (isMuxedAccount(_accountToSign)) {\n        const mAccount = MuxedAccount.fromAddress(_accountToSign, \"0\");\n        accountToSign = mAccount.baseAccount().accountId();\n      }\n      if (isFederationAddress(_accountToSign)) {\n        accountToSign = (await resolveFederatedAddress(\n          accountToSign!,\n        )) as string;\n      }\n    }\n  };\n  decodeAccountToSign();\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await scanTx(transactionXdr, url, networkDetails);\n    };\n    fetchData();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    if (isMemoRequired) {\n      emitMetric(METRIC_NAMES.signTransactionMemoRequired);\n    }\n  }, [isMemoRequired]);\n\n  useEffect(() => {\n    if (currentAccount.publicKey) {\n      dispatch(\n        getAccountBalances({\n          publicKey: currentAccount.publicKey,\n          networkDetails,\n        }),\n      );\n    }\n    return () => {\n      dispatch(resetAccountBalanceStatus());\n    };\n  }, [currentAccount.publicKey, dispatch, networkDetails]);\n\n  const isSubmitDisabled = isMemoRequired;\n\n  if (_networkPassphrase !== networkPassphrase) {\n    return (\n      <WarningMessage\n        variant={WarningMessageVariant.warning}\n        handleCloseClick={() => window.close()}\n        isActive\n        header={`${t(\"Freighter is set to\")} ${networkName}`}\n      >\n        <p>\n          {t(\"The transaction you’re trying to sign is on\")}{\" \"}\n          {_networkPassphrase}.\n        </p>\n        <p>{t(\"Signing this transaction is not possible at the moment.\")}</p>\n      </WarningMessage>\n    );\n  }\n\n  if (!isHttpsDomain && !isNonSSLEnabled) {\n    return <SSLWarningMessage url={domain} />;\n  }\n\n  const hasLoadedBalances =\n    accountBalanceStatus !== ActionStatus.PENDING &&\n    accountBalanceStatus !== ActionStatus.IDLE;\n\n  if (!hasLoadedBalances || isLoadingScan) {\n    return <Loading />;\n  }\n\n  const hasBalance =\n    hasLoadedBalances && accountBalanceStatus !== ActionStatus.ERROR;\n  const hasEnoughXlm =\n    accountBalances.balances?.native &&\n    accountBalances.balances?.native.available.gt(stroopToXlm(_fee as string));\n  if (\n    hasBalance &&\n    currentAccount.publicKey &&\n    !hasEnoughXlm &&\n    !hasAcceptedInsufficientFee\n  ) {\n    return (\n      <WarningMessage\n        handleCloseClick={() => setHasAcceptedInsufficientFee(true)}\n        isActive\n        variant={WarningMessageVariant.warning}\n        header={t(\"INSUFFICIENT FUNDS FOR FEE\")}\n      >\n        <p data-testid=\"InsufficientBalanceWarning\">\n          <Trans domain={domain}>\n            Your available XLM balance is not enough to pay for the transaction\n            fee.\n          </Trans>\n        </p>\n      </WarningMessage>\n    );\n  }\n\n  function renderTab(tab: string) {\n    function renderTabBody() {\n      const _tx = transaction as Transaction<Memo<MemoType>, Operation[]>;\n      switch (tab) {\n        case \"Summary\": {\n          return (\n            <Summary\n              sequenceNumber={_sequence}\n              fee={_fee}\n              memo={decodedMemo}\n              operationNames={_tx.operations.map(\n                (op) => OPERATION_TYPES[op.type] || op.type,\n              )}\n            />\n          );\n        }\n\n        case \"Details\": {\n          return (\n            <Details\n              operations={_tx.operations}\n              flaggedKeys={flaggedKeys}\n              isMemoRequired={isMemoRequired}\n            />\n          );\n        }\n\n        case \"Data\": {\n          return <Data xdr={_tx.toXDR()} />;\n        }\n\n        default:\n          return <></>;\n      }\n    }\n\n    return (\n      <div className=\"BodyWrapper\">\n        {accountNotFound && accountToSign ? (\n          <div className=\"SignTransaction__account-not-found\">\n            <Notification\n              variant=\"warning\"\n              icon={<Icon.InfoOctagon />}\n              title={t(\"Account not available\")}\n            >\n              {t(\"The application is requesting a specific account\")} (\n              {truncatedPublicKey(accountToSign)}),{\" \"}\n              {t(\n                \"which is not available on Freighter. If you own this account, you can import it into Freighter to complete this request.\",\n              )}\n            </Notification>\n          </div>\n        ) : null}\n        <MemoWarningMessage isMemoRequired={isMemoRequired} />\n        {!isDomainListedAllowed && !isSubmitDisabled ? (\n          <FirstTimeWarningMessage />\n        ) : null}\n        {scanResult && <BlockaidTxScanLabel scanResult={scanResult} />}\n        {renderTabBody()}\n      </div>\n    );\n  }\n\n  const needsReviewAuth =\n    !isFeeBump &&\n    (transaction as Transaction<Memo<MemoType>, Operation[]>).operations.some(\n      (op) => op.type === \"invokeHostFunction\" && op.auth && op.auth.length,\n    );\n\n  return isPasswordRequired ? (\n    <VerifyAccount\n      isApproval\n      customBackAction={() => setIsPasswordRequired(false)}\n      customSubmit={verifyPasswordThenSign}\n    />\n  ) : (\n    <>\n      {hwStatus === ShowOverlayStatus.IN_PROGRESS && hardwareWalletType && (\n        <HardwareSign walletType={hardwareWalletType} />\n      )}\n      <div data-testid=\"SignTransaction\" className=\"SignTransaction\">\n        <div className=\"SignTransaction__Body\">\n          <div className=\"SignTransaction__Title\">\n            <PunycodedDomain domain={domain} />\n            <div className=\"SignTransaction--connection-request\">\n              <div className=\"SignTransaction--connection-request-pill\">\n                <Icon.ArrowsRight />\n                <p>Transaction Request</p>\n              </div>\n            </div>\n          </div>\n          <Tabs tabs={[\"Summary\", \"Details\", \"Data\"]} renderTab={renderTab} />\n          <div className=\"SignTransaction__Actions\">\n            <div className=\"SignTransaction__Actions__SigningWith\">\n              <h5>Signing with</h5>\n              <button\n                className=\"SignTransaction__Actions__PublicKey\"\n                onClick={() => setIsDropdownOpen(true)}\n              >\n                <KeyIdenticon\n                  publicKey={currentAccount.publicKey}\n                  keyTruncationAmount={10}\n                />\n                <Icon.ChevronDown />\n              </button>\n            </div>\n            <div className=\"SignTransaction__Actions__BtnRow\">\n              {flaggedMalicious ? (\n                <>\n                  {needsReviewAuth ? (\n                    <Button\n                      disabled={isSubmitDisabled}\n                      variant=\"error\"\n                      isFullWidth\n                      size=\"md\"\n                      isLoading={isConfirming}\n                      onClick={() =>\n                        navigateTo(\n                          ROUTES.reviewAuthorization,\n                          `?${encodeObject({\n                            accountToSign,\n                            transactionXdr,\n                            domain,\n                            flaggedKeys,\n                            isMemoRequired,\n                            memo: decodedMemo,\n                          })}`,\n                        )\n                      }\n                    >\n                      {t(\"Review anyway\")}\n                    </Button>\n                  ) : (\n                    <Button\n                      disabled={isSubmitDisabled}\n                      variant=\"error\"\n                      isFullWidth\n                      size=\"md\"\n                      isLoading={isConfirming}\n                      onClick={() => handleApprove()}\n                    >\n                      {t(\"Sign anyway\")}\n                    </Button>\n                  )}\n                  <Button\n                    isFullWidth\n                    size=\"md\"\n                    variant=\"tertiary\"\n                    onClick={() => rejectAndClose()}\n                  >\n                    {t(\"Reject\")}\n                  </Button>\n                </>\n              ) : (\n                <>\n                  <Button\n                    isFullWidth\n                    size=\"md\"\n                    variant=\"tertiary\"\n                    onClick={() => rejectAndClose()}\n                  >\n                    {t(\"Cancel\")}\n                  </Button>\n                  {needsReviewAuth ? (\n                    <Button\n                      disabled={isSubmitDisabled}\n                      variant=\"secondary\"\n                      isFullWidth\n                      size=\"md\"\n                      isLoading={isConfirming}\n                      onClick={() =>\n                        navigateTo(\n                          ROUTES.reviewAuthorization,\n                          `?${encodeObject({\n                            accountToSign,\n                            transactionXdr,\n                            domain,\n                            flaggedKeys,\n                            isMemoRequired,\n                            memo: decodedMemo,\n                          })}`,\n                        )\n                      }\n                    >\n                      {t(\"Review\")}\n                    </Button>\n                  ) : (\n                    <Button\n                      disabled={isSubmitDisabled}\n                      variant=\"secondary\"\n                      isFullWidth\n                      size=\"md\"\n                      isLoading={isConfirming}\n                      onClick={() => handleApprove()}\n                    >\n                      {t(\"Sign\")}\n                    </Button>\n                  )}\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n        <SlideupModal\n          isModalOpen={isDropdownOpen}\n          setIsModalOpen={setIsDropdownOpen}\n        >\n          <div className=\"SignTransaction__modal\">\n            <AccountList\n              allAccounts={allAccounts}\n              publicKey={publicKey}\n              setIsDropdownOpen={setIsDropdownOpen}\n            />\n          </div>\n        </SlideupModal>\n      </div>\n    </>\n  );\n};\n","import React, { useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { xdr } from \"stellar-sdk\";\n\nimport { buildInvocationTree } from \"popup/helpers/soroban\";\nimport { emitMetric } from \"helpers/metrics\";\nimport { METRIC_NAMES } from \"popup/constants/metricsNames\";\nimport { View } from \"popup/basics/layout/View\";\nimport IconFail from \"popup/assets/icon-fail.svg\";\nimport { Button } from \"@stellar/design-system\";\nimport \"./styles.scss\";\n\ninterface TransactionProps {\n  preimageXdr: string;\n  rejectAndClose: () => void;\n}\n\nexport const AuthEntry = ({\n  preimageXdr,\n  rejectAndClose,\n}: TransactionProps) => {\n  const { t } = useTranslation();\n  try {\n    const preimage = xdr.HashIdPreimage.fromXDR(preimageXdr, \"base64\");\n\n    const rootJson = buildInvocationTree(\n      preimage.sorobanAuthorization().invocation(),\n    );\n\n    return (\n      <div className=\"AuthEntry\">\n        <div className=\"AuthEntryHeader\">{t(\"Authorization Entry\")}</div>\n        <div className=\"AuthEntryAttributes\">\n          <pre>\n            {JSON.stringify(\n              rootJson,\n              (_, val) => (typeof val === \"bigint\" ? val.toString() : val),\n              2,\n            )}\n          </pre>\n        </div>\n      </div>\n    );\n  } catch (error) {\n    return (\n      <InvalidAuthEntry\n        error={JSON.stringify(error)}\n        rejectAndClose={rejectAndClose}\n      />\n    );\n  }\n};\n\nconst InvalidAuthEntry = ({\n  error,\n  rejectAndClose,\n}: {\n  error: string;\n  rejectAndClose: () => void;\n}) => {\n  const { t } = useTranslation();\n\n  useEffect(() => {\n    emitMetric(METRIC_NAMES.invalidAuthEntry, { error });\n  }, [error]);\n\n  return (\n    <div className=\"InvalidAuthEntry\">\n      <React.Fragment>\n        <View.AppHeader pageTitle={t(\"Error\")} />\n        <View.Content>\n          <div className=\"InvalidAuthEntryBody__content\">\n            <div className=\"InvalidAuthEntryBody__amount\">\n              Auth Entry Rejected\n            </div>\n            <div className=\"InvalidAuthEntryBody__icon InvalidAuthEntryBody__fail\">\n              <img src={IconFail} alt=\"Icon Fail\" />\n            </div>\n            <div className=\"InvalidAuthEntryBody__error-code\"></div>\n          </div>\n          <div className=\"InvalidAuthEntryBody__error-block\">\n            Invalid Authorization Entry Format\n          </div>\n        </View.Content>\n        <View.Footer>\n          <Button\n            isFullWidth\n            variant=\"tertiary\"\n            size=\"md\"\n            onClick={rejectAndClose}\n          >\n            {t(\"Got it\")}\n          </Button>\n        </View.Footer>\n      </React.Fragment>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { Button, Card, Icon, Notification } from \"@stellar/design-system\";\nimport { useLocation } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { truncatedPublicKey } from \"helpers/stellar\";\nimport { HardwareSign } from \"popup/components/hardwareConnect/HardwareSign\";\nimport { AccountListIdenticon } from \"popup/components/identicons/AccountListIdenticon\";\nimport { AccountList, OptionTag } from \"popup/components/account/AccountList\";\nimport { PunycodedDomain } from \"popup/components/PunycodedDomain\";\nimport { SlideupModal } from \"popup/components/SlideupModal\";\nimport {\n  FirstTimeWarningMessage,\n  WarningMessageVariant,\n  WarningMessage,\n  SSLWarningMessage,\n} from \"popup/components/WarningMessages\";\nimport { AuthEntry } from \"popup/components/signAuthEntry/AuthEntry\";\nimport { View } from \"popup/basics/layout/View\";\nimport { signEntry, rejectAuthEntry } from \"popup/ducks/access\";\nimport {\n  isNonSSLEnabledSelector,\n  settingsExperimentalModeSelector,\n  settingsNetworkDetailsSelector,\n} from \"popup/ducks/settings\";\nimport { ShowOverlayStatus } from \"popup/ducks/transactionSubmission\";\nimport { VerifyAccount } from \"popup/views/VerifyAccount\";\n\nimport { EntryToSign, parsedSearchParam } from \"helpers/urls\";\nimport { useSetupSigningFlow } from \"popup/helpers/useSetupSigningFlow\";\n\nimport \"./styles.scss\";\n\nexport const SignAuthEntry = () => {\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n\n  const location = useLocation();\n  const { t } = useTranslation();\n  const isExperimentalModeEnabled = useSelector(\n    settingsExperimentalModeSelector,\n  );\n  const isNonSSLEnabled = useSelector(isNonSSLEnabledSelector);\n  const { networkName, networkPassphrase } = useSelector(\n    settingsNetworkDetailsSelector,\n  );\n\n  const params = parsedSearchParam(location.search) as EntryToSign;\n  const { accountToSign, networkPassphrase: entryNetworkPassphrase } = params;\n\n  const {\n    allAccounts,\n    accountNotFound,\n    currentAccount,\n    isConfirming,\n    isPasswordRequired,\n    publicKey,\n    handleApprove,\n    hwStatus,\n    rejectAndClose,\n    setIsPasswordRequired,\n    verifyPasswordThenSign,\n    hardwareWalletType,\n  } = useSetupSigningFlow(\n    rejectAuthEntry,\n    signEntry,\n    params.entry,\n    accountToSign,\n  );\n\n  if (entryNetworkPassphrase && entryNetworkPassphrase !== networkPassphrase) {\n    return (\n      <WarningMessage\n        variant={WarningMessageVariant.warning}\n        handleCloseClick={() => window.close()}\n        isActive\n        header={`${t(\"Freighter is set to\")} ${networkName}`}\n      >\n        <p>\n          {t(\"The requester expects you to sign this auth entry on\")}{\" \"}\n          {entryNetworkPassphrase}.\n        </p>\n        <p>{t(\"Signing this transaction is not possible at the moment.\")}</p>\n      </WarningMessage>\n    );\n  }\n\n  if (!params.url.startsWith(\"https\") && !isNonSSLEnabled) {\n    return <SSLWarningMessage url={params.url} />;\n  }\n\n  return isPasswordRequired ? (\n    <VerifyAccount\n      isApproval\n      customBackAction={() => setIsPasswordRequired(false)}\n      customSubmit={verifyPasswordThenSign}\n    />\n  ) : (\n    <>\n      {hwStatus === ShowOverlayStatus.IN_PROGRESS && hardwareWalletType && (\n        <HardwareSign\n          walletType={hardwareWalletType}\n          isSignSorobanAuthorization\n        />\n      )}\n      <React.Fragment>\n        <View.AppHeader pageTitle={t(\"Confirm Entry\")} />\n        <View.Content>\n          {isExperimentalModeEnabled ? (\n            <WarningMessage\n              header=\"Experimental Mode\"\n              variant={WarningMessageVariant.default}\n            >\n              <p>\n                {t(\n                  \"You are interacting with data that may be using untested and changing schemas. Proceed at your own risk.\",\n                )}\n              </p>\n            </WarningMessage>\n          ) : null}\n          {!params.isDomainListedAllowed ? <FirstTimeWarningMessage /> : null}\n          <div className=\"SignAuthEntry__info\">\n            <Card variant=\"secondary\">\n              <PunycodedDomain domain={params.domain} isRow />\n              <div className=\"SignAuthEntry__subject\">\n                {t(\"is requesting approval to sign an authorization entry\")}\n              </div>\n              <div className=\"SignAuthEntry__approval\">\n                <div className=\"SignAuthEntry__approval__title\">\n                  {t(\"Approve using\")}:\n                </div>\n                <div\n                  className=\"SignAuthEntry__current-account\"\n                  onClick={() => setIsDropdownOpen(true)}\n                >\n                  <AccountListIdenticon\n                    displayKey\n                    accountName={currentAccount.name}\n                    active\n                    publicKey={currentAccount.publicKey}\n                    setIsDropdownOpen={setIsDropdownOpen}\n                  >\n                    <OptionTag\n                      hardwareWalletType={currentAccount.hardwareWalletType}\n                      imported={currentAccount.imported}\n                    />\n                  </AccountListIdenticon>\n                  <div className=\"SignAuthEntry__current-account__chevron\">\n                    <Icon.ChevronDown />\n                  </div>\n                </div>\n              </div>\n            </Card>\n            {accountNotFound && accountToSign ? (\n              <div className=\"SignAuthEntry__account-not-found\">\n                <Notification\n                  variant=\"warning\"\n                  icon={<Icon.InfoOctagon />}\n                  title={t(\"Account not available\")}\n                >\n                  {t(\"The application is requesting a specific account\")} (\n                  {truncatedPublicKey(accountToSign)}),{\" \"}\n                  {t(\n                    \"which is not available on Freighter. If you own this account, you can import it into Freighter to complete this request.\",\n                  )}\n                </Notification>\n              </div>\n            ) : null}\n          </div>\n          {/* Can replace AuthEntry once SignTx supports xdr classes */}\n          {/* <Transaction\n            flaggedKeys={{}}\n            isMemoRequired={false}\n            transaction={{ _operations: [{ auth: params.entry }] }}\n          /> */}\n          <AuthEntry\n            preimageXdr={params.entry}\n            rejectAndClose={rejectAndClose}\n          />\n        </View.Content>\n        <View.Footer isInline>\n          <Button\n            isFullWidth\n            size=\"md\"\n            variant=\"tertiary\"\n            onClick={() => rejectAndClose()}\n          >\n            {t(\"Reject\")}\n          </Button>\n          <Button\n            isFullWidth\n            size=\"md\"\n            variant=\"primary\"\n            isLoading={isConfirming}\n            onClick={() => handleApprove()}\n          >\n            {t(\"Approve\")}\n          </Button>\n        </View.Footer>\n        <SlideupModal\n          isModalOpen={isDropdownOpen}\n          setIsModalOpen={setIsDropdownOpen}\n        >\n          <div className=\"SignAuthEntry__modal\">\n            <AccountList\n              allAccounts={allAccounts}\n              publicKey={publicKey}\n              setIsDropdownOpen={setIsDropdownOpen}\n            />\n          </div>\n        </SlideupModal>\n      </React.Fragment>\n    </>\n  );\n};\n","import { Button } from \"@stellar/design-system\";\nimport get from \"lodash/get\";\nimport React, { useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useDispatch } from \"react-redux\";\nimport { useLocation, useHistory } from \"react-router-dom\";\n\nimport { newTabHref } from \"helpers/urls\";\n\nimport { ROUTES } from \"popup/constants/routes\";\nimport { openTab } from \"popup/helpers/navigate\";\nimport { View } from \"popup/basics/layout/View\";\nimport {\n  confirmPassword,\n  loadLastUsedAccount,\n} from \"popup/ducks/accountServices\";\nimport { EnterPassword } from \"popup/components/EnterPassword\";\n\nimport \"./styles.scss\";\n\nexport const UnlockAccount = () => {\n  const { t } = useTranslation();\n  const location = useLocation();\n  const history = useHistory();\n  const from = get(location, \"state.from.pathname\", \"\") as ROUTES;\n  const queryParams = get(location, \"search\", \"\");\n  const destination = from || ROUTES.account;\n\n  const [accountAddress, setAccountAddress] = useState(\"\");\n\n  const dispatch = useDispatch();\n\n  const handleSubmit = async (password: string) => {\n    // eslint-disable-next-line @typescript-eslint/await-thenable\n    await dispatch(confirmPassword(password));\n    // skip this location in history, we won't need to come back here after unlocking account\n    history.replace(`${destination}${queryParams}`);\n  };\n\n  useEffect(() => {\n    const fetchLastUsedAccount = async () => {\n      /* eslint-disable */\n      const response = (await dispatch(loadLastUsedAccount())) as any;\n      if (loadLastUsedAccount.fulfilled.match(response)) {\n        setAccountAddress(response.payload.lastUsedAccount);\n      }\n      /* eslint-enable */\n    };\n\n    fetchLastUsedAccount();\n  }, [dispatch]);\n\n  return (\n    <React.Fragment>\n      <View.Header />\n\n      <EnterPassword\n        accountAddress={accountAddress}\n        title={t(\"Welcome back!\")}\n        description={t(\"Enter password to unlock Freighter.\")}\n        onConfirm={handleSubmit}\n        confirmButtonTitle={t(\"Login\")}\n      />\n\n      <View.Footer customGap=\"0.5rem\">\n        <div className=\"UnlockAccount__footer-label\">\n          {t(\"Want to add another account?\")}\n        </div>\n\n        <Button\n          size=\"md\"\n          isFullWidth\n          variant=\"tertiary\"\n          onClick={() => {\n            openTab(newTabHref(ROUTES.recoverAccount));\n          }}\n        >\n          {t(\"Import using account seed phrase\")}\n        </Button>\n\n        <Button\n          size=\"md\"\n          isFullWidth\n          variant=\"tertiary\"\n          onClick={() => {\n            openTab(newTabHref(ROUTES.accountCreator));\n          }}\n        >\n          {t(\"Create a wallet\")}\n        </Button>\n      </View.Footer>\n    </React.Fragment>\n  );\n};\n","import React from \"react\";\nimport { Button, Heading } from \"@stellar/design-system\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { ROUTES } from \"popup/constants/routes\";\nimport { navigateTo } from \"popup/helpers/navigate\";\nimport { View } from \"popup/basics/layout/View\";\n\nimport LogoWelcome from \"popup/assets/logo-freighter-welcome.svg\";\n\nimport \"./styles.scss\";\n\nexport const Welcome = () => {\n  const { t } = useTranslation();\n\n  return (\n    <React.Fragment>\n      <View.Content>\n        <div className=\"Welcome__column\">\n          <div className=\"Welcome__centered-screen\">\n            <img src={LogoWelcome} alt=\"Freighter logo\" />\n            <div>\n              <Heading\n                addlClassName=\"Welcome__heading\"\n                as=\"h1\"\n                size=\"xl\"\n                weight=\"semi-bold\"\n              >\n                {t(\"Welcome to Freighter\")}\n              </Heading>\n              <Heading\n                addlClassName=\"Welcome__heading Welcome__heading--subheading\"\n                as=\"h1\"\n                size=\"xl\"\n                weight=\"semi-bold\"\n              >\n                {t(\"Your favorite Stellar wallet\")}\n              </Heading>\n            </div>\n            <div className=\"Welcome__cta\">\n              {t(\"How do you want to get started?\")}\n            </div>\n          </div>\n          <div className=\"Welcome__row-screen\">\n            <Button\n              size=\"lg\"\n              variant=\"secondary\"\n              onClick={() => navigateTo(ROUTES.accountCreator)}\n            >\n              {t(\"Create new wallet\")}\n            </Button>\n            <Button\n              size=\"lg\"\n              variant=\"tertiary\"\n              onClick={() => navigateTo(ROUTES.recoverAccount)}\n            >\n              {t(\"Import wallet\")}\n            </Button>\n          </div>\n        </div>\n      </View.Content>\n    </React.Fragment>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { Button, Input } from \"@stellar/design-system\";\nimport { useTranslation } from \"react-i18next\";\nimport { Field, Form, Formik } from \"formik\";\n\nimport { showBackupPhrase } from \"@shared/api/internal\";\n\nimport { ROUTES } from \"popup/constants/routes\";\nimport { navigateTo } from \"popup/helpers/navigate\";\nimport { emitMetric } from \"helpers/metrics\";\n\nimport { METRIC_NAMES } from \"popup/constants/metricsNames\";\n\nimport { MnemonicDisplay } from \"popup/components/mnemonicPhrase/MnemonicDisplay\";\nimport { SubviewHeader } from \"popup/components/SubviewHeader\";\nimport { View } from \"popup/basics/layout/View\";\n\nimport { BackupPhraseWarningMessage } from \"popup/components/WarningMessages\";\n\nimport \"./styles.scss\";\n\nexport const DisplayBackupPhrase = () => {\n  const { t } = useTranslation();\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [isPhraseUnlocked, setIsPhraseUnlocked] = useState(false);\n  const [mnemonicPhrase, setMnemonicPhrase] = useState(\"\");\n\n  useEffect(() => {\n    emitMetric(\n      isPhraseUnlocked\n        ? METRIC_NAMES.viewDisplayBackupPhrase\n        : METRIC_NAMES.viewUnlockBackupPhrase,\n    );\n  }, [isPhraseUnlocked]);\n\n  interface FormValues {\n    password: string;\n  }\n  const initialValues: FormValues = {\n    password: \"\",\n  };\n\n  const handleSubmit = async (values: FormValues) => {\n    const { password } = values;\n    const res = await showBackupPhrase(password);\n\n    if (res.error) {\n      setErrorMessage(res.error);\n      emitMetric(METRIC_NAMES.backupPhraseFail, {\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        error_type: res.error,\n      });\n    } else {\n      setMnemonicPhrase(res.mnemonicPhrase);\n      setIsPhraseUnlocked(true);\n      setErrorMessage(\"\");\n      emitMetric(METRIC_NAMES.backupPhraseSuccess);\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <SubviewHeader title={t(\"Show recovery phrase\")} />\n      {isPhraseUnlocked ? (\n        <>\n          <View.Content>\n            <div>\n              <p>\n                {t(\n                  \"Anyone who has access to this phrase has access to your account and to the funds in it, so save it in a safe and secure place.\",\n                )}\n              </p>\n              <MnemonicDisplay mnemonicPhrase={mnemonicPhrase} isPopupView />\n            </div>\n          </View.Content>\n          <View.Footer>\n            <Button\n              size=\"md\"\n              isFullWidth\n              variant=\"tertiary\"\n              onClick={() => navigateTo(ROUTES.account)}\n            >\n              {t(\"Done\")}\n            </Button>\n          </View.Footer>\n        </>\n      ) : (\n        <>\n          <Formik onSubmit={handleSubmit} initialValues={initialValues}>\n            {({ dirty, isSubmitting, isValid }) => (\n              <Form className=\"DisplayBackupPhrase__form\">\n                <View.Content>\n                  <BackupPhraseWarningMessage />\n                  <Input\n                    fieldSize=\"md\"\n                    id=\"password\"\n                    autoComplete=\"off\"\n                    error={errorMessage}\n                    customInput={<Field />}\n                    type=\"password\"\n                    name=\"password\"\n                    placeholder={t(\"Enter your password\")}\n                  />\n                </View.Content>\n                <View.Footer>\n                  <Button\n                    size=\"md\"\n                    disabled={!(isValid && dirty)}\n                    isFullWidth\n                    isLoading={isSubmitting}\n                    type=\"submit\"\n                    variant=\"secondary\"\n                  >\n                    {t(\"Show recovery phrase\")}\n                  </Button>\n                </View.Footer>\n              </Form>\n            )}\n          </Formik>\n        </>\n      )}\n    </React.Fragment>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { Networks } from \"stellar-sdk\";\n\nimport {\n  createAccount,\n  changeNetwork,\n  fundAccount,\n  addAccount,\n  importAccount,\n  importHardwareWallet,\n  makeAccountActive,\n  updateAccountName,\n  loadAccount,\n  getMnemonicPhrase,\n  confirmMnemonicPhrase,\n  recoverAccount,\n  confirmPassword,\n  getAccountIndexerBalances,\n  getAccountHistoryStandalone,\n  getAssetIcons,\n  retryAssetIcon,\n  getAssetDomains,\n  rejectAccess,\n  grantAccess,\n  handleSignedHwPayload,\n  signTransaction,\n  signFreighterTransaction,\n  addRecentAddress,\n  loadRecentAddresses,\n  signOut,\n  saveAllowList,\n  saveSettings,\n  loadSettings,\n  showBackupPhrase,\n  addCustomNetwork,\n  removeCustomNetwork,\n  editCustomNetwork,\n} from \"@shared/api/internal\";\nimport {\n  requestPublicKey,\n  submitTransaction,\n  requestNetwork,\n  requestNetworkDetails,\n} from \"@shared/api/external\";\nimport { WalletType } from \"@shared/constants/hardwareWallet\";\nimport {\n  NETWORK_NAMES,\n  TESTNET_NETWORK_DETAILS,\n  NETWORKS,\n  NETWORK_URLS,\n  FUTURENET_NETWORK_DETAILS,\n} from \"@shared/constants/stellar\";\nimport { Balances } from \"@shared/api/types\";\nimport { sendMessageToBackground } from \"@shared/api/helpers/extensionMessaging\";\nimport { SERVICE_TYPES, DEV_SERVER } from \"@shared/constants/services\";\n\nconst testPublicKey =\n  \"GAM7OKWGYLITNSTD6335XNCBT6S2MZRT7UWQVZJHF5BQVMNF3YIKJTWY\";\nconst testSecretKey =\n  \"SC3JPZM3IULPEWMXYCMUI5DHQQRE4TVC75BMNKZZZSSYWXVLJUMPINWG\";\nconst testPassword = \"test\";\nconst testTxXDR =\n  \"AAAAAgAAAAC/Aa0zCy4X49LY6Y9QoC9Z94wG2/mz7eFcQJOH3qGY0AAAAGQAAAAAAAAAAQAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAACwAAAAAAAAACAAAAAAAAAAA=\";\nconst random = Math.random().toString(36).substring(2);\nconst testCustomNetwork = {\n  network: NETWORKS.TESTNET,\n  networkName: `custom network ${random}`,\n  networkUrl: NETWORK_URLS.TESTNET,\n  networkPassphrase: Networks.TESTNET,\n};\nconst testBalances = {\n  native: {\n    token: { type: \"native\", code: \"XLM\" },\n  },\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  \"USDC:GBBD47IF6LWK7P7MDEVSCWR7DPUWV3NY3DTQEVFL4NAT4AQH3ZLLFLA5\": {\n    token: {\n      type: \"credit_alphanum4\",\n      code: \"USDC\",\n      issuer: {\n        key: \"GBBD47IF6LWK7P7MDEVSCWR7DPUWV3NY3DTQEVFL4NAT4AQH3ZLLFLA5\",\n        code: \"USDC\",\n      },\n    },\n  },\n} as unknown as Balances;\n\nexport const IntegrationTest = () => {\n  const [isDone, setIsDone] = useState(false);\n\n  useEffect(() => {\n    if (!DEV_SERVER) {\n      console.error(\"used for dev only\");\n      return;\n    }\n\n    const runTests = async () => {\n      let res: any;\n      console.log(\"🧪 starting integration tests 🧪\");\n      res = await resetDevData();\n      if (res.error) {\n        console.error(\n          \"extension must be built in experimental mode to run integration tests\",\n        );\n        return;\n      }\n\n      res = await changeNetwork(NETWORK_NAMES.TESTNET);\n      runAsserts(\"changeNetwork\", () => {\n        assertEq(res, TESTNET_NETWORK_DETAILS);\n      });\n\n      res = await createAccount(testPassword);\n      runAsserts(\"createAccount\", () => {\n        assertArray(res.allAccounts);\n        assertString(res.publicKey);\n      });\n\n      await fundAccount(testPublicKey);\n      // eslint-disable-next-line @typescript-eslint/no-empty-function\n      runAsserts(\"fundAccount\", () => {});\n\n      res = await addAccount(testPassword);\n      runAsserts(\"addAccount\", () => {\n        assertArray(res.allAccounts);\n        assertString(res.publicKey);\n        assertBoolean(res.hasPrivateKey);\n      });\n\n      res = await importAccount(testPassword, testSecretKey);\n      runAsserts(\"importAccount\", () => {\n        assertArray(res.allAccounts);\n        assertString(res.publicKey);\n        assertBoolean(res.hasPrivateKey);\n      });\n\n      res = await importHardwareWallet(\n        testPublicKey,\n        WalletType.LEDGER,\n        \"44'/148'/1'\",\n      );\n      runAsserts(\"importHardwareWallet\", () => {\n        assertArray(res.allAccounts);\n        assertString(res.publicKey);\n        assertString(res.bipPath);\n        assertBoolean(res.hasPrivateKey);\n      });\n\n      res = await makeAccountActive(testPublicKey);\n      runAsserts(\"makeAccountActive\", () => {\n        assertString(res.publicKey);\n        assertString(res.bipPath);\n        assertBoolean(res.hasPrivateKey);\n      });\n\n      res = await updateAccountName(\"new-name\");\n      runAsserts(\"updateAccountName\", () => {\n        assertArray(res.allAccounts);\n      });\n\n      res = await loadAccount();\n      runAsserts(\"loadAccount\", () => {\n        assertArray(res.allAccounts);\n        assertString(res.publicKey);\n        assertString(res.bipPath);\n        assertBoolean(res.hasPrivateKey);\n        assertString(res.applicationState);\n      });\n\n      res = await getMnemonicPhrase();\n      runAsserts(\"getMnemonicPhrase\", () => {\n        assertString(res.mnemonicPhrase);\n      });\n      const mnemonicPhrase = res.mnemonicPhrase as string;\n\n      res = await confirmMnemonicPhrase(mnemonicPhrase);\n      runAsserts(\"confirmMnemonicPhrase\", () => {\n        assertString(res.applicationState);\n        assertBoolean(res.isCorrectPhrase);\n        assertEq(res.isCorrectPhrase, true);\n      });\n\n      await resetDevData();\n      // eslint-disable-next-line @typescript-eslint/no-empty-function\n      runAsserts(\"resetDevData\", () => {});\n\n      res = await recoverAccount(testPassword, mnemonicPhrase);\n\n      runAsserts(\"recoverAccount\", () => {\n        assertArray(res.allAccounts);\n        assertString(res.publicKey);\n        assertBoolean(res.hasPrivateKey);\n        assertEq(res.error, \"\");\n      });\n\n      res = await confirmPassword(testPassword);\n      runAsserts(\"confirmPassword\", () => {\n        assertArray(res.allAccounts);\n        assertString(res.publicKey);\n        assertString(res.bipPath, true);\n        assertBoolean(res.hasPrivateKey);\n        assertString(res.applicationState);\n      });\n\n      res = await getAccountIndexerBalances(\n        testPublicKey,\n        TESTNET_NETWORK_DETAILS,\n      );\n      runAsserts(\"getAccountBalances\", () => {\n        assertEq(Object.keys(res.balances as object).length > 0, true);\n        assertBoolean(res.isFunded as boolean);\n        assertNumber(res.subentryCount as number);\n      });\n\n      res = await getAccountHistoryStandalone({\n        publicKey: testPublicKey,\n        networkDetails: TESTNET_NETWORK_DETAILS,\n      });\n      runAsserts(\"getAccountHistory\", () => {\n        assertArray(res.operations as any[]);\n      });\n\n      res = await getAssetIcons({\n        balances: testBalances,\n        networkDetails: TESTNET_NETWORK_DETAILS,\n      });\n      runAsserts(\"getAssetIcons\", () => {\n        assertEq(Object.keys(res as object).length > 0, true);\n      });\n\n      res = await retryAssetIcon({\n        key: \"GBBD47IF6LWK7P7MDEVSCWR7DPUWV3NY3DTQEVFL4NAT4AQH3ZLLFLA5\",\n        code: \"USDC\",\n        assetIcons: {},\n        networkDetails: TESTNET_NETWORK_DETAILS,\n      });\n      runAsserts(\"retryAssetIcon\", () => {\n        assertEq(Object.keys(res as object).length > 0, true);\n      });\n\n      res = await getAssetDomains({\n        balances: testBalances,\n        networkDetails: TESTNET_NETWORK_DETAILS,\n      });\n      runAsserts(\"getAssetDomains\", () => {\n        assertEq(Object.keys(res as object).length > 0, true);\n      });\n\n      await rejectAccess();\n      // eslint-disable-next-line @typescript-eslint/no-empty-function\n      runAsserts(\"rejectAccess\", () => {});\n\n      await grantAccess(\"https://laboratory.stellar.org\");\n      // eslint-disable-next-line @typescript-eslint/no-empty-function\n      runAsserts(\"grantAccess\", () => {});\n\n      await handleSignedHwPayload({ signedPayload: \"\" });\n      // eslint-disable-next-line @typescript-eslint/no-empty-function\n      runAsserts(\"handleSignedHwPayload\", () => {});\n\n      await signTransaction();\n      // eslint-disable-next-line @typescript-eslint/no-empty-function\n      runAsserts(\"signTransaction\", () => {});\n\n      res = await signFreighterTransaction({\n        transactionXDR: testTxXDR,\n        network: TESTNET_NETWORK_DETAILS.networkPassphrase,\n      });\n      runAsserts(\"signFreighterTransaction\", () => {\n        assertString(res.signedTransaction);\n      });\n\n      res = await addRecentAddress({ publicKey: testPublicKey });\n      runAsserts(\"addRecentAddress\", () => {\n        assertArray(res.recentAddresses);\n      });\n\n      res = await loadRecentAddresses();\n      runAsserts(\"loadRecentAddresses\", () => {\n        assertArray(res.recentAddresses);\n      });\n\n      res = await signOut();\n      runAsserts(\"signOut\", () => {\n        assertString(res.publicKey, true);\n        assertString(res.applicationState);\n      });\n\n      res = await saveAllowList({\n        allowList: [\"foo\", \"bar\"],\n      });\n      runAsserts(\"saveAllowList\", () => {\n        assertEq(res.allowList, [\"foo\", \"bar\"]);\n      });\n\n      res = await saveSettings({\n        isDataSharingAllowed: true,\n        isMemoValidationEnabled: true,\n        isHideDustEnabled: true,\n      });\n      runAsserts(\"saveSettings\", () => {\n        assertEq(res.networkDetails, FUTURENET_NETWORK_DETAILS);\n        assertArray(res.networksList);\n        assertEq(res.error, undefined);\n        assertEq(res.isDataSharingAllowed, true);\n        assertEq(res.isMemoValidationEnabled, true);\n        assertEq(res.isNonSSLEnabled, true);\n      });\n\n      res = await loadSettings();\n      runAsserts(\"loadSettings\", () => {\n        assertEq(res.networkDetails, FUTURENET_NETWORK_DETAILS);\n        assertArray(res.networksList);\n        assertEq(res.error, undefined);\n        assertEq(res.isDataSharingAllowed, true);\n        assertEq(res.isMemoValidationEnabled, true);\n        assertEq(res.isSafetyValidationEnabled, true);\n        assertEq(res.isValidatingSafeAssetsEnabled, true);\n        assertEq(res.isExperimentalModeEnabled, true);\n        assertEq(res.isNonSSLEnabled, true);\n      });\n\n      res = await showBackupPhrase(testPassword);\n      runAsserts(\"showBackupPhrase\", () => {\n        assertEq(res.error, undefined);\n      });\n\n      res = await addCustomNetwork(testCustomNetwork);\n      const networksListLength = res.networksList.length;\n      runAsserts(\"addCustomNetwork\", () => {\n        assertArray(res.networksList);\n        assertEq(\n          res.networksList[networksListLength - 1].networkName,\n          testCustomNetwork.networkName,\n        );\n      });\n\n      res = await editCustomNetwork({\n        networkDetails: {\n          ...testCustomNetwork,\n          networkName: `new network ${random}`,\n        },\n        networkIndex: networksListLength - 1,\n      });\n\n      runAsserts(\"editCustomNetwork\", () => {\n        assertArray(res.networksList);\n        assertEq(\n          res.networksList[networksListLength - 1].networkName,\n          `new network ${random}`,\n        );\n      });\n\n      res = await removeCustomNetwork(testCustomNetwork.networkName);\n      runAsserts(\"removeCustomNetwork\", () => {\n        assertArray(res.networksList);\n        assertEq(res.networksList.length, networksListLength - 1);\n      });\n\n      await changeNetwork(NETWORK_NAMES.PUBNET);\n      res = await requestPublicKey();\n      runAsserts(\"requestPublicKey\", () => {\n        assertString(res as string);\n      });\n\n      res = await submitTransaction(testTxXDR);\n      runAsserts(\"submitTransaction\", () => {\n        assertString(res as string);\n      });\n\n      res = await requestNetwork();\n      runAsserts(\"requestNetwork\", () => {\n        assertString(res as string);\n      });\n\n      res = await requestNetworkDetails();\n      runAsserts(\"requestNetworkDetails\", () => {\n        assertString(res.network as string);\n        assertString(res.networkPassphrase as string);\n        assertString(res.networkUrl as string);\n      });\n\n      console.log(\"👍 Done 👍\");\n      setIsDone(true);\n    };\n    runTests();\n  }, []);\n\n  return (\n    <div>\n      <div>Running integration tests ...</div>\n      <div>{isDone ? \"Done\" : \"\"}</div>\n    </div>\n  );\n};\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nconst runAsserts = (func: string, asserts = () => {}) => {\n  try {\n    asserts();\n    console.log(`${func} ✅`);\n  } catch (e) {\n    console.error(e);\n  }\n};\n\nconst assertEq = (have: any, want: any) => {\n  const haveString = JSON.stringify(have);\n  const wantString = JSON.stringify(want);\n  if (haveString !== wantString) {\n    throw new Error(`[${haveString}]: incorrect value. Want ${wantString}`);\n  }\n};\n\nconst assertNumber = (val: any) => {\n  if (Number.isNaN(val)) {\n    console.error(\n      `[${val}]: incorrect type. Want Number but found ${typeof val}`,\n    );\n  }\n};\n\nconst assertBoolean = (val: any) => {\n  if (!(typeof val === \"boolean\")) {\n    console.error(\n      `[${val}]: incorrect type. Want Boolean but found ${typeof val}`,\n    );\n  }\n};\n\nconst assertString = (val: any, allowEmpty: boolean = false) => {\n  if (!(typeof val === \"string\") && !(val instanceof String)) {\n    console.error(\n      `[${val}]: incorrect type. Want String but found ${typeof val}`,\n    );\n  } else if (!allowEmpty && val.length === 0) {\n    console.error(`[${val}]: found empty`);\n  }\n};\n\nconst assertArray = (val: any, allowEmpty: boolean = false) => {\n  if (!Array.isArray(val)) {\n    console.error(\n      `[${val}]: incorrect type. Want Array but found ${typeof val}`,\n    );\n  } else if (!allowEmpty && val.length === 0) {\n    console.error(`[${val}]: found empty`);\n  }\n};\n\nconst resetDevData = () =>\n  sendMessageToBackground({\n    type: SERVICE_TYPES.RESET_EXP_DATA,\n  });\n","import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport QrCode from \"qrcode.react\";\nimport { Formik, Field, FieldProps, Form, useFormikContext } from \"formik\";\nimport { object as YupObject, string as YupString } from \"yup\";\nimport { Icon, Input, CopyText, Button } from \"@stellar/design-system\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { isCustomNetwork } from \"@shared/helpers/stellar\";\n\nimport { emitMetric } from \"helpers/metrics\";\nimport { truncatedPublicKey } from \"helpers/stellar\";\n\nimport { METRIC_NAMES } from \"popup/constants/metricsNames\";\nimport { openTab } from \"popup/helpers/navigate\";\nimport { View } from \"popup/basics/layout/View\";\nimport {\n  accountNameSelector,\n  publicKeySelector,\n  updateAccountName,\n} from \"popup/ducks/accountServices\";\nimport { settingsNetworkDetailsSelector } from \"popup/ducks/settings\";\n\nimport \"./styles.scss\";\n\nexport const ViewPublicKey = () => {\n  const { t } = useTranslation();\n  const publicKey = useSelector(publicKeySelector);\n  const accountName = useSelector(accountNameSelector);\n  const [isEditingName, setIsEditingName] = useState(false);\n  const networkDetails = useSelector(settingsNetworkDetailsSelector);\n\n  const EditNameButton = () => {\n    const { submitForm } = useFormikContext();\n\n    return isEditingName ? (\n      <button onClick={() => submitForm()}>\n        <Icon.Check />\n      </button>\n    ) : (\n      <button onClick={() => setIsEditingName(true)}>\n        <Icon.Edit01 />\n      </button>\n    );\n  };\n\n  const dispatch = useDispatch();\n\n  interface FormValue {\n    accountName: string;\n  }\n\n  const initialValues: FormValue = {\n    accountName,\n  };\n\n  const handleSubmit = async (values: FormValue) => {\n    const { accountName: newAccountName } = values;\n    if (accountName !== newAccountName) {\n      // eslint-disable-next-line\n      await dispatch(updateAccountName(newAccountName));\n      emitMetric(METRIC_NAMES.viewPublicKeyAccountRenamed);\n    }\n    setIsEditingName(false);\n  };\n\n  return (\n    <React.Fragment>\n      <Formik\n        initialValues={initialValues}\n        onSubmit={handleSubmit}\n        validationSchema={YupObject().shape({\n          accountName: YupString().max(24, t(\"max of 24 characters allowed\")),\n        })}\n      >\n        {({ errors }) => (\n          <>\n            <View.AppHeader\n              hasBackButton\n              centerContent={\n                isEditingName ? (\n                  <Form className=\"ViewPublicKey__form\">\n                    <Field name=\"accountName\">\n                      {({ field }: FieldProps) => (\n                        <Input\n                          fieldSize=\"md\"\n                          autoComplete=\"off\"\n                          id=\"accountName\"\n                          placeholder={accountName}\n                          {...field}\n                          error={errors.accountName}\n                        />\n                      )}\n                    </Field>\n                  </Form>\n                ) : (\n                  <div className=\"ViewPublicKey__account-name-display\">\n                    {accountName}\n                  </div>\n                )\n              }\n              rightContent={\n                <div className=\"ViewPublicKey--account-name-div\">\n                  <EditNameButton />\n                </div>\n              }\n            />\n          </>\n        )}\n      </Formik>\n      <View.Content>\n        <div className=\"ViewPublicKey__content\">\n          <div className=\"ViewPublicKey__qr-code\">\n            <QrCode\n              value={publicKey}\n              style={{\n                width: \"10rem\",\n                height: \"10rem\",\n              }}\n            />\n          </div>\n          <div className=\"ViewPublicKey__address-copy-label\">\n            {t(\"Wallet Address\")}\n          </div>\n          <div className=\"ViewPublicKey__address-copy\">\n            {truncatedPublicKey(publicKey)}\n          </div>\n          <div className=\"ViewPublicKey__copy-btn\">\n            <CopyText textToCopy={publicKey} doneLabel=\"ADDRESS COPIED\">\n              <Button size=\"md\" variant=\"tertiary\">\n                {t(\"COPY\")}\n              </Button>\n            </CopyText>\n          </div>\n        </div>\n      </View.Content>\n      <View.Footer>\n        <div className=\"ViewPublicKey__external-link\">\n          {!isCustomNetwork(networkDetails) ? (\n            <Button\n              size=\"md\"\n              isFullWidth\n              variant=\"tertiary\"\n              onClick={() => {\n                openTab(\n                  `https://stellar.expert/explorer/${networkDetails.network.toLowerCase()}/account/${publicKey}`,\n                );\n                emitMetric(METRIC_NAMES.viewPublicKeyClickedStellarExpert);\n              }}\n            >\n              {t(\"View on\")} stellar.expert\n            </Button>\n          ) : null}\n        </div>\n      </View.Footer>\n    </React.Fragment>\n  );\n};\n","var _path;\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nconst SvgIconSettingsNetwork = props => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  xmlns: \"http://www.w3.org/2000/svg\",\n  width: 20,\n  height: 20,\n  fill: \"none\"\n}, props), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n  stroke: \"#707070\",\n  strokeLinecap: \"round\",\n  strokeLinejoin: \"round\",\n  strokeWidth: 1.5,\n  d: \"M15.833 7.5A5.833 5.833 0 0 1 10 13.333M15.833 7.5A5.833 5.833 0 0 0 10 1.667M15.833 7.5H4.167M10 13.333A5.833 5.833 0 0 1 4.167 7.5M10 13.333A8.93 8.93 0 0 0 12.334 7.5 8.93 8.93 0 0 0 10 1.667m0 11.666A8.92 8.92 0 0 1 7.667 7.5 8.92 8.92 0 0 1 10 1.667m0 11.666V15M4.167 7.5A5.833 5.833 0 0 1 10 1.667m1.667 15a1.667 1.667 0 1 1-3.334 0m3.334 0C11.667 15.746 10.92 15 10 15m1.667 1.666H17.5m-9.167 0C8.333 15.747 9.08 15 10 15m-1.667 1.666H2.5\"\n})));\nexport default SvgIconSettingsNetwork;","var _path;\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nconst SvgIconSettingsSecurity = props => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  xmlns: \"http://www.w3.org/2000/svg\",\n  width: 20,\n  height: 20,\n  fill: \"none\"\n}, props), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n  stroke: \"#707070\",\n  strokeLinecap: \"round\",\n  strokeLinejoin: \"round\",\n  strokeWidth: 1.5,\n  d: \"M9.418 18.012c.185.108.277.162.407.19a1 1 0 0 0 .35 0c.13-.028.222-.082.407-.19 1.623-.947 6.085-3.922 6.085-8.012V6.014c0-.666 0-.999-.11-1.285a1.67 1.67 0 0 0-.455-.658c-.23-.202-.542-.32-1.166-.553l-4.468-1.676a1.8 1.8 0 0 0-.349-.11.8.8 0 0 0-.238 0c-.09.013-.176.045-.35.11L5.065 3.518c-.624.234-.936.35-1.166.553-.203.179-.36.405-.456.658-.109.286-.109.62-.109 1.285V10c0 4.09 4.462 7.065 6.085 8.012\"\n})));\nexport default SvgIconSettingsSecurity;","var _g, _defs;\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nconst SvgIconSettingsHelp = props => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  xmlns: \"http://www.w3.org/2000/svg\",\n  width: 20,\n  height: 20,\n  fill: \"none\"\n}, props), _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n  clipPath: \"url(#icon-settings-help_svg__a)\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  stroke: \"#707070\",\n  strokeLinecap: \"round\",\n  strokeLinejoin: \"round\",\n  strokeWidth: 1.5,\n  d: \"M7.614 7.613 4.107 4.107m0 11.785L7.64 12.36m4.744.026 3.506 3.506m0-11.785L12.357 7.64M18.333 10a8.333 8.333 0 1 1-16.666 0 8.333 8.333 0 0 1 16.666 0m-5 0a3.333 3.333 0 1 1-6.666 0 3.333 3.333 0 0 1 6.666 0\"\n}))), _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"clipPath\", {\n  id: \"icon-settings-help_svg__a\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#fff\",\n  d: \"M0 0h20v20H0z\"\n})))));\nexport default SvgIconSettingsHelp;","var _g, _defs;\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nconst SvgIconSettingsFeedback = props => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  xmlns: \"http://www.w3.org/2000/svg\",\n  width: 20,\n  height: 20,\n  fill: \"none\"\n}, props), _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n  clipPath: \"url(#icon-settings-feedback_svg__a)\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  stroke: \"#707070\",\n  strokeLinecap: \"round\",\n  strokeLinejoin: \"round\",\n  strokeWidth: 1.5,\n  d: \"M7.575 7.5a2.5 2.5 0 0 1 4.858.833c0 1.667-2.5 2.5-2.5 2.5M10 14.166h.008M18.333 10a8.333 8.333 0 1 1-16.666 0 8.333 8.333 0 0 1 16.666 0\"\n}))), _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"clipPath\", {\n  id: \"icon-settings-feedback_svg__a\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#fff\",\n  d: \"M0 0h20v20H0z\"\n})))));\nexport default SvgIconSettingsFeedback;","var _g, _defs;\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nconst SvgIconSettingsAbout = props => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  xmlns: \"http://www.w3.org/2000/svg\",\n  width: 20,\n  height: 20,\n  fill: \"none\"\n}, props), _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n  clipPath: \"url(#icon-settings-about_svg__a)\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  stroke: \"#707070\",\n  strokeLinecap: \"round\",\n  strokeLinejoin: \"round\",\n  strokeWidth: 1.5,\n  d: \"M10 13.333V10m0-3.333h.008M18.333 10a8.333 8.333 0 1 1-16.666 0 8.333 8.333 0 0 1 16.666 0\"\n}))), _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"clipPath\", {\n  id: \"icon-settings-about_svg__a\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#fff\",\n  d: \"M0 0h20v20H0z\"\n})))));\nexport default SvgIconSettingsAbout;","var _path;\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nconst SvgIconSettingsLogout = props => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  xmlns: \"http://www.w3.org/2000/svg\",\n  width: 20,\n  height: 20,\n  fill: \"none\"\n}, props), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n  stroke: \"#E5484D\",\n  strokeLinecap: \"round\",\n  strokeLinejoin: \"round\",\n  strokeWidth: 1.5,\n  d: \"M13.333 14.167 17.5 10m0 0-4.167-4.167M17.5 10h-10m0-7.5h-1c-1.4 0-2.1 0-2.635.272a2.5 2.5 0 0 0-1.093 1.093C2.5 4.4 2.5 5.1 2.5 6.5v7c0 1.4 0 2.1.272 2.635a2.5 2.5 0 0 0 1.093 1.092C4.4 17.5 5.1 17.5 6.5 17.5h1\"\n})));\nexport default SvgIconSettingsLogout;","import { Heading, Icon } from \"@stellar/design-system\";\nimport React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { ListNavLink, ListNavLinkWrapper } from \"popup/basics/ListNavLink\";\nimport { View } from \"popup/basics/layout/View\";\nimport { ROUTES } from \"popup/constants/routes\";\nimport { signOut } from \"popup/ducks/accountServices\";\nimport { navigateTo } from \"popup/helpers/navigate\";\n\nimport IconNetwork from \"popup/assets/icon-settings-network.svg?react\";\nimport IconSecurity from \"popup/assets/icon-settings-security.svg?react\";\nimport IconHelp from \"popup/assets/icon-settings-help.svg?react\";\nimport IconFeedback from \"popup/assets/icon-settings-feedback.svg?react\";\nimport IconAbout from \"popup/assets/icon-settings-about.svg?react\";\nimport IconLogout from \"popup/assets/icon-settings-logout.svg?react\";\n\nimport packageJson from \"../../../../package.json\";\n\nimport \"./styles.scss\";\n\nexport const Settings = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n\n  const signOutAndClose = async (e: React.FormEvent) => {\n    e.preventDefault();\n    // eslint-disable-next-line @typescript-eslint/await-thenable\n    await dispatch(signOut());\n    navigateTo(ROUTES.welcome);\n  };\n\n  return (\n    <>\n      <View.Content>\n        <nav className=\"Settings\">\n          <div>\n            <div className=\"Settings__header\">\n              <Heading as=\"h2\" size=\"lg\">\n                Settings\n              </Heading>\n              <div className=\"Settings__version\">{packageJson.version}</div>\n            </div>\n            <ListNavLinkWrapper>\n              <div className=\"Settings__row\">\n                <ListNavLink\n                  icon={<IconNetwork />}\n                  href={ROUTES.networkSettings}\n                >\n                  {t(\"Network\")}\n                </ListNavLink>\n              </div>\n\n              <div className=\"Settings__row\">\n                <ListNavLink\n                  href={ROUTES.preferences}\n                  icon={<Icon.User02 className=\"Settings__icon__preferences\" />}\n                >\n                  {t(\"Preferences\")}\n                </ListNavLink>\n              </div>\n\n              <div className=\"Settings__row\">\n                <ListNavLink href={ROUTES.security} icon={<IconSecurity />}>\n                  {t(\"Security\")}\n                </ListNavLink>\n              </div>\n              <div className=\"Settings__row\">\n                <ListNavLink\n                  href=\"https://www.freighter.app/faq\"\n                  icon={<IconHelp />}\n                >\n                  {t(\"Help\")}\n                </ListNavLink>\n              </div>\n              <div className=\"Settings__row\">\n                <ListNavLink\n                  href={ROUTES.leaveFeedback}\n                  icon={<IconFeedback />}\n                >\n                  {t(\"Leave Feedback\")}\n                </ListNavLink>\n              </div>\n              <div className=\"Settings__row\">\n                <ListNavLink href={ROUTES.about} icon={<IconAbout />}>\n                  {t(\"About\")}\n                </ListNavLink>\n              </div>\n              <div className=\"Settings__row\">\n                <div className=\"Settings__icon\">\n                  <IconLogout />\n                </div>\n                <div\n                  className=\"Settings__logout\"\n                  onClick={(e) => signOutAndClose(e)}\n                >\n                  {t(\"Log Out\")}\n                </div>\n              </div>\n            </ListNavLinkWrapper>\n          </div>\n        </nav>\n      </View.Content>\n    </>\n  );\n};\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport { useFormikContext } from \"formik\";\nimport { Banner } from \"@stellar/design-system\";\nimport debounce from \"lodash/debounce\";\nimport isEqual from \"lodash/isEqual\";\n\nimport \"./styles.scss\";\n\nexport interface AutoSaveFieldsProps {\n  /**\n   * Number of milliseconds to wait after last change before submitting the form\n   */\n  debounceMs?: number;\n}\n\nexport const AutoSaveFields = ({ debounceMs = 500 }: AutoSaveFieldsProps) => {\n  const formik = useFormikContext();\n  const [didSaveFail, setDidSaveFail] = useState(false);\n  const [values, setValues] = useState(formik.values);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const debouncedSubmit = useCallback(\n    debounce(async (ctx: typeof formik) => {\n      try {\n        await ctx.submitForm();\n      } catch (e) {\n        console.error(e);\n        setDidSaveFail(true);\n      }\n    }, debounceMs),\n    [formik.submitForm, debounceMs],\n  );\n\n  useEffect(() => {\n    if (formik.isValid && formik.dirty && !formik.isSubmitting) {\n      if (!isEqual(formik.values, values)) {\n        setValues(formik.values);\n        debouncedSubmit(formik);\n      }\n    }\n  }, [\n    debouncedSubmit,\n    formik,\n    formik.values,\n    formik.dirty,\n    formik.isSubmitting,\n    formik.isValid,\n    values,\n  ]);\n\n  useEffect(() => {\n    if (didSaveFail) {\n      setTimeout(() => {\n        setDidSaveFail(false);\n      }, 750);\n    }\n  }, [didSaveFail]);\n\n  return (\n    <div\n      className={`AutoSave--status ${\n        didSaveFail ? \"AutoSave--status--failed\" : \"\"\n      }`}\n    >\n      <Banner variant=\"error\">Save failed!</Banner>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Toggle } from \"@stellar/design-system\";\nimport { Field, Form, Formik } from \"formik\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useTranslation } from \"react-i18next\";\nimport { View } from \"popup/basics/layout/View\";\n\nimport { saveSettings, settingsSelector } from \"popup/ducks/settings\";\n\nimport { SubviewHeader } from \"popup/components/SubviewHeader\";\nimport { AutoSaveFields } from \"popup/components/AutoSave\";\n\nimport \"./styles.scss\";\n\nexport const Preferences = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const { isDataSharingAllowed, isMemoValidationEnabled, isHideDustEnabled } =\n    useSelector(settingsSelector);\n\n  interface SettingValues {\n    isValidatingMemoValue: boolean;\n    isDataSharingAllowedValue: boolean;\n    isHideDustEnabledValue: boolean;\n  }\n\n  const initialValues: SettingValues = {\n    isValidatingMemoValue: isMemoValidationEnabled,\n    isDataSharingAllowedValue: isDataSharingAllowed,\n    isHideDustEnabledValue: isHideDustEnabled,\n  };\n\n  const handleSubmit = async (formValue: SettingValues) => {\n    const {\n      isValidatingMemoValue,\n      isDataSharingAllowedValue,\n      isHideDustEnabledValue,\n    } = formValue;\n\n    // eslint-disable-next-line\n    await dispatch(\n      saveSettings({\n        isMemoValidationEnabled: isValidatingMemoValue,\n        isDataSharingAllowed: isDataSharingAllowedValue,\n        isHideDustEnabled: isHideDustEnabledValue,\n      }),\n    );\n  };\n\n  return (\n    <React.Fragment>\n      <SubviewHeader title={t(\"Preferences\")} />\n      <Formik\n        initialValues={initialValues}\n        onSubmit={handleSubmit}\n        enableReinitialize\n      >\n        <View.Content hasNoTopPadding>\n          <div className=\"Preferences\">\n            <Form>\n              <AutoSaveFields />\n              <div className=\"Preferences--section\">\n                <div className=\"Preferences--section--title\">\n                  {t(\"Verification with\")} stellar.expert\n                </div>\n                <div className=\"Preferences--toggle\">\n                  <label\n                    htmlFor=\"isValidatingMemoValue\"\n                    className=\"Preferences--label\"\n                  >\n                    {t(\"Validate addresses that require a memo\")}\n                  </label>\n                  <Toggle\n                    fieldSize=\"md\"\n                    checked={initialValues.isValidatingMemoValue}\n                    customInput={<Field />}\n                    id=\"isValidatingMemoValue\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"Preferences--section\">\n                <div className=\"Preferences--section--title\">\n                  {t(\"Anonymous data sharing\")}{\" \"}\n                </div>\n\n                <div className=\"Preferences--toggle\">\n                  <label\n                    htmlFor=\"isDataSharingAllowedValue\"\n                    className=\"Preferences--label\"\n                  >\n                    {t(\n                      \"Allow Freighter to collect anonymous information about usage. Freighter will never collect your personal information such as IP address, keys, balance or transaction amounts.\",\n                    )}\n                  </label>\n                  <Toggle\n                    fieldSize=\"md\"\n                    checked={initialValues.isDataSharingAllowedValue}\n                    customInput={<Field />}\n                    id=\"isDataSharingAllowedValue\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"Preferences--section\">\n                <div className=\"Preferences--section--title\">\n                  {t(\"Hide small payments\")}{\" \"}\n                </div>\n\n                <div className=\"Preferences--toggle\">\n                  <label\n                    htmlFor=\"isHideDustEnabledValue\"\n                    className=\"Preferences--label\"\n                  >\n                    {t(\"Hide payments smaller than 0.1 XLM\")}\n                  </label>\n                  <Toggle\n                    fieldSize=\"md\"\n                    checked={initialValues.isHideDustEnabledValue}\n                    customInput={<Field />}\n                    id=\"isHideDustEnabledValue\"\n                  />\n                </div>\n              </div>\n            </Form>\n          </div>\n        </View.Content>\n      </Formik>\n    </React.Fragment>\n  );\n};\n","var _path;\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nconst SvgIconSecurityAssetList = props => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  xmlns: \"http://www.w3.org/2000/svg\",\n  width: 20,\n  height: 20,\n  fill: \"none\"\n}, props), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n  stroke: \"#707070\",\n  strokeLinecap: \"round\",\n  strokeLinejoin: \"round\",\n  strokeWidth: 1.5,\n  d: \"M17.5 10h-10m10-5h-10m10 10h-10m-3.333-5A.833.833 0 1 1 2.5 10a.833.833 0 0 1 1.667 0m0-5A.833.833 0 1 1 2.5 5a.833.833 0 0 1 1.667 0m0 10A.833.833 0 1 1 2.5 15a.833.833 0 0 1 1.667 0\"\n})));\nexport default SvgIconSecurityAssetList;","var _path;\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nconst SvgIconSecurityPhrase = props => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  xmlns: \"http://www.w3.org/2000/svg\",\n  width: 20,\n  height: 20,\n  fill: \"none\"\n}, props), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n  stroke: \"#707070\",\n  strokeLinecap: \"round\",\n  strokeLinejoin: \"round\",\n  strokeWidth: 1.5,\n  d: \"M16.667 8.334V5.667c0-1.4 0-2.1-.273-2.635a2.5 2.5 0 0 0-1.092-1.093c-.535-.272-1.235-.272-2.635-.272H7.333c-1.4 0-2.1 0-2.635.272a2.5 2.5 0 0 0-1.092 1.093c-.273.535-.273 1.235-.273 2.635v8.667c0 1.4 0 2.1.273 2.635a2.5 2.5 0 0 0 1.092 1.092c.535.273 1.235.273 2.635.273H8.75m2.083-9.167H6.667m2.5 3.333h-2.5m6.666-6.666H6.667m9.375 8.333v-1.458a1.458 1.458 0 1 0-2.917 0v1.458M13 17.5h3.167c.466 0 .7 0 .878-.09a.83.83 0 0 0 .364-.365c.091-.178.091-.411.091-.878V15.5c0-.466 0-.7-.09-.878a.83.83 0 0 0-.365-.364c-.178-.091-.412-.091-.878-.091H13c-.467 0-.7 0-.878.09a.83.83 0 0 0-.364.365c-.091.178-.091.412-.091.878v.667c0 .467 0 .7.09.878.08.157.208.285.365.364.178.091.411.091.878.091\"\n})));\nexport default SvgIconSecurityPhrase;","var _path;\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nconst SvgIconSecurityExperimentalLink = props => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  xmlns: \"http://www.w3.org/2000/svg\",\n  width: 20,\n  height: 20,\n  fill: \"none\"\n}, props), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n  stroke: \"#707070\",\n  strokeLinecap: \"round\",\n  strokeLinejoin: \"round\",\n  strokeWidth: 1.5,\n  d: \"M18.333 9.167V6.833c0-.933 0-1.4-.181-1.756a1.67 1.67 0 0 0-.729-.729c-.356-.181-.823-.181-1.756-.181H4.333c-.933 0-1.4 0-1.756.181-.314.16-.569.415-.729.729-.181.356-.181.823-.181 1.756v3c0 .934 0 1.4.181 1.757.16.314.415.569.729.728.356.182.823.182 1.756.182h4.834M10 8.333h.004m4.163 0h.004m-8.338 0h.005m10.204 5.834v-1.459a1.458 1.458 0 1 0-2.917 0v1.459m-2.917-5.834a.208.208 0 1 1-.416 0 .208.208 0 0 1 .416 0m4.167 0a.208.208 0 1 1-.417 0 .208.208 0 0 1 .417 0m-8.333 0a.208.208 0 1 1-.417 0 .208.208 0 0 1 .417 0M13 17.5h3.167c.466 0 .7 0 .878-.09a.83.83 0 0 0 .364-.365c.091-.178.091-.412.091-.878V15.5c0-.467 0-.7-.09-.878a.83.83 0 0 0-.365-.364c-.178-.091-.412-.091-.878-.091H13c-.467 0-.7 0-.878.09a.83.83 0 0 0-.364.365c-.091.178-.091.411-.091.878v.667c0 .466 0 .7.09.878.08.157.208.284.365.364.178.091.411.091.878.091\"\n})));\nexport default SvgIconSecurityExperimentalLink;","import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { ROUTES } from \"popup/constants/routes\";\n\n// import { newTabHref } from \"helpers/urls\";\n// import { openTab } from \"popup/helpers/navigate\";\n\nimport { SubviewHeader } from \"popup/components/SubviewHeader\";\nimport { View } from \"popup/basics/layout/View\";\n\nimport {\n  ListNavLink,\n  // ListNavButtonLink,\n  ListNavLinkWrapper,\n} from \"popup/basics/ListNavLink\";\n\nimport IconAssetList from \"popup/assets/icon-security-asset-list.svg?react\";\nimport IconPhrase from \"popup/assets/icon-security-phrase.svg?react\";\nimport IconExperimentalLink from \"popup/assets/icon-security-experimental-link.svg?react\";\n\nimport \"./styles.scss\";\n\nexport const Security = () => {\n  const { t } = useTranslation();\n\n  return (\n    <React.Fragment>\n      <SubviewHeader title=\"Security\" />\n      <View.Content hasNoTopPadding>\n        <ListNavLinkWrapper>\n          {/*\n      TODO: Add Change Password\n      <ListNavLink href=\"/\">Change Password</ListNavLink>\n      */}\n          <ListNavLink href={ROUTES.manageAssetsLists} icon={<IconAssetList />}>\n            {t(\"Asset lists\")}\n          </ListNavLink>\n          <ListNavLink href={ROUTES.displayBackupPhrase} icon={<IconPhrase />}>\n            {t(\"Show recovery phrase\")}\n          </ListNavLink>\n          <ListNavLink\n            href={ROUTES.advancedSettings}\n            icon={<IconExperimentalLink />}\n          >\n            {t(\"Advanced settings\")}\n          </ListNavLink>\n          {/* <ListNavButtonLink\n            handleClick={() => {\n              openTab(newTabHref(ROUTES.accountMigration));\n            }}\n          >\n            {t(\"Account migration\")}\n          </ListNavButtonLink> */}\n        </ListNavLinkWrapper>\n      </View.Content>\n    </React.Fragment>\n  );\n};\n","import React, { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { Notification, Button, Toggle, Loader } from \"@stellar/design-system\";\nimport { Field, Form, Formik } from \"formik\";\n\nimport {\n  saveExperimentalFeatures,\n  settingsSelector,\n} from \"popup/ducks/settings\";\nimport { SettingsState } from \"@shared/api/types\";\n\nimport { SubviewHeader } from \"popup/components/SubviewHeader\";\nimport { AutoSaveFields } from \"popup/components/AutoSave\";\nimport { View } from \"popup/basics/layout/View\";\nimport IconExperimental from \"popup/assets/icon-settings-experimental.svg\";\n\nimport \"./styles.scss\";\n\ninterface AdvancedSettingFeatureParams {\n  title: string;\n  isLoading: boolean;\n  isToggled: boolean;\n  toggleId: string;\n  description: string | React.ReactNode;\n}\n\nconst AdvancedSettingFeature = ({\n  title,\n  isLoading,\n  isToggled,\n  toggleId,\n  description,\n}: AdvancedSettingFeatureParams) => (\n  <div className=\"AdvancedSettings__feature\">\n    <div className=\"AdvancedSettings__feature__row\">\n      <div className=\"AdvancedSettings__feature__row__title\">\n        <div className=\"AdvancedSettings__feature__row__icon\">\n          <img src={IconExperimental} alt=\"icon experimental feature\" />\n        </div>\n        <span>{title}</span>\n        {isLoading ? (\n          <div className=\"AdvancedSettings__feature__row__loader\">\n            <Loader />\n          </div>\n        ) : null}\n      </div>\n      <div className=\"AdvancedSettings__feature__row__toggle\">\n        <Toggle\n          fieldSize=\"md\"\n          checked={isToggled}\n          customInput={<Field />}\n          id={toggleId}\n        />\n      </div>\n    </div>\n    <div className=\"AdvancedSettings__feature__description\">{description}</div>\n  </div>\n);\n\nexport const AdvancedSettings = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const [isUnderstood, setIsUnderstood] = useState(false);\n\n  const {\n    isExperimentalModeEnabled,\n    isHashSigningEnabled,\n    experimentalFeaturesState,\n    isNonSSLEnabled,\n  } = useSelector(settingsSelector);\n\n  interface SettingValues {\n    isExperimentalModeEnabledValue: boolean;\n    isHashSigningEnabledValue: boolean;\n    isNonSSLEnabledValue: boolean;\n  }\n\n  const initialValues: SettingValues = {\n    isExperimentalModeEnabledValue: isExperimentalModeEnabled,\n    isHashSigningEnabledValue: isHashSigningEnabled,\n    isNonSSLEnabledValue: isNonSSLEnabled,\n  };\n\n  const handleSubmit = async (formValue: SettingValues) => {\n    const {\n      isExperimentalModeEnabledValue,\n      isHashSigningEnabledValue,\n      isNonSSLEnabledValue,\n    } = formValue;\n\n    // eslint-disable-next-line\n    await dispatch(\n      saveExperimentalFeatures({\n        isExperimentalModeEnabled: isExperimentalModeEnabledValue,\n        isHashSigningEnabled: isHashSigningEnabledValue,\n        isNonSSLEnabled: isNonSSLEnabledValue,\n      }),\n    );\n  };\n\n  const isLoading = experimentalFeaturesState === SettingsState.LOADING;\n\n  return isUnderstood ? (\n    <>\n      <SubviewHeader title={t(\"Advanced Settings\")} />\n      <Formik\n        initialValues={initialValues}\n        onSubmit={handleSubmit}\n        enableReinitialize\n      >\n        <View.Content hasNoTopPadding>\n          <Form>\n            <AutoSaveFields />\n            <AdvancedSettingFeature\n              title={t(\"Use Futurenet\")}\n              isLoading={isLoading}\n              isToggled={initialValues.isExperimentalModeEnabledValue}\n              toggleId=\"isExperimentalModeEnabledValue\"\n              description={t(\n                \"Use experimental API’s and connect to the Futurenet, a test network. Please proceed at your own risk as you may be interacting with schemas that are untested and still changing.\",\n              )}\n            />\n            <AdvancedSettingFeature\n              title={t(\"Enable Blind Signing on Ledger\")}\n              isLoading={isLoading}\n              isToggled={initialValues.isHashSigningEnabledValue}\n              toggleId=\"isHashSigningEnabledValue\"\n              description={\n                <>\n                  {t(\n                    \"This can be used to sign arbitrary transaction hashes without having to decode them first. Ledger will not display the transaction details in the device display prior to signing so make sure you only interact with applications you know and trust.\",\n                  )}{\" \"}\n                  <a\n                    href=\"https://www.ledger.com/academy/enable-blind-signing-why-when-and-how-to-stay-safe/\"\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                  >\n                    {t(\"Learn More\")}\n                  </a>\n                </>\n              }\n            />\n            <AdvancedSettingFeature\n              title={t(\"Connect to domain without SSL certificate\")}\n              isLoading={isLoading}\n              isToggled={initialValues.isNonSSLEnabledValue}\n              toggleId=\"isNonSSLEnabledValue\"\n              description={t(\n                \"Allow Freighter to connect to domains that do not have an SSL certificate on Mainnet. SSL certificates provide an encrypted network connection and also provide proof of ownership of the domain. Use caution when connecting to domains without an SSL certificate.\",\n              )}\n            />\n          </Form>\n        </View.Content>\n      </Formik>\n    </>\n  ) : (\n    <>\n      <SubviewHeader title={t(\"Important\")} />\n      <View.Content hasNoTopPadding>\n        <div className=\"AdvancedSettings__column\">\n          <Notification\n            variant=\"warning\"\n            title={t(\n              \"Advanced settings are not recommended for new or unexperienced users. Enabling these may impact the security of your wallets and result in loss of funds. Only utilize these features if you can understand and manage the potential security risks.\",\n            )}\n          />\n          <div className=\"AdvancedSettings__understood-buttons\">\n            <Button\n              size=\"md\"\n              variant=\"error\"\n              isFullWidth\n              onClick={() => setIsUnderstood(true)}\n            >\n              {t(\"I understand, continue\")}\n            </Button>\n            <Button\n              size=\"md\"\n              variant=\"tertiary\"\n              isFullWidth\n              onClick={() => history.goBack()}\n            >\n              {t(\"Go back\")}\n            </Button>\n          </div>\n        </div>\n      </View.Content>\n    </>\n  );\n};\n","import React from \"react\";\nimport { Icon } from \"@stellar/design-system\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { SubviewHeader } from \"popup/components/SubviewHeader\";\nimport { View } from \"popup/basics/layout/View\";\n\nimport FreighterLogo from \"popup/assets/logo-freighter.svg\";\n\nimport \"./styles.scss\";\n\ninterface AboutLinkProps {\n  children?: React.ReactNode | string;\n  url: string;\n}\n\nconst AboutLink = ({ children, url }: AboutLinkProps) => (\n  <div className=\"About__link\">\n    <Icon.Link01 />\n    <a target=\"_blank\" rel=\"noreferrer\" href={`https://${url}`}>\n      {children || url}\n    </a>\n  </div>\n);\n\nexport const About = () => {\n  const { t } = useTranslation();\n  const currentYear = new Date().getFullYear();\n\n  return (\n    <React.Fragment>\n      <SubviewHeader title=\"About\" />\n      <View.Content hasNoTopPadding>\n        <div className=\"About\">\n          <div>\n            <img alt=\"Freighter logo\" src={FreighterLogo} />\n          </div>\n          <div className=\"About__body\">\n            <div className=\"About__info\">\n              {t(\n                \"Freighter is a non-custodial wallet extension that enables you to sign Stellar transactions via your browser. It’s a safer alternative to copying and pasting private keys for use with web apps.\",\n              )}\n            </div>\n            <div className=\"About__links-header\">{t(\"LINKS\")}</div>\n            <AboutLink url=\"freighter.app\" />\n            <AboutLink url=\"stellar.org\" />\n            <AboutLink url=\"stellar.org/privacy-policy\">\n              {t(\"Privacy Policy\")}\n            </AboutLink>\n            <AboutLink url=\"stellar.org/terms-of-service\">\n              {t(\"Terms of Service\")}\n            </AboutLink>\n          </div>\n        </div>\n      </View.Content>\n      <View.Footer>\n        <div className=\"About__copyright\">\n          {`© ${currentYear} Stellar Development Foundation`}\n        </div>\n      </View.Footer>\n    </React.Fragment>\n  );\n};\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport debounce from \"lodash/debounce\";\nimport { Asset, StrKey, MuxedAccount, Federation } from \"stellar-sdk\";\nimport { useFormik } from \"formik\";\nimport BigNumber from \"bignumber.js\";\nimport {\n  Button,\n  Input,\n  Loader,\n  Link,\n  Notification,\n  Icon,\n} from \"@stellar/design-system\";\nimport { useTranslation } from \"react-i18next\";\n\nimport {\n  isFederationAddress,\n  isMuxedAccount,\n  truncatedPublicKey,\n} from \"helpers/stellar\";\n\nimport { ActionStatus } from \"@shared/api/types\";\nimport { AppDispatch } from \"popup/App\";\nimport { SubviewHeader } from \"popup/components/SubviewHeader\";\nimport { IdenticonImg } from \"popup/components/identicons/IdenticonImg\";\nimport { FormRows } from \"popup/basics/Forms\";\nimport { emitMetric } from \"helpers/metrics\";\nimport { navigateTo } from \"popup/helpers/navigate\";\nimport { isContractId } from \"popup/helpers/soroban\";\nimport { METRIC_NAMES } from \"popup/constants/metricsNames\";\nimport { ROUTES } from \"popup/constants/routes\";\nimport { View } from \"popup/basics/layout/View\";\nimport { settingsNetworkDetailsSelector } from \"popup/ducks/settings\";\nimport {\n  saveDestination,\n  saveFederationAddress,\n  transactionDataSelector,\n  loadRecentAddresses,\n  transactionSubmissionSelector,\n  getDestinationBalances,\n} from \"popup/ducks/transactionSubmission\";\n\nimport \"../styles.scss\";\n\nconst baseReserve = new BigNumber(1);\n\nexport const shouldAccountDoesntExistWarning = (\n  isFunded: boolean,\n  assetID: string,\n  amount: string,\n) =>\n  !isFunded &&\n  (new BigNumber(amount).lt(baseReserve) ||\n    assetID !== Asset.native().toString());\n\nexport const AccountDoesntExistWarning = () => {\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"SendTo__info-block\">\n      <Notification\n        variant=\"primary\"\n        title={t(\"The destination account doesn’t exist\")}\n      >\n        <div>\n          {t(\"Send at least 1 XLM to create account.\")}{\" \"}\n          <Link\n            variant=\"secondary\"\n            href=\"https://developers.stellar.org/docs/tutorials/create-account/#create-account\"\n            rel=\"noreferrer\"\n            target=\"_blank\"\n          >\n            {t(\"Learn more about account creation\")}\n          </Link>\n        </div>\n      </Notification>\n    </div>\n  );\n};\n\nconst InvalidAddressWarning = () => {\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"SendTo__info-block\">\n      <Notification\n        variant=\"warning\"\n        icon={<Icon.InfoOctagon />}\n        title={t(\"INVALID STELLAR ADDRESS\")}\n      >\n        {t(\"Addresses are uppercase and begin with letters “G“, “M“, or “C“.\")}\n      </Notification>\n    </div>\n  );\n};\n\nexport const SendTo = ({ previous }: { previous: ROUTES }) => {\n  const { t } = useTranslation();\n  const dispatch: AppDispatch = useDispatch();\n  const { destination, federationAddress } = useSelector(\n    transactionDataSelector,\n  );\n  const networkDetails = useSelector(settingsNetworkDetailsSelector);\n  const { destinationBalances, destinationAccountBalanceStatus } = useSelector(\n    transactionSubmissionSelector,\n  );\n\n  const [recentAddresses, setRecentAddresses] = useState<string[]>([]);\n  const [validatedAddress, setValidatedAddress] = useState(\"\");\n  const [fedAddress, setFedAddress] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleContinue = (\n    validatedDestination: string,\n    validatedFedAdress?: string,\n  ) => {\n    dispatch(saveDestination(validatedDestination));\n    dispatch(saveFederationAddress(validatedFedAdress || \"\"));\n    navigateTo(ROUTES.sendPaymentAmount);\n  };\n\n  const formik = useFormik({\n    initialValues: { destination: federationAddress || destination },\n    onSubmit: () => {\n      handleContinue(validatedAddress, fedAddress);\n    },\n    validateOnChange: false,\n    validate: (values) => {\n      if (\n        isValidPublicKey(values.destination) ||\n        isContractId(values.destination)\n      ) {\n        return {};\n      }\n      return { destination: t(\"invalid destination address\") };\n    },\n  });\n\n  const isValidPublicKey = (publicKey: string) => {\n    if (StrKey.isValidMed25519PublicKey(publicKey)) {\n      return true;\n    }\n    if (isFederationAddress(publicKey)) {\n      return true;\n    }\n    if (StrKey.isValidEd25519PublicKey(publicKey)) {\n      return true;\n    }\n    return false;\n  };\n\n  // calls form validation and then saves destination\n  /* eslint-disable react-hooks/exhaustive-deps */\n  const db = useCallback(\n    debounce(async (inputDest: string) => {\n      const errors = await formik.validateForm();\n      if (Object.keys(errors).length !== 0) {\n        setIsLoading(false);\n        return;\n      }\n      // muxed account\n      if (isMuxedAccount(inputDest)) {\n        setValidatedAddress(inputDest);\n      } else if (isFederationAddress(inputDest)) {\n        // federation address\n        try {\n          const fedResp = await Federation.Server.resolve(inputDest);\n          setValidatedAddress(fedResp.account_id);\n          setFedAddress(inputDest);\n        } catch (e) {\n          formik.setErrors({ destination: t(\"invalid federation address\") });\n        }\n      } else {\n        // else, a regular account\n        setValidatedAddress(inputDest);\n      }\n      setIsLoading(false);\n    }, 2000),\n    [],\n  );\n\n  // load recent addresses\n  useEffect(() => {\n    (async () => {\n      const res = await dispatch(loadRecentAddresses());\n      if (loadRecentAddresses.fulfilled.match(res)) {\n        setRecentAddresses(res.payload.recentAddresses);\n      }\n    })();\n  }, [dispatch]);\n\n  // on input reset destination and trigger debounce\n  useEffect(() => {\n    if (formik.values.destination !== \"\") {\n      setIsLoading(true);\n    }\n    // reset\n    setValidatedAddress(\"\");\n    setFedAddress(\"\");\n    db(formik.values.destination);\n  }, [db, formik.values.destination]);\n\n  // on valid input get destination balances\n  useEffect(() => {\n    if (!validatedAddress) {\n      return;\n    }\n\n    // TODO - remove once wallet-sdk can handle muxed\n    let address = validatedAddress;\n\n    if (isContractId(validatedAddress)) {\n      return;\n    }\n\n    if (isMuxedAccount(validatedAddress)) {\n      const mAccount = MuxedAccount.fromAddress(validatedAddress, \"0\");\n      address = mAccount.baseAccount().accountId();\n    }\n    dispatch(\n      getDestinationBalances({\n        publicKey: address,\n        networkDetails,\n      }),\n    );\n  }, [dispatch, validatedAddress, networkDetails]);\n\n  return (\n    <React.Fragment>\n      <SubviewHeader\n        title=\"Send To\"\n        customBackAction={() => navigateTo(previous)}\n      />\n      <View.Content hasNoTopPadding>\n        <FormRows>\n          <Input\n            fieldSize=\"md\"\n            autoComplete=\"off\"\n            id=\"destination-input\"\n            name=\"destination\"\n            placeholder={t(\"Recipient Stellar address\")}\n            onChange={formik.handleChange}\n            value={formik.values.destination}\n            data-testid=\"send-to-input\"\n          />\n        </FormRows>\n        <div className=\"SendTo__address-wrapper\" data-testid=\"send-to-view\">\n          {isLoading ? (\n            <div className=\"SendTo__loader\">\n              <Loader />\n            </div>\n          ) : (\n            <div>\n              {formik.values.destination === \"\" ? (\n                <>\n                  {recentAddresses.length > 0 && (\n                    <div className=\"SendTo__subheading\">{t(\"RECENT\")}</div>\n                  )}\n                  <div className=\"SendTo__simplebar\">\n                    <ul className=\"SendTo__recent-accts-ul\">\n                      {recentAddresses.map((address) => (\n                        <li key={address}>\n                          <button\n                            onClick={async () => {\n                              emitMetric(METRIC_NAMES.sendPaymentRecentAddress);\n                              setIsLoading(true);\n                              // recentAddresses already validated so safe to dispatch\n                              if (isFederationAddress(address)) {\n                                const fedResp = await Federation.Server.resolve(\n                                  address,\n                                );\n                                const publicKey = fedResp.account_id;\n                                setValidatedAddress(publicKey);\n                                handleContinue(publicKey, address);\n                              } else {\n                                setValidatedAddress(address);\n                                handleContinue(address);\n                              }\n                            }}\n                            className=\"SendTo__subheading-identicon\"\n                          >\n                            <IdenticonImg publicKey={address} />\n                            <span>\n                              {isFederationAddress(address)\n                                ? address\n                                : truncatedPublicKey(address)}\n                            </span>\n                          </button>\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                </>\n              ) : (\n                <div>\n                  {formik.isValid ? (\n                    <>\n                      {destinationAccountBalanceStatus ===\n                      ActionStatus.SUCCESS ? (\n                        <>\n                          {!destinationBalances.isFunded && (\n                            <AccountDoesntExistWarning />\n                          )}\n                          {isFederationAddress(formik.values.destination) && (\n                            <>\n                              <div className=\"SendTo__subheading\">\n                                {t(\"FEDERATION ADDRESS\")}\n                              </div>\n                              <div className=\"SendTo__subsection-copy\">\n                                {formik.values.destination}\n                              </div>\n                            </>\n                          )}\n                          <div className=\"SendTo__subheading\">Address</div>\n                          <div className=\"SendTo__subheading-identicon\">\n                            <IdenticonImg publicKey={validatedAddress} />\n                            <span>{truncatedPublicKey(validatedAddress)}</span>\n                          </div>\n                        </>\n                      ) : null}\n                    </>\n                  ) : (\n                    <InvalidAddressWarning />\n                  )}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      </View.Content>\n      <View.Footer>\n        {!isLoading && formik.values.destination && formik.isValid ? (\n          <Button\n            size=\"md\"\n            isFullWidth\n            variant=\"secondary\"\n            onClick={() => formik.submitForm()}\n            data-testid=\"send-to-btn-continue\"\n          >\n            {t(\"Continue\")}\n          </Button>\n        ) : null}\n      </View.Footer>\n    </React.Fragment>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Icon } from \"@stellar/design-system\";\n\nimport { ROUTES } from \"popup/constants/routes\";\nimport { navigateTo } from \"popup/helpers/navigate\";\nimport { isMainnet, isTestnet } from \"helpers/stellar\";\nimport { AssetIcon } from \"popup/components/account/AccountAssets\";\nimport { UnverifiedTokenNotification } from \"popup/components/WarningMessages\";\nimport {\n  transactionSubmissionSelector,\n  saveAssetSelectSource,\n  saveAssetSelectType,\n  AssetSelectType,\n  saveAmount,\n} from \"popup/ducks/transactionSubmission\";\nimport { isContractId } from \"popup/helpers/soroban\";\nimport { useIsSwap } from \"popup/helpers/useIsSwap\";\nimport { settingsSelector } from \"popup/ducks/settings\";\nimport { getVerifiedTokens } from \"popup/helpers/searchAsset\";\n\nimport \"./styles.scss\";\n\nexport const AssetSelect = ({\n  assetCode,\n  issuerKey,\n  isSuspicious,\n}: {\n  assetCode: string;\n  issuerKey: string;\n  isSuspicious: boolean;\n}) => {\n  const dispatch = useDispatch();\n  const { assetIcons } = useSelector(transactionSubmissionSelector);\n  const { networkDetails, assetsLists } = useSelector(settingsSelector);\n  const [isUnverifiedToken, setIsUnverifiedToken] = useState(false);\n\n  useEffect(() => {\n    if (!isContractId(issuerKey)) {\n      return;\n    }\n\n    if (!isMainnet(networkDetails) && !isTestnet(networkDetails)) {\n      return;\n    }\n\n    const fetchVerifiedTokens = async () => {\n      const verifiedTokens = await getVerifiedTokens({\n        networkDetails,\n        contractId: issuerKey,\n        assetsLists,\n      });\n\n      if (!verifiedTokens.length) {\n        setIsUnverifiedToken(true);\n      }\n    };\n\n    fetchVerifiedTokens();\n  }, [issuerKey, networkDetails, assetsLists]);\n\n  const handleSelectAsset = () => {\n    dispatch(saveAssetSelectType(AssetSelectType.REGULAR));\n    dispatch(saveAssetSelectSource(true));\n    navigateTo(ROUTES.manageAssets);\n  };\n\n  return (\n    <>\n      {isUnverifiedToken ? (\n        <div className=\"AssetSelect__unverified\">\n          <UnverifiedTokenNotification />\n        </div>\n      ) : null}\n      <div\n        className=\"AssetSelect__wrapper\"\n        onClick={handleSelectAsset}\n        data-testid=\"send-amount-asset-select\"\n      >\n        <div className=\"AssetSelect__content\">\n          <div className=\"AssetSelect__content__left\">\n            <AssetIcon\n              assetIcons={assetIcons}\n              code={assetCode}\n              issuerKey={issuerKey}\n              isSuspicious={isSuspicious}\n            />\n            <span className=\"AssetSelect__medium-copy\">{assetCode}</span>\n          </div>\n          <div className=\"AssetSelect__content__right\">\n            <Icon.ChevronDown />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport const PathPayAssetSelect = ({\n  source,\n  assetCode,\n  issuerKey,\n  balance,\n  icon,\n  isSuspicious,\n}: {\n  source: boolean;\n  assetCode: string;\n  issuerKey: string;\n  balance: string;\n  icon: string;\n  isSuspicious: boolean;\n}) => {\n  const dispatch = useDispatch();\n  const { assetIcons } = useSelector(transactionSubmissionSelector);\n  const isSwap = useIsSwap();\n\n  const handleSelectAsset = () => {\n    dispatch(\n      saveAssetSelectType(\n        isSwap ? AssetSelectType.SWAP : AssetSelectType.PATH_PAY,\n      ),\n    );\n    dispatch(saveAssetSelectSource(source));\n    if (source) {\n      dispatch(saveAmount(\"0\"));\n    }\n    navigateTo(ROUTES.manageAssets, isSwap ? \"?swap=true\" : \"\");\n  };\n\n  const truncateLongAssetCode = (code: string) => {\n    if (code.length >= 5) {\n      return `${code.slice(0, 5)}...`;\n    }\n    return code;\n  };\n\n  return (\n    <div\n      onClick={handleSelectAsset}\n      className=\"AssetSelect__wrapper AssetSelect__wrapper--path-pay\"\n      data-testid=\"AssetSelect\"\n    >\n      <div className=\"AssetSelect__content\">\n        <div className=\"AssetSelect__content__left\">\n          <span\n            className=\"AssetSelect__light-copy AssetSelect__light-copy__label\"\n            data-testid=\"AssetSelectSourceLabel\"\n          >\n            {source ? \"From\" : \"To\"}\n          </span>\n          <AssetIcon\n            assetIcons={assetIcons}\n            code={assetCode}\n            issuerKey={issuerKey}\n            icon={icon}\n            isSuspicious={isSuspicious}\n          />\n          <span\n            className=\"AssetSelect__medium-copy\"\n            data-testid=\"AssetSelectSourceCode\"\n          >\n            {truncateLongAssetCode(assetCode)}\n          </span>{\" \"}\n          <Icon.ChevronDown />\n        </div>\n        <div className=\"AssetSelect__content__right\">\n          <span\n            className=\"AssetSelect__light-copy\"\n            data-testid=\"AssetSelectSourceAmount\"\n          >\n            {balance && balance !== \"0\" ? balance : \"\"}{\" \"}\n            {truncateLongAssetCode(assetCode)}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n","export const TX_SEND_MAX = \"922337203685.4775807\" as const;\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport debounce from \"lodash/debounce\";\nimport { BigNumber } from \"bignumber.js\";\nimport { useFormik } from \"formik\";\nimport { Button, Icon, Loader, Notification } from \"@stellar/design-system\";\nimport { Asset } from \"stellar-sdk\";\nimport { useTranslation } from \"react-i18next\";\n\nimport {\n  AssetSelect,\n  PathPayAssetSelect,\n} from \"popup/components/sendPayment/SendAmount/AssetSelect\";\nimport { LoadingBackground } from \"popup/basics/LoadingBackground\";\nimport { View } from \"popup/basics/layout/View\";\nimport { ROUTES } from \"popup/constants/routes\";\nimport { METRIC_NAMES } from \"popup/constants/metricsNames\";\nimport { AppDispatch } from \"popup/App\";\nimport { getAssetFromCanonical } from \"helpers/stellar\";\nimport { navigateTo } from \"popup/helpers/navigate\";\nimport { useNetworkFees } from \"popup/helpers/useNetworkFees\";\nimport { useIsSwap, useIsSoroswapEnabled } from \"popup/helpers/useIsSwap\";\nimport { LP_IDENTIFIER } from \"popup/helpers/account\";\nimport { isAssetSuspicious } from \"popup/helpers/blockaid\";\nimport { emitMetric } from \"helpers/metrics\";\nimport { useRunAfterUpdate } from \"popup/helpers/useRunAfterUpdate\";\nimport { getAssetDecimals, getTokenBalance } from \"popup/helpers/soroban\";\nimport { getNativeContractDetails } from \"popup/helpers/searchAsset\";\nimport { SubviewHeader } from \"popup/components/SubviewHeader\";\nimport { settingsNetworkDetailsSelector } from \"popup/ducks/settings\";\nimport { publicKeySelector } from \"popup/ducks/accountServices\";\nimport {\n  cleanAmount,\n  formatAmount,\n  formatAmountPreserveCursor,\n} from \"popup/helpers/formatters\";\nimport {\n  transactionSubmissionSelector,\n  saveAmount,\n  saveAsset,\n  saveDestinationAsset,\n  getBestPath,\n  resetDestinationAmount,\n  getBestSoroswapPath,\n  getSoroswapTokens,\n} from \"popup/ducks/transactionSubmission\";\nimport {\n  AccountDoesntExistWarning,\n  shouldAccountDoesntExistWarning,\n} from \"popup/components/sendPayment/SendTo\";\nimport { ScamAssetWarning } from \"popup/components/WarningMessages\";\nimport { TX_SEND_MAX } from \"popup/constants/transaction\";\nimport { BASE_RESERVE } from \"@shared/constants/stellar\";\nimport { defaultBlockaidScanAssetResult } from \"@shared/helpers/stellar\";\n\nimport { BalanceMap, SorobanBalance } from \"@shared/api/types\";\nimport \"../styles.scss\";\n\nenum AMOUNT_ERROR {\n  TOO_HIGH = \"amount too high\",\n  DEC_MAX = \"too many decimal digits\",\n  SEND_MAX = \"amount higher than send max\",\n}\n\nconst ConversionRate = ({\n  source,\n  sourceAmount,\n  dest,\n  destAmount,\n  loading,\n}: {\n  source: string;\n  sourceAmount: string;\n  dest: string;\n  destAmount: string;\n  loading: boolean;\n}) => {\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"SendAmount__row__rate\" data-testid=\"SendAmountRate\">\n      {loading ? (\n        <div data-testid=\"SendAmountRateLoader\">\n          <Loader />\n        </div>\n      ) : (\n        <>\n          {destAmount ? (\n            <span data-testid=\"SendAmountRateAmount\">\n              1 {source} ≈{\" \"}\n              {new BigNumber(destAmount)\n                .div(new BigNumber(sourceAmount))\n                .toFixed(7)}{\" \"}\n              {dest}\n            </span>\n          ) : (\n            <span>{t(\"no path found\")}</span>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\n// default so can find a path even if user has not given input\nconst defaultSourceAmount = \"1\";\n\nexport const SendAmount = ({\n  previous,\n  next,\n}: {\n  previous: ROUTES;\n  next: ROUTES;\n}) => {\n  const { t } = useTranslation();\n  const dispatch: AppDispatch = useDispatch();\n  const networkDetails = useSelector(settingsNetworkDetailsSelector);\n  const runAfterUpdate = useRunAfterUpdate();\n\n  const publicKey = useSelector(publicKeySelector);\n  const {\n    accountBalances,\n    destinationBalances,\n    transactionData,\n    assetDomains,\n    assetIcons,\n    soroswapTokens,\n  } = useSelector(transactionSubmissionSelector);\n\n  const {\n    amount,\n    asset,\n    destinationAmount,\n    destinationAsset,\n    isToken,\n    destinationIcon,\n    isSoroswap,\n  } = transactionData;\n\n  const isSwap = useIsSwap();\n  const { recommendedFee } = useNetworkFees();\n  const [loadingRate, setLoadingRate] = useState(false);\n  const [showBlockedDomainWarning, setShowBlockedDomainWarning] =\n    useState(false);\n  const [suspiciousAssetData, setSuspiciousAssetData] = useState({\n    domain: \"\",\n    code: \"\",\n    issuer: \"\",\n    image: \"\",\n    blockaidData: defaultBlockaidScanAssetResult,\n  });\n\n  /* eslint-disable react-hooks/exhaustive-deps */\n  const calculateAvailBalance = useCallback(\n    (selectedAsset: string) => {\n      let _availBalance = new BigNumber(\"0\");\n      if (isToken) {\n        // TODO: balances is incorrectly typed and does not include SorobanBalance\n        const tokenBalance = accountBalances?.balances?.[\n          selectedAsset\n        ] as any as SorobanBalance;\n        return getTokenBalance(tokenBalance);\n      }\n      if (accountBalances.balances) {\n        // take base reserve into account for XLM payments\n        const minBalance = new BigNumber(\n          (2 + accountBalances.subentryCount) * BASE_RESERVE,\n        );\n\n        const balance =\n          accountBalances.balances[selectedAsset]?.total || new BigNumber(\"0\");\n        if (selectedAsset === \"native\") {\n          // needed for different wallet-sdk bignumber.js version\n          const currentBal = new BigNumber(balance.toFixed());\n          _availBalance = currentBal\n            .minus(minBalance)\n            .minus(new BigNumber(Number(recommendedFee)));\n\n          if (_availBalance.lt(minBalance)) {\n            return \"0\";\n          }\n        } else {\n          // needed for different wallet-sdk bignumber.js version\n          _availBalance = new BigNumber(balance);\n        }\n      }\n\n      return _availBalance.toFixed().toString();\n    },\n    [\n      accountBalances.balances,\n      accountBalances.subentryCount,\n      recommendedFee,\n      isToken,\n    ],\n  );\n\n  const [availBalance, setAvailBalance] = useState(\n    calculateAvailBalance(asset),\n  );\n\n  const handleContinue = (values: {\n    amount: string;\n    asset: string;\n    destinationAsset: string;\n  }) => {\n    dispatch(saveAmount(cleanAmount(values.amount)));\n    dispatch(saveAsset(values.asset));\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    let isDestAssetScam = false;\n\n    if (values.destinationAsset) {\n      dispatch(saveDestinationAsset(values.destinationAsset));\n      isDestAssetScam = isAssetSuspicious(\n        accountBalances.balances?.[destinationAsset]?.blockaidData,\n      );\n    }\n    // check for scam asset\n    const isSourceAssetScam = isAssetSuspicious(\n      accountBalances.balances?.[asset]?.blockaidData,\n    );\n    if (isSourceAssetScam) {\n      setShowBlockedDomainWarning(true);\n      setSuspiciousAssetData({\n        code: getAssetFromCanonical(values.asset).code,\n        issuer: getAssetFromCanonical(values.asset).issuer,\n        domain: assetDomains[values.asset],\n        image: assetIcons[values.asset],\n        blockaidData:\n          accountBalances.balances?.[asset]?.blockaidData ||\n          defaultBlockaidScanAssetResult,\n      });\n    } else if (isDestAssetScam) {\n      setShowBlockedDomainWarning(true);\n      setSuspiciousAssetData({\n        code: getAssetFromCanonical(values.destinationAsset).code,\n        issuer: getAssetFromCanonical(values.destinationAsset).issuer,\n        domain: assetDomains[values.destinationAsset],\n        image: assetIcons[values.destinationAsset],\n        blockaidData:\n          accountBalances.balances?.[destinationAsset]?.blockaidData ||\n          defaultBlockaidScanAssetResult,\n      });\n    } else {\n      navigateTo(next);\n    }\n  };\n\n  const validate = (values: { amount: string }) => {\n    const val = cleanAmount(values.amount);\n    if (new BigNumber(val).gt(new BigNumber(availBalance))) {\n      return { amount: AMOUNT_ERROR.TOO_HIGH };\n    }\n    if (val.indexOf(\".\") !== -1 && val.split(\".\")[1].length > 7) {\n      return { amount: AMOUNT_ERROR.DEC_MAX };\n    }\n    if (new BigNumber(val).gt(new BigNumber(TX_SEND_MAX))) {\n      return { amount: AMOUNT_ERROR.SEND_MAX };\n    }\n    return {};\n  };\n\n  const formik = useFormik({\n    initialValues: { amount, asset, destinationAsset },\n    onSubmit: handleContinue,\n    validate,\n    enableReinitialize: true,\n  });\n\n  const showSourceAndDestAsset = !!formik.values.destinationAsset;\n  const parsedSourceAsset = getAssetFromCanonical(formik.values.asset);\n  const parsedDestAsset = getAssetFromCanonical(\n    formik.values.destinationAsset || \"native\",\n  );\n\n  const db = useCallback(\n    debounce(async (formikAm, sourceAsset, destAsset) => {\n      if (isSoroswap) {\n        const getContract = (formAsset: string) =>\n          formAsset === \"native\"\n            ? getNativeContractDetails(networkDetails).contract\n            : formAsset.split(\":\")[1];\n\n        await dispatch(\n          getBestSoroswapPath({\n            amount: formikAm,\n            sourceContract: getContract(formik.values.asset),\n            destContract: getContract(formik.values.destinationAsset),\n            networkDetails,\n            publicKey,\n          }),\n        );\n      } else {\n        await dispatch(\n          getBestPath({\n            amount: formikAm,\n            sourceAsset,\n            destAsset,\n            networkDetails,\n          }),\n        );\n      }\n\n      setLoadingRate(false);\n    }, 2000),\n    [],\n  );\n\n  useEffect(() => {\n    setAvailBalance(calculateAvailBalance(formik.values.asset));\n  }, [calculateAvailBalance, formik.values.asset]);\n\n  // on asset select get conversion rate\n  useEffect(() => {\n    if (!formik.values.destinationAsset || Number(formik.values.amount) === 0) {\n      return;\n    }\n    setLoadingRate(true);\n    // clear dest amount before re-calculating for UI\n    dispatch(resetDestinationAmount());\n    db(\n      formik.values.amount || defaultSourceAmount,\n      formik.values.asset,\n      formik.values.destinationAsset,\n    );\n  }, [\n    db,\n    networkDetails,\n    formik.values.asset,\n    formik.values.destinationAsset,\n    formik.values.amount,\n    dispatch,\n  ]);\n\n  // for swaps we're loading and choosing the default destinationAsset here\n  // also, need to check if both source and destination are native\n  useEffect(() => {\n    if (\n      isSwap &&\n      (!destinationAsset ||\n        (destinationAsset === \"native\" && asset === \"native\"))\n    ) {\n      let defaultDestAsset;\n\n      // if pre-chosen source asset (eg. from AssetDetails) not XLM, default dest asset to XLM\n      if (formik.values.asset !== Asset.native().toString()) {\n        defaultDestAsset = Asset.native().toString();\n      } else {\n        // otherwise default to first non-native/classic side asset if exists\n        const nonXlmAssets = Object.keys(accountBalances.balances || {}).filter(\n          (b) =>\n            b !== Asset.native().toString() &&\n            b.indexOf(LP_IDENTIFIER) === -1 &&\n            !(\n              \"decimals\" in\n              (accountBalances.balances || ({} as NonNullable<BalanceMap>))[b]\n            ),\n        );\n        defaultDestAsset = nonXlmAssets[0]\n          ? nonXlmAssets[0]\n          : Asset.native().toString();\n      }\n\n      dispatch(saveDestinationAsset(defaultDestAsset));\n    }\n  }, [\n    isSwap,\n    dispatch,\n    destinationAsset,\n    accountBalances,\n    formik.values.asset,\n    asset,\n  ]);\n\n  useEffect(() => {\n    if (!soroswapTokens.length) {\n      dispatch(getSoroswapTokens());\n    }\n  }, [isSwap, useIsSoroswapEnabled]);\n\n  const getAmountFontSize = () => {\n    const length = formik.values.amount.length;\n    if (length <= 9) {\n      return \"\";\n    }\n    if (length <= 15) {\n      return \"med\";\n    }\n    return \"small\";\n  };\n\n  const DecideWarning = () => {\n    // unfunded destination\n    if (\n      !isSwap &&\n      shouldAccountDoesntExistWarning(\n        destinationBalances.isFunded || false,\n        asset,\n        formik.values.amount || \"0\",\n      )\n    ) {\n      return <AccountDoesntExistWarning />;\n    }\n    if (formik.errors.amount === AMOUNT_ERROR.TOO_HIGH) {\n      return (\n        <Notification\n          variant=\"error\"\n          title={t(\"Entered amount is higher than your balance\")}\n        />\n      );\n    }\n    if (formik.errors.amount === AMOUNT_ERROR.DEC_MAX) {\n      return (\n        <Notification\n          variant=\"error\"\n          title={`7 ${t(\"digits after the decimal allowed\")}`}\n        />\n      );\n    }\n    if (formik.errors.amount === AMOUNT_ERROR.SEND_MAX) {\n      return (\n        <Notification\n          variant=\"error\"\n          title={`${t(\n            \"Entered amount is higher than the maximum send amount\",\n          )} (\n          ${formatAmountPreserveCursor(\n            TX_SEND_MAX,\n            formik.values.amount,\n            getAssetDecimals(asset, accountBalances, isToken),\n          )}\n          )`}\n        />\n      );\n    }\n    return null;\n  };\n\n  return (\n    <>\n      {showBlockedDomainWarning && (\n        <ScamAssetWarning\n          isSendWarning\n          pillType=\"Transaction\"\n          domain={suspiciousAssetData.domain}\n          code={suspiciousAssetData.code}\n          issuer={suspiciousAssetData.issuer}\n          image={suspiciousAssetData.image}\n          onClose={() => setShowBlockedDomainWarning(false)}\n          onContinue={() => navigateTo(next)}\n          blockaidData={suspiciousAssetData.blockaidData}\n        />\n      )}\n      <React.Fragment>\n        <SubviewHeader\n          title={\n            <span>\n              {isSwap ? \"Swap\" : \"Send\"} {parsedSourceAsset.code}{\" \"}\n              {isSoroswap ? (\n                <span>\n                  on{\" \"}\n                  <a\n                    href=\"https://soroswap.finance/\"\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                  >\n                    Soroswap\n                  </a>\n                </span>\n              ) : null}\n            </span>\n          }\n          subtitle={\n            <div className=\"SendAmount__subtitle\">\n              <span>{formatAmount(availBalance)}</span>{\" \"}\n              <span>{parsedSourceAsset.code}</span> {t(\"available\")}\n            </div>\n          }\n          hasBackButton={!isSwap}\n          customBackAction={() => navigateTo(previous)}\n          rightButton={\n            isSwap ? null : (\n              <button\n                onClick={() => navigateTo(ROUTES.sendPaymentType)}\n                className=\"SendAmount__icon-slider\"\n              >\n                <Icon.Expand01 />\n              </button>\n            )\n          }\n        />\n        <View.Content\n          contentFooter={\n            <div className=\"SendAmount__btn-continue\">\n              <Button\n                size=\"md\"\n                disabled={\n                  loadingRate ||\n                  formik.values.amount === \"0\" ||\n                  !formik.isValid ||\n                  // path payment, but path not found\n                  (showSourceAndDestAsset && !destinationAmount)\n                }\n                data-testid=\"send-amount-btn-continue\"\n                isFullWidth\n                variant=\"secondary\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  formik.submitForm();\n                }}\n              >\n                {t(\"Continue\")}\n              </Button>\n            </div>\n          }\n        >\n          <div className=\"SendAmount\">\n            <div className=\"SendAmount__content\">\n              <div className=\"SendAmount__btn-set-max\">\n                <Button\n                  size=\"md\"\n                  variant=\"tertiary\"\n                  onClick={() => {\n                    emitMetric(METRIC_NAMES.sendPaymentSetMax);\n                    formik.setFieldValue(\n                      \"amount\",\n                      calculateAvailBalance(formik.values.asset),\n                    );\n                  }}\n                  data-testid=\"SendAmountSetMax\"\n                >\n                  {t(\"SET MAX\")}\n                </Button>\n              </div>\n\n              <form>\n                <div className=\"SendAmount__simplebar__content\">\n                  <input\n                    className={`SendAmount__input-amount ${\n                      isSwap ? \"SendAmount__input-amount__full-height\" : \"\"\n                    } SendAmount__${getAmountFontSize()}`}\n                    data-testid=\"send-amount-amount-input\"\n                    name=\"amount\"\n                    type=\"text\"\n                    placeholder=\"0\"\n                    value={formik.values.amount}\n                    onChange={(e) => {\n                      const input = e.target;\n                      const { amount: newAmount, newCursor } =\n                        formatAmountPreserveCursor(\n                          e.target.value,\n                          formik.values.amount,\n                          getAssetDecimals(asset, accountBalances, isToken),\n                          e.target.selectionStart || 1,\n                        );\n                      formik.setFieldValue(\"amount\", newAmount);\n                      dispatch(saveAmount(newAmount));\n                      runAfterUpdate(() => {\n                        input.selectionStart = newCursor;\n                        input.selectionEnd = newCursor;\n                      });\n                    }}\n                    autoFocus\n                    autoComplete=\"off\"\n                  />\n                  <div className=\"SendAmount__input-amount__asset-copy\">\n                    {parsedSourceAsset.code}\n                  </div>\n                  {showSourceAndDestAsset && formik.values.amount !== \"0\" && (\n                    <ConversionRate\n                      loading={loadingRate}\n                      source={parsedSourceAsset.code}\n                      sourceAmount={\n                        cleanAmount(formik.values.amount) || defaultSourceAmount\n                      }\n                      dest={parsedDestAsset.code}\n                      destAmount={destinationAmount}\n                    />\n                  )}\n                  <div\n                    className={`SendAmount__amount-warning${\n                      destinationAsset ? \"__path-payment\" : \"\"\n                    }`}\n                  >\n                    <DecideWarning />\n                  </div>\n                  <div className=\"SendAmount__asset-select-container\">\n                    {!showSourceAndDestAsset && (\n                      <AssetSelect\n                        assetCode={parsedSourceAsset.code}\n                        issuerKey={parsedSourceAsset.issuer}\n                        isSuspicious={isAssetSuspicious(\n                          accountBalances.balances?.[asset]?.blockaidData,\n                        )}\n                      />\n                    )}\n                    {showSourceAndDestAsset && (\n                      <>\n                        <PathPayAssetSelect\n                          source={true}\n                          assetCode={parsedSourceAsset.code}\n                          issuerKey={parsedSourceAsset.issuer}\n                          balance={formik.values.amount}\n                          icon=\"\"\n                          isSuspicious={isAssetSuspicious(\n                            accountBalances.balances?.[asset]?.blockaidData,\n                          )}\n                        />\n                        <PathPayAssetSelect\n                          source={false}\n                          assetCode={parsedDestAsset.code}\n                          issuerKey={parsedDestAsset.issuer}\n                          balance={\n                            destinationAmount\n                              ? new BigNumber(destinationAmount).toFixed()\n                              : \"0\"\n                          }\n                          icon={destinationIcon}\n                          isSuspicious={isAssetSuspicious(\n                            accountBalances.balances?.[\n                              formik.values.destinationAsset\n                            ]?.blockaidData,\n                          )}\n                        />\n                      </>\n                    )}\n                  </div>\n                </div>\n              </form>\n            </div>\n          </div>\n        </View.Content>\n      </React.Fragment>\n      <LoadingBackground\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        onClick={() => {}}\n        isActive={showBlockedDomainWarning}\n      />\n    </>\n  );\n};\n","import React from \"react\";\n\n// https://egghead.io/lessons/react-preserve-cursor-position-when-filtering-out-characters-from-a-react-input\n// Schedule an arbitrary fn to run after update, the closure over afterPaintRef shared between useLayoutEffect\n// and runAfterUpdate keeps them synced\nexport function useRunAfterUpdate() {\n  const afterPaintRef = React.useRef<any>(null);\n  React.useLayoutEffect(() => {\n    if (afterPaintRef.current) {\n      afterPaintRef.current();\n      afterPaintRef.current = null;\n    }\n  });\n  const runAfterUpdate = (fn: () => unknown) => {\n    afterPaintRef.current = fn;\n    return null;\n  };\n  return runAfterUpdate;\n}\n","import React from \"react\";\nimport { FloaterPlacement, Icon, Tooltip } from \"@stellar/design-system\";\nimport \"./styles.scss\";\n\ninterface InfoTooltipProps {\n  children: React.ReactNode;\n  infoText: React.ReactNode;\n  placement?: FloaterPlacement;\n}\n\nexport const InfoTooltip = ({\n  children,\n  infoText,\n  placement = \"right\",\n}: InfoTooltipProps) => (\n  <div className=\"InfoTooltip\">\n    {children}\n    <Tooltip\n      triggerEl={\n        <div className=\"InfoTooltip__button\">\n          <Icon.InfoCircle />\n        </div>\n      }\n      placement={placement}\n    >\n      {infoText}\n    </Tooltip>\n  </div>\n);\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Field, Form, Formik } from \"formik\";\nimport { Button, Icon, Link } from \"@stellar/design-system\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { navigateTo } from \"popup/helpers/navigate\";\nimport { emitMetric } from \"helpers/metrics\";\nimport { METRIC_NAMES } from \"popup/constants/metricsNames\";\nimport { ROUTES } from \"popup/constants/routes\";\nimport { View } from \"popup/basics/layout/View\";\nimport { SubviewHeader } from \"popup/components/SubviewHeader\";\nimport {\n  saveDestinationAsset,\n  transactionDataSelector,\n} from \"popup/ducks/transactionSubmission\";\n\nimport \"./styles.scss\";\nimport { InfoTooltip } from \"popup/basics/InfoTooltip\";\n\nenum PAYMENT_TYPES {\n  REGULAR = \"REGULAR\",\n  PATH_PAYMENT = \"PATH_PAYMENT\",\n}\n\ninterface RadioCheckProps {\n  name: string;\n  title: string;\n  subtext: string;\n  tooltipDetails: React.ReactNode;\n  value: string;\n  selected: boolean;\n}\n\nconst RadioCheck = ({\n  name,\n  title,\n  subtext,\n  tooltipDetails,\n  value,\n  selected,\n}: RadioCheckProps) => (\n  <div className=\"SendType__form-row\">\n    <label className=\"SendType--label SendType--radio-label\">\n      <div className=\"SendType__content-wrapper\">\n        <div className=\"SendType__content-wrapper__title\">\n          <InfoTooltip infoText={tooltipDetails} placement=\"bottom-start\">\n            {title}\n          </InfoTooltip>\n          {subtext && (\n            <span className=\"SendType__content-wrapper__subtext\">\n              {subtext}\n            </span>\n          )}\n        </div>\n        <Field\n          className=\"SendType--radio-field\"\n          name={name}\n          type=\"radio\"\n          value={value}\n        />\n      </div>\n    </label>\n    <div\n      className={`SendType--radio-check ${\n        selected ? \"SendType--radio-check--active\" : \"\"\n      }`}\n    >\n      <Icon.Check />\n    </div>\n  </div>\n);\n\nexport const SendType = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const { destinationAsset } = useSelector(transactionDataSelector);\n\n  const submitForm = (values: { paymentType: string }) => {\n    // path payment flag is a non empty string in redux destinationAsset\n    dispatch(\n      saveDestinationAsset(\n        values.paymentType === PAYMENT_TYPES.PATH_PAYMENT ? \"native\" : \"\",\n      ),\n    );\n    emitMetric(\n      values.paymentType === PAYMENT_TYPES.PATH_PAYMENT\n        ? METRIC_NAMES.sendPaymentTypePathPayment\n        : METRIC_NAMES.sendPaymentTypePayment,\n    );\n    navigateTo(ROUTES.sendPaymentAmount);\n  };\n\n  return (\n    <React.Fragment>\n      <SubviewHeader\n        title={t(\"Send Type\")}\n        customBackAction={() => navigateTo(ROUTES.sendPaymentAmount)}\n        customBackIcon={<Icon.XClose />}\n      />\n      <Formik\n        initialValues={{\n          paymentType:\n            destinationAsset === \"\"\n              ? PAYMENT_TYPES.REGULAR\n              : PAYMENT_TYPES.PATH_PAYMENT,\n        }}\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        onSubmit={() => {}}\n      >\n        {({ values }) => (\n          <>\n            <View.Content>\n              <Form>\n                <RadioCheck\n                  name=\"paymentType\"\n                  title={t(\"Same source and destination asset\")}\n                  value={PAYMENT_TYPES.REGULAR}\n                  subtext=\"Most common\"\n                  tooltipDetails={\n                    <span>\n                      {t(\n                        \"The destination account receives the same asset and amount sent\",\n                      )}\n                    </span>\n                  }\n                  selected={values.paymentType === PAYMENT_TYPES.REGULAR}\n                />\n                <RadioCheck\n                  name=\"paymentType\"\n                  title={t(\"Different source and destination assets\")}\n                  value={PAYMENT_TYPES.PATH_PAYMENT}\n                  subtext={t(\"Less common\")}\n                  tooltipDetails={\n                    <span>\n                      {t(\n                        \"The destination account can receive a different asset, the received amount is defined by the available conversion rates\",\n                      )}{\" \"}\n                      <Link\n                        variant=\"secondary\"\n                        href=\"https://www.ledger.com/stellar-wallet\"\n                        rel=\"noreferrer\"\n                        target=\"_blank\"\n                      >\n                        {t(\"Learn more\")}\n                      </Link>\n                    </span>\n                  }\n                  selected={values.paymentType === PAYMENT_TYPES.PATH_PAYMENT}\n                />\n              </Form>\n            </View.Content>\n            <View.Footer>\n              <Button\n                size=\"md\"\n                isFullWidth\n                variant=\"secondary\"\n                onClick={() => submitForm(values)}\n              >\n                {t(\"Done\")}\n              </Button>\n            </View.Footer>\n          </>\n        )}\n      </Formik>\n    </React.Fragment>\n  );\n};\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Formik, Form, Field, FieldProps } from \"formik\";\nimport { Icon, Textarea, Link, Button, Loader } from \"@stellar/design-system\";\nimport { useTranslation } from \"react-i18next\";\nimport { Asset, BASE_FEE } from \"stellar-sdk\";\nimport BigNumber from \"bignumber.js\";\n\nimport { navigateTo } from \"popup/helpers/navigate\";\nimport { useNetworkFees } from \"popup/helpers/useNetworkFees\";\nimport { useIsSwap } from \"popup/helpers/useIsSwap\";\nimport { getNativeContractDetails } from \"popup/helpers/searchAsset\";\nimport {\n  isMuxedAccount,\n  getAssetFromCanonical,\n  stroopToXlm,\n} from \"helpers/stellar\";\nimport { ROUTES } from \"popup/constants/routes\";\nimport { SubviewHeader } from \"popup/components/SubviewHeader\";\nimport { FormRows } from \"popup/basics/Forms\";\nimport { View } from \"popup/basics/layout/View\";\nimport {\n  saveMemo,\n  transactionDataSelector,\n  isPathPaymentSelector,\n  saveTransactionFee,\n  saveSimulation,\n  transactionSubmissionSelector,\n  saveIsToken,\n} from \"popup/ducks/transactionSubmission\";\nimport {\n  simulateTokenPayment,\n  simulateSwap,\n  tokenSimulationSelector,\n} from \"popup/ducks/token-payment\";\n\nimport { InfoTooltip } from \"popup/basics/InfoTooltip\";\nimport { publicKeySelector } from \"popup/ducks/accountServices\";\nimport { settingsNetworkDetailsSelector } from \"popup/ducks/settings\";\nimport {\n  parseTokenAmount,\n  isContractId,\n  formatTokenAmount,\n  CLASSIC_ASSET_DECIMALS,\n} from \"popup/helpers/soroban\";\nimport { Balances, TokenBalance } from \"@shared/api/types\";\nimport { AppDispatch } from \"popup/App\";\n\nimport \"../../styles.scss\";\n\nexport const Settings = ({\n  previous,\n  next,\n}: {\n  previous: ROUTES;\n  next: ROUTES;\n}) => {\n  const { t } = useTranslation();\n  const dispatch: AppDispatch = useDispatch();\n  const {\n    asset,\n    amount,\n    decimals,\n    destination,\n    destinationAmount,\n    destinationDecimals,\n    transactionFee,\n    transactionTimeout,\n    memo,\n    allowedSlippage,\n    isToken,\n    isSoroswap,\n    path,\n  } = useSelector(transactionDataSelector);\n  const networkDetails = useSelector(settingsNetworkDetailsSelector);\n  const isPathPayment = useSelector(isPathPaymentSelector);\n  const publicKey = useSelector(publicKeySelector);\n  const { accountBalances } = useSelector(transactionSubmissionSelector);\n  const { simulation } = useSelector(tokenSimulationSelector);\n  const isSwap = useIsSwap();\n  const { recommendedFee } = useNetworkFees();\n  const [isLoadingSimulation, setLoadingSimulation] = useState(true);\n\n  const isSendSacToContract =\n    isContractId(destination) &&\n    !isContractId(getAssetFromCanonical(asset).issuer);\n  const getSacContractAddress = useCallback(() => {\n    if (asset === \"native\") {\n      return getNativeContractDetails(networkDetails).contract;\n    }\n\n    const assetFromCanonical = new Asset(\n      getAssetFromCanonical(asset).code,\n      getAssetFromCanonical(asset).issuer,\n    );\n    const contractAddress = assetFromCanonical.contractId(\n      networkDetails.networkPassphrase,\n    );\n\n    return contractAddress;\n  }, [asset, networkDetails]);\n\n  useEffect(() => {\n    async function simulateTx() {\n      if (!recommendedFee) {\n        return;\n      }\n      // use default transaction fee if unset\n      const baseFee = new BigNumber(\n        transactionFee || recommendedFee || stroopToXlm(BASE_FEE),\n      );\n\n      if (isSoroswap) {\n        const simulatedTx = await dispatch(\n          simulateSwap({\n            networkDetails,\n            publicKey,\n            amountIn: amount,\n            amountInDecimals: decimals || 0,\n            amountOut: destinationAmount,\n            amountOutDecimals: destinationDecimals || 0,\n            memo,\n            transactionFee,\n            path,\n          }),\n        );\n\n        if (simulateSwap.fulfilled.match(simulatedTx)) {\n          dispatch(saveSimulation(simulatedTx.payload));\n          const minResourceFee = formatTokenAmount(\n            new BigNumber(\n              simulatedTx.payload.simulationTransaction.minResourceFee,\n            ),\n            CLASSIC_ASSET_DECIMALS,\n          );\n          if (!transactionFee) {\n            dispatch(\n              saveTransactionFee(\n                baseFee.plus(new BigNumber(minResourceFee)).toString(),\n              ),\n            );\n          }\n        }\n        setLoadingSimulation(false);\n        return;\n      }\n\n      if (\n        (isToken || isSendSacToContract) &&\n        !simulation.simulationTransaction?.minResourceFee\n      ) {\n        const assetAddress = isSendSacToContract\n          ? getSacContractAddress()\n          : asset.split(\":\")[1];\n        const balances =\n          accountBalances.balances || ({} as NonNullable<Balances>);\n        const assetBalance = balances[asset] as TokenBalance;\n\n        if (!assetBalance) {\n          throw new Error(\"Asset Balance not available\");\n        }\n\n        const parsedAmount = isSendSacToContract\n          ? parseTokenAmount(amount, CLASSIC_ASSET_DECIMALS)\n          : parseTokenAmount(amount, Number(assetBalance.decimals));\n\n        const params = {\n          publicKey,\n          destination,\n          amount: parsedAmount.toNumber(),\n        };\n\n        const simResponse = await dispatch(\n          simulateTokenPayment({\n            address: assetAddress,\n            publicKey,\n            memo,\n            params,\n            networkDetails,\n            transactionFee,\n          }),\n        );\n\n        if (\n          simulateTokenPayment.fulfilled.match(simResponse) &&\n          recommendedFee\n        ) {\n          const minResourceFee = formatTokenAmount(\n            new BigNumber(\n              simResponse.payload.simulationTransaction.minResourceFee,\n            ),\n            CLASSIC_ASSET_DECIMALS,\n          );\n          dispatch(saveSimulation(simResponse.payload));\n          dispatch(saveIsToken(true));\n          dispatch(\n            saveTransactionFee(\n              baseFee.plus(new BigNumber(minResourceFee)).toString(),\n            ),\n          );\n        }\n        setLoadingSimulation(false);\n        return;\n      }\n\n      if (!transactionFee) {\n        dispatch(saveTransactionFee(baseFee.toString()));\n      }\n      setLoadingSimulation(false);\n    }\n    async function setFee() {\n      setLoadingSimulation(true);\n      await simulateTx();\n    }\n    setFee();\n  }, [\n    dispatch,\n    recommendedFee,\n    transactionFee,\n    accountBalances.balances,\n    amount,\n    asset,\n    decimals,\n    destination,\n    destinationAmount,\n    destinationDecimals,\n    getSacContractAddress,\n    isSendSacToContract,\n    isSoroswap,\n    isToken,\n    memo,\n    networkDetails,\n    path,\n    publicKey,\n    simulation.simulationTransaction?.minResourceFee,\n  ]);\n\n  const handleTxFeeNav = () =>\n    navigateTo(isSwap ? ROUTES.swapSettingsFee : ROUTES.sendPaymentSettingsFee);\n\n  const handleSlippageNav = () =>\n    navigateTo(\n      isSwap ? ROUTES.swapSettingsSlippage : ROUTES.sendPaymentSettingsSlippage,\n    );\n\n  const handleTimeoutNav = () =>\n    navigateTo(\n      isSwap ? ROUTES.swapSettingsTimeout : ROUTES.sendPaymentSettingsTimeout,\n    );\n\n  // dont show memo for regular sends to Muxed, or for swaps\n  const showMemo = !isSwap && !isMuxedAccount(destination);\n  const showSlippage = (isPathPayment || isSwap) && !isSoroswap;\n\n  return (\n    <React.Fragment>\n      <SubviewHeader\n        title={`${isSwap ? t(\"Swap\") : t(\"Send\")} ${t(\"Settings\")}`}\n        customBackAction={() => navigateTo(previous)}\n      />\n      {isLoadingSimulation && !recommendedFee ? (\n        <div className=\"SendSettings__loadingWrapper\">\n          <Loader size=\"2rem\" />\n        </div>\n      ) : (\n        <Formik\n          initialValues={{ memo }}\n          onSubmit={(values) => {\n            dispatch(saveMemo(values.memo));\n          }}\n        >\n          {({ submitForm }) => (\n            <Form className=\"View__contentAndFooterWrapper\">\n              <View.Content hasNoTopPadding>\n                <FormRows>\n                  <div className=\"SendSettings__row\">\n                    <div className=\"SendSettings__row__left\">\n                      <InfoTooltip\n                        infoText={\n                          <span>\n                            {t(\"Maximum network transaction fee to be paid\")}{\" \"}\n                            <Link\n                              variant=\"secondary\"\n                              href=\"https://developers.stellar.org/docs/glossary/fees/#base-fee\"\n                              rel=\"noreferrer\"\n                              target=\"_blank\"\n                            >\n                              {t(\"Learn more\")}\n                            </Link>\n                          </span>\n                        }\n                        placement=\"bottom\"\n                      >\n                        <span\n                          className=\"SendSettings__row__title SendSettings__clickable\"\n                          onClick={() => {\n                            submitForm();\n                            handleTxFeeNav();\n                          }}\n                        >\n                          {t(\"Transaction fee\")}\n                        </span>\n                      </InfoTooltip>\n                    </div>\n                    <div\n                      className=\"SendSettings__row__right SendSettings__clickable\"\n                      onClick={() => {\n                        submitForm();\n                        handleTxFeeNav();\n                      }}\n                    >\n                      <span data-testid=\"SendSettingsTransactionFee\">\n                        {transactionFee} XLM\n                      </span>\n                      <div>\n                        <Icon.ChevronRight />\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"SendSettings__row\">\n                    <div className=\"SendSettings__row__left\">\n                      <InfoTooltip\n                        infoText={\n                          <span>\n                            {t(\n                              \"Number of seconds that can pass before this transaction can no longer be accepted by the network\",\n                            )}{\" \"}\n                          </span>\n                        }\n                        placement=\"bottom\"\n                      >\n                        <span\n                          className=\"SendSettings__row__title SendSettings__clickable\"\n                          onClick={() => {\n                            submitForm();\n                            handleTimeoutNav();\n                          }}\n                        >\n                          {t(\"Transaction timeout\")}\n                        </span>\n                      </InfoTooltip>\n                    </div>\n                    <div\n                      className=\"SendSettings__row__right SendSettings__clickable\"\n                      onClick={() => {\n                        submitForm();\n                        handleTimeoutNav();\n                      }}\n                    >\n                      <span data-testid=\"SendSettingsTransactionTimeout\">\n                        {transactionTimeout}(s)\n                      </span>\n                      <div>\n                        <Icon.ChevronRight />\n                      </div>\n                    </div>\n                  </div>\n\n                  {showSlippage && (\n                    <div className=\"SendSettings__row\">\n                      <div className=\"SendSettings__row__left\">\n                        <InfoTooltip\n                          infoText={\n                            <span>\n                              {t(\n                                \"Allowed downward variation in the destination amount\",\n                              )}{\" \"}\n                              <Link\n                                variant=\"secondary\"\n                                href=\"https://www.freighter.app/faq\"\n                                rel=\"noreferrer\"\n                                target=\"_blank\"\n                              >\n                                {t(\"Learn more\")}\n                              </Link>\n                            </span>\n                          }\n                          placement=\"bottom\"\n                        >\n                          <span\n                            className=\"SendSettings__row__title SendSettings__clickable\"\n                            onClick={() => {\n                              submitForm();\n                              handleSlippageNav();\n                            }}\n                          >\n                            {t(\"Allowed slippage\")}\n                          </span>\n                        </InfoTooltip>\n                      </div>\n                      <div\n                        className=\"SendSettings__row__right SendSettings__clickable\"\n                        onClick={() => {\n                          submitForm();\n                          handleSlippageNav();\n                        }}\n                      >\n                        <span data-testid=\"SendSettingsAllowedSlippage\">\n                          {allowedSlippage}%\n                        </span>\n                        <div>\n                          <Icon.ChevronRight />\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                  {showMemo && (\n                    <>\n                      <div className=\"SendSettings__row\">\n                        <div className=\"SendSettings__row__left\">\n                          <InfoTooltip\n                            infoText={\n                              <span>\n                                {t(\"Include a custom memo to this transaction\")}{\" \"}\n                                <Link\n                                  variant=\"secondary\"\n                                  href=\"https://developers.stellar.org/docs/glossary/transactions/#memo\"\n                                  rel=\"noreferrer\"\n                                  target=\"_blank\"\n                                >\n                                  {t(\"Learn more\")}\n                                </Link>\n                              </span>\n                            }\n                            placement=\"bottom\"\n                          >\n                            <span className=\"SendSettings__row__title\">\n                              {t(\"Memo\")}\n                            </span>\n                          </InfoTooltip>\n                        </div>\n                        <div className=\"SendSettings__row__right\">\n                          <span></span>\n                        </div>\n                      </div>\n                      <Field name=\"memo\">\n                        {({ field }: FieldProps) => (\n                          <Textarea\n                            fieldSize=\"md\"\n                            id=\"mnemonic-input\"\n                            placeholder={t(\"Memo (optional)\")}\n                            {...field}\n                          />\n                        )}\n                      </Field>\n                    </>\n                  )}\n                </FormRows>\n              </View.Content>\n              <View.Footer>\n                <Button\n                  disabled={!transactionFee}\n                  size=\"md\"\n                  isFullWidth\n                  onClick={() => navigateTo(next)}\n                  type=\"submit\"\n                  variant=\"secondary\"\n                  data-testid=\"send-settings-btn-continue\"\n                >\n                  {t(\"Review\")} {isSwap ? t(\"Swap\") : t(\"Send\")}\n                </Button>\n              </View.Footer>\n            </Form>\n          )}\n        </Formik>\n      )}\n    </React.Fragment>\n  );\n};\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Button } from \"@stellar/design-system\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { navigateTo } from \"popup/helpers/navigate\";\nimport { ROUTES } from \"popup/constants/routes\";\nimport { View } from \"popup/basics/layout/View\";\nimport IconFail from \"popup/assets/icon-fail.svg\";\n\nimport { emitMetric } from \"helpers/metrics\";\nimport { METRIC_NAMES } from \"popup/constants/metricsNames\";\nimport {\n  resetSimulation,\n  tokenSimulationSelector,\n} from \"popup/ducks/token-payment\";\nimport \"./styles.scss\";\n\nexport const SettingsFail = () => {\n  const dispatch = useDispatch();\n  const { error } = useSelector(tokenSimulationSelector);\n  const { t } = useTranslation();\n\n  useEffect(() => {\n    emitMetric(METRIC_NAMES.simuilateTokenPaymentError, { error });\n  }, [error]);\n\n  return (\n    <React.Fragment>\n      <View.AppHeader pageTitle={t(\"Error\")} />\n      <View.Content>\n        <div className=\"SettingsFail__content\">\n          <div className=\"SettingsFail__amount\">Simulation Rejected</div>\n          <div className=\"SettingsFail__icon SettingsFail__fail\">\n            <img src={IconFail} alt=\"Icon Fail\" />\n          </div>\n          <div className=\"SettingsFail__error-code\"></div>\n        </div>\n        <div className=\"SettingsFail__error-block\">{error?.errorMessage}</div>\n      </View.Content>\n      <View.Footer>\n        <Button\n          isFullWidth\n          variant=\"tertiary\"\n          size=\"md\"\n          onClick={() => {\n            dispatch(resetSimulation());\n            navigateTo(ROUTES.account);\n          }}\n        >\n          {t(\"Got it\")}\n        </Button>\n      </View.Footer>\n    </React.Fragment>\n  );\n};\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport { ActionStatus } from \"@shared/api/types\";\n\nimport { tokenSimulationStatusSelector } from \"popup/ducks/token-payment\";\nimport { ROUTES } from \"popup/constants/routes\";\n\nimport { Settings } from \"./Settings\";\nimport { SettingsFail } from \"./SettingsFail\";\n\nexport const SendSettings = ({\n  previous,\n  next,\n}: {\n  previous: ROUTES;\n  next: ROUTES;\n}) => {\n  const simStatus = useSelector(tokenSimulationStatusSelector);\n\n  const render = () => {\n    switch (simStatus) {\n      case ActionStatus.IDLE:\n      case ActionStatus.PENDING:\n        return <Settings previous={previous} next={next} />;\n      case ActionStatus.ERROR:\n        return <SettingsFail />;\n      default:\n        return <Settings previous={previous} next={next} />;\n    }\n  };\n\n  return render();\n};\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { Formik, Form, Field, FieldProps } from \"formik\";\nimport { object as YupObject, number as YupNumber } from \"yup\";\nimport { Input, Icon, Link, Button } from \"@stellar/design-system\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { navigateTo } from \"popup/helpers/navigate\";\nimport { useNetworkFees } from \"popup/helpers/useNetworkFees\";\nimport { ROUTES } from \"popup/constants/routes\";\nimport { FormRows } from \"popup/basics/Forms\";\nimport { InfoTooltip } from \"popup/basics/InfoTooltip\";\nimport { View } from \"popup/basics/layout/View\";\nimport { SubviewHeader } from \"popup/components/SubviewHeader\";\nimport {\n  saveTransactionFee,\n  transactionDataSelector,\n} from \"popup/ducks/transactionSubmission\";\n\nimport \"./styles.scss\";\n\nexport const SendSettingsFee = ({ previous }: { previous: ROUTES }) => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const { transactionFee } = useSelector(transactionDataSelector);\n  const { networkCongestion, recommendedFee } = useNetworkFees();\n\n  return (\n    <React.Fragment>\n      <SubviewHeader\n        title=\"Transaction Fee\"\n        customBackAction={() => navigateTo(previous)}\n        customBackIcon={<Icon.XClose />}\n        rightButton={\n          <InfoTooltip\n            infoText={\n              <span>\n                {t(\"Maximum network transaction fee to be paid\")}{\" \"}\n                <Link\n                  variant=\"secondary\"\n                  href=\"https://developers.stellar.org/docs/glossary/fees/#base-fee\"\n                  rel=\"noreferrer\"\n                  target=\"_blank\"\n                >\n                  {t(\"Learn more\")}\n                </Link>\n              </span>\n            }\n            placement=\"bottom\"\n          >\n            <></>\n          </InfoTooltip>\n        }\n      />\n\n      <Formik\n        initialValues={{ transactionFee }}\n        onSubmit={(values) => {\n          dispatch(saveTransactionFee(String(values.transactionFee)));\n          navigateTo(previous);\n        }}\n        validationSchema={YupObject().shape({\n          transactionFee: YupNumber().min(\n            0.00001,\n            `${t(\"must be greater than\")} 0.00001`,\n          ),\n        })}\n      >\n        {({ setFieldValue, values, isValid, errors }) => (\n          <Form className=\"View__contentAndFooterWrapper\">\n            <View.Content hasNoTopPadding>\n              <FormRows>\n                <Field name=\"transactionFee\">\n                  {({ field }: FieldProps) => (\n                    <>\n                      <Input\n                        fieldSize=\"md\"\n                        id=\"transaction-fee-input\"\n                        className=\"SendTo__input\"\n                        type=\"number\"\n                        {...field}\n                        error={errors.transactionFee}\n                      />\n                      <div className=\"TransactionFee__row\">\n                        {/* eslint-disable-next-line jsx-a11y/anchor-is-valid */}\n                        <Link\n                          isUnderline\n                          isDisabled={field.value === recommendedFee}\n                          variant=\"secondary\"\n                          role=\"button\"\n                          onClick={() =>\n                            setFieldValue(\"transactionFee\", recommendedFee)\n                          }\n                        >\n                          {t(\"Set recommended\")}\n                        </Link>\n                        <span>\n                          {networkCongestion} {t(\"congestion\")}\n                        </span>\n                      </div>\n                    </>\n                  )}\n                </Field>\n              </FormRows>\n            </View.Content>\n            <View.Footer>\n              <Button\n                size=\"md\"\n                isFullWidth\n                variant=\"secondary\"\n                disabled={!values.transactionFee || !isValid}\n                type=\"submit\"\n              >\n                {t(\"Done\")}\n              </Button>\n            </View.Footer>\n          </Form>\n        )}\n      </Formik>\n    </React.Fragment>\n  );\n};\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Field, Form, Formik, FieldProps } from \"formik\";\nimport { object as YupObject, number as YupNumber } from \"yup\";\nimport { useTranslation } from \"react-i18next\";\nimport { Input, Icon, Link, Card, Button } from \"@stellar/design-system\";\n\nimport {\n  transactionDataSelector,\n  saveAllowedSlippage,\n} from \"popup/ducks/transactionSubmission\";\nimport { navigateTo } from \"popup/helpers/navigate\";\nimport { ROUTES } from \"popup/constants/routes\";\nimport { InfoTooltip } from \"popup/basics/InfoTooltip\";\nimport { View } from \"popup/basics/layout/View\";\nimport { SubviewHeader } from \"popup/components/SubviewHeader\";\n\nimport \"./styles.scss\";\n\nconst defaultSlippage = \"1\";\n\nexport const SendSettingsSlippage = ({ previous }: { previous: ROUTES }) => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const { allowedSlippage } = useSelector(transactionDataSelector);\n\n  let presetSlippage = \"\";\n  let customSlippage = \"\";\n  if ([\"1\", \"2\", \"3\"].includes(allowedSlippage)) {\n    presetSlippage = allowedSlippage;\n  } else {\n    customSlippage = allowedSlippage;\n  }\n\n  return (\n    <React.Fragment>\n      <SubviewHeader\n        title=\"Allowed Slippage\"\n        customBackAction={() => navigateTo(previous)}\n        customBackIcon={<Icon.XClose />}\n        rightButton={\n          <InfoTooltip\n            // TODO - add link to FAQ when added\n            infoText={\n              <span>\n                {t(\"Allowed downward variation in the destination amount\")}\n              </span>\n            }\n            placement=\"bottom\"\n          >\n            <></>\n          </InfoTooltip>\n        }\n      />\n      <Formik\n        initialValues={{ presetSlippage, customSlippage }}\n        onSubmit={(values) => {\n          dispatch(\n            saveAllowedSlippage(values.customSlippage || values.presetSlippage),\n          );\n          navigateTo(previous);\n        }}\n        validationSchema={YupObject().shape({\n          customSlippage: YupNumber().max(10, `${t(\"must be below\")} 10%`),\n        })}\n      >\n        {({ setFieldValue, values, errors }) => (\n          <Form className=\"View__contentAndFooterWrapper\">\n            <View.Content hasNoTopPadding>\n              <div className=\"Slippage__cards\">\n                <label className=\"Slippage--radio-label\">\n                  <Field\n                    className=\"Slippage--radio-field\"\n                    name=\"presetSlippage\"\n                    type=\"radio\"\n                    value=\"1\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      setFieldValue(\"presetSlippage\", e.target.value);\n                      setFieldValue(\"customSlippage\", \"\");\n                    }}\n                  />\n                  <Card>1%</Card>\n                </label>\n                <label className=\"Slippage--radio-label\">\n                  <Field\n                    className=\"Slippage--radio-field\"\n                    name=\"presetSlippage\"\n                    type=\"radio\"\n                    value=\"2\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      setFieldValue(\"presetSlippage\", e.target.value);\n                      setFieldValue(\"customSlippage\", \"\");\n                    }}\n                  />\n                  <Card>2%</Card>\n                </label>\n                <label className=\"Slippage--radio-label\">\n                  <Field\n                    className=\"Slippage--radio-field\"\n                    name=\"presetSlippage\"\n                    type=\"radio\"\n                    value=\"3\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      setFieldValue(\"presetSlippage\", e.target.value);\n                      setFieldValue(\"customSlippage\", \"\");\n                    }}\n                  />\n                  <Card>3%</Card>\n                </label>\n              </div>\n              <div className=\"Slippage__custom-input\">\n                <Field name=\"customSlippage\">\n                  {({ field }: FieldProps) => (\n                    <Input\n                      fieldSize=\"md\"\n                      id=\"custom-input\"\n                      placeholder={`${t(\"Custom\")} %`}\n                      type=\"number\"\n                      {...field}\n                      onChange={(e) => {\n                        setFieldValue(\"customSlippage\", e.target.value);\n                        setFieldValue(\"presetSlippage\", \"\");\n                      }}\n                      error={errors.customSlippage}\n                    />\n                  )}\n                </Field>\n              </div>\n              {/* eslint-disable-next-line jsx-a11y/anchor-is-valid */}\n              <Link\n                isUnderline\n                variant=\"secondary\"\n                role=\"button\"\n                onClick={() => {\n                  setFieldValue(\"presetSlippage\", defaultSlippage);\n                  setFieldValue(\"customSlippage\", \"\");\n                }}\n              >\n                {t(\"Set default\")}\n              </Link>\n            </View.Content>\n            <View.Footer>\n              <Button\n                size=\"md\"\n                isFullWidth\n                disabled={!values.presetSlippage && !values.customSlippage}\n                variant=\"secondary\"\n                type=\"submit\"\n              >\n                {t(\"Done\")}\n              </Button>\n            </View.Footer>\n          </Form>\n        )}\n      </Formik>\n    </React.Fragment>\n  );\n};\n","import React from \"react\";\nimport { truncatedPublicKey } from \"helpers/stellar\";\nimport { IdenticonImg } from \"popup/components/identicons/IdenticonImg\";\n\nexport const FedOrGAddress = ({\n  fedAddress,\n  gAddress,\n}: {\n  fedAddress: string;\n  gAddress: string;\n}) => {\n  if (fedAddress) {\n    return <span>{fedAddress}</span>;\n  }\n  return (\n    <>\n      <IdenticonImg publicKey={gAddress} />\n      <span>{truncatedPublicKey(gAddress)}</span>\n    </>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { createPortal } from \"react-dom\";\nimport get from \"lodash/get\";\nimport { Button, Icon, Link, Notification } from \"@stellar/design-system\";\nimport { useTranslation } from \"react-i18next\";\nimport { Account, Asset, Operation, TransactionBuilder } from \"stellar-sdk\";\nimport { AppDispatch } from \"popup/App\";\n\nimport { AssetIcons, ErrorMessage } from \"@shared/api/types\";\nimport { stellarSdkServer } from \"@shared/api/helpers/stellarSdkServer\";\n\nimport { getAssetFromCanonical, xlmToStroop } from \"helpers/stellar\";\nimport { navigateTo } from \"popup/helpers/navigate\";\nimport { RESULT_CODES, getResultCodes } from \"popup/helpers/parseTransaction\";\nimport { useIsSwap } from \"popup/helpers/useIsSwap\";\nimport { useNetworkFees } from \"popup/helpers/useNetworkFees\";\nimport { ROUTES } from \"popup/constants/routes\";\nimport {\n  publicKeySelector,\n  hardwareWalletTypeSelector,\n} from \"popup/ducks/accountServices\";\nimport { settingsNetworkDetailsSelector } from \"popup/ducks/settings\";\nimport {\n  startHwSign,\n  signFreighterTransaction,\n  submitFreighterTransaction,\n  transactionSubmissionSelector,\n} from \"popup/ducks/transactionSubmission\";\nimport { FedOrGAddress } from \"popup/basics/sendPayment/FedOrGAddress\";\nimport { View } from \"popup/basics/layout/View\";\nimport { AssetIcon } from \"popup/components/account/AccountAssets\";\nimport { TrustlineError } from \"popup/components/manageAssets/TrustlineError\";\nimport IconFail from \"popup/assets/icon-fail.svg\";\nimport { emitMetric } from \"helpers/metrics\";\nimport { METRIC_NAMES } from \"popup/constants/metricsNames\";\nimport { formatAmount } from \"popup/helpers/formatters\";\nimport { isAssetSuspicious } from \"popup/helpers/blockaid\";\n\nimport \"./styles.scss\";\n\nconst SwapAssetsIcon = ({\n  sourceCanon,\n  destCanon,\n  assetIcons,\n  isSourceSuspicious,\n  isDestSuspicious,\n}: {\n  sourceCanon: string;\n  destCanon: string;\n  assetIcons: AssetIcons;\n  isSourceSuspicious: boolean;\n  isDestSuspicious: boolean;\n}) => {\n  const source = getAssetFromCanonical(sourceCanon);\n  const dest = getAssetFromCanonical(destCanon);\n\n  return (\n    <div className=\"SwapAssetsIcon\">\n      <AssetIcon\n        assetIcons={assetIcons}\n        code={source.code}\n        issuerKey={source.issuer}\n        isSuspicious={isSourceSuspicious}\n      />\n      <span data-testid=\"SubmitResultSource\">{source.code}</span>\n      <Icon.ArrowRight />\n      <AssetIcon\n        assetIcons={assetIcons}\n        code={dest.code}\n        issuerKey={dest.issuer}\n        isSuspicious={isDestSuspicious}\n      />\n      <span data-testid=\"SubmitResultDestination\">{dest.code}</span>\n    </div>\n  );\n};\n\nexport const SubmitSuccess = ({ viewDetails }: { viewDetails: () => void }) => {\n  const {\n    accountBalances,\n    transactionData: {\n      destination,\n      federationAddress,\n      amount,\n      asset,\n      destinationAsset,\n    },\n    assetIcons,\n  } = useSelector(transactionSubmissionSelector);\n\n  const { t } = useTranslation();\n  const isSwap = useIsSwap();\n  const dispatch: AppDispatch = useDispatch();\n\n  const sourceAsset = getAssetFromCanonical(asset);\n  const { recommendedFee } = useNetworkFees();\n  const publicKey = useSelector(publicKeySelector);\n  const networkDetails = useSelector(settingsNetworkDetailsSelector);\n  const [isTrustlineErrorShowing, setIsTrustlineErrorShowing] = useState(false);\n\n  const server = stellarSdkServer(\n    networkDetails.networkUrl,\n    networkDetails.networkPassphrase,\n  );\n  const isHardwareWallet = !!useSelector(hardwareWalletTypeSelector);\n  const isSourceAssetSuspicious = isAssetSuspicious(\n    accountBalances.balances?.[asset]?.blockaidData,\n  );\n  const isDestAssetSuspicious = isAssetSuspicious(\n    accountBalances.balances?.[destinationAsset]?.blockaidData,\n  );\n\n  const removeTrustline = async (assetCode: string, assetIssuer: string) => {\n    const changeParams = { limit: \"0\" };\n    const sourceAccount: Account = await server.loadAccount(publicKey);\n\n    const transactionXDR = new TransactionBuilder(sourceAccount, {\n      fee: xlmToStroop(recommendedFee).toFixed(),\n      networkPassphrase: networkDetails.networkPassphrase,\n    })\n      .addOperation(\n        Operation.changeTrust({\n          asset: new Asset(assetCode, assetIssuer),\n          ...changeParams,\n        }),\n      )\n      .setTimeout(180)\n      .build()\n      .toXDR();\n\n    const trackRemoveTrustline = () => {\n      emitMetric(METRIC_NAMES.manageAssetRemoveAsset, {\n        assetCode,\n        assetIssuer,\n      });\n    };\n\n    if (isHardwareWallet) {\n      // eslint-disable-next-line\n      await dispatch(startHwSign({ transactionXDR, shouldSubmit: true }));\n      trackRemoveTrustline();\n    } else {\n      await signAndSubmit(transactionXDR, trackRemoveTrustline);\n    }\n  };\n\n  const signAndSubmit = async (\n    transactionXDR: string,\n    trackChangeTrustline: () => void,\n  ) => {\n    const res = await dispatch(\n      signFreighterTransaction({\n        transactionXDR,\n        network: networkDetails.networkPassphrase,\n      }),\n    );\n\n    if (signFreighterTransaction.fulfilled.match(res)) {\n      const submitResp = await dispatch(\n        submitFreighterTransaction({\n          publicKey,\n          signedXDR: res.payload.signedTransaction,\n          networkDetails,\n        }),\n      );\n\n      if (submitFreighterTransaction.fulfilled.match(submitResp)) {\n        trackChangeTrustline();\n        navigateTo(ROUTES.account);\n      }\n\n      if (submitFreighterTransaction.rejected.match(submitResp)) {\n        setIsTrustlineErrorShowing(true);\n      }\n    }\n  };\n\n  // TODO: the remove trustline logic here does not work Soroban tokens. We should handle this case\n\n  const suggestRemoveTrustline =\n    accountBalances.balances &&\n    accountBalances.balances[asset] &&\n    accountBalances.balances[asset].available?.isZero();\n\n  return (\n    <React.Fragment>\n      <View.AppHeader\n        pageTitle={`${t(\"Successfully\")} ${isSwap ? t(\"swapped\") : t(\"sent\")}`}\n      />\n      <View.Content\n        contentFooter={\n          <div className=\"SubmitResult__suggest-remove-tl\">\n            {suggestRemoveTrustline && (\n              <Notification variant=\"primary\" title={t(\"Remove trustline\")}>\n                <span className=\"remove-tl-contents\">\n                  <p>\n                    Your {sourceAsset.code} balance is now empty. Would you like\n                    to remove the {sourceAsset.code} trustline?\n                  </p>\n                  <button\n                    onClick={() =>\n                      removeTrustline(sourceAsset.code, sourceAsset.issuer)\n                    }\n                  >\n                    Remove Trustline\n                  </button>\n                </span>\n              </Notification>\n            )}\n          </div>\n        }\n      >\n        <div className=\"SubmitResult__content\">\n          <div\n            className=\"SubmitResult__amount\"\n            data-testid=\"SubmitResultAmount\"\n          >\n            {formatAmount(amount)} {sourceAsset.code}\n          </div>\n          <div className=\"SubmitResult__icon SubmitResult__success\">\n            <Icon.ArrowCircleDown />\n          </div>\n          <div className=\"SubmitResult__identicon\">\n            {isSwap ? (\n              <SwapAssetsIcon\n                sourceCanon={asset}\n                destCanon={destinationAsset}\n                assetIcons={assetIcons}\n                isSourceSuspicious={isSourceAssetSuspicious}\n                isDestSuspicious={isDestAssetSuspicious}\n              />\n            ) : (\n              <FedOrGAddress\n                fedAddress={federationAddress}\n                gAddress={destination}\n              />\n            )}\n          </div>\n        </div>\n      </View.Content>\n      <View.Footer isInline>\n        <Button\n          size=\"md\"\n          variant=\"tertiary\"\n          onClick={() => viewDetails()}\n          data-testid=\"SubmitResultDetailsButton\"\n        >\n          {t(\"Details\")}\n        </Button>\n        <Button\n          size=\"md\"\n          variant=\"secondary\"\n          onClick={() => {\n            navigateTo(ROUTES.account);\n          }}\n        >\n          {t(\"Done\")}\n        </Button>\n      </View.Footer>\n      {isTrustlineErrorShowing\n        ? createPortal(\n            <TrustlineError />,\n            document.querySelector(\"#modal-root\")!,\n          )\n        : null}\n    </React.Fragment>\n  );\n};\n\ninterface ErrorDetails {\n  title: string;\n  errorBlock: React.ReactNode;\n  opError: RESULT_CODES;\n  status: string;\n}\n\nexport const SubmitFail = () => {\n  const { error } = useSelector(transactionSubmissionSelector);\n  const isSwap = useIsSwap();\n  const { t } = useTranslation();\n\n  useEffect(() => {\n    emitMetric(METRIC_NAMES.sendPaymentError, { error });\n  }, [error]);\n\n  const getErrorDetails = (err: ErrorMessage | undefined): ErrorDetails => {\n    const errorDetails: ErrorDetails = {\n      title: \"\",\n      errorBlock: <div></div>,\n      opError: RESULT_CODES.tx_failed,\n      status: \"\",\n    };\n\n    const httpCode = get(err, \"response.status\", \"\");\n    const { operations: opErrors, transaction: txError } = getResultCodes(err);\n\n    if (opErrors[0]) {\n      errorDetails.opError = opErrors[0] as RESULT_CODES;\n    } else {\n      errorDetails.opError = txError as RESULT_CODES;\n    }\n\n    switch (errorDetails.opError) {\n      case RESULT_CODES.tx_insufficient_fee:\n        errorDetails.title = t(\"Insufficient Fee\");\n        errorDetails.errorBlock = (\n          <Notification variant=\"error\" title={t(\"Network fees\")}>\n            <div>\n              {t(\n                \"Fees can vary depending on the network congestion. Please try using the suggested fee and try again.\",\n              )}{\" \"}\n              <Link\n                isUnderline\n                variant=\"secondary\"\n                href=\"https://developers.stellar.org/docs/glossary/fees/\"\n                rel=\"noreferrer\"\n                target=\"_blank\"\n              >\n                {t(\"Learn more about fees\")}\n              </Link>\n            </div>\n          </Notification>\n        );\n        break;\n      case RESULT_CODES.op_underfunded:\n        errorDetails.title = t(\"Insufficient Balance\");\n        errorDetails.errorBlock = (\n          <Notification\n            variant=\"error\"\n            title={t(\n              \"Your account balance is not sufficient for this transaction. Please review the transaction and try again.\",\n            )}\n          />\n        );\n        break;\n      case RESULT_CODES.op_no_destination:\n        errorDetails.title = t(\"Destination account doesn’t exist\");\n        errorDetails.errorBlock = (\n          <Notification\n            variant=\"error\"\n            title={t(\"The destination account doesn’t exist\")}\n          >\n            <div>\n              {t(\"Make sure it is a funded Stellar account and try again.\")}{\" \"}\n              <Link\n                isUnderline\n                variant=\"secondary\"\n                href=\"https://developers.stellar.org/docs/tutorials/create-account/#create-account\"\n                rel=\"noreferrer\"\n                target=\"_blank\"\n              >\n                {t(\"Learn more about account funding\")}\n              </Link>\n            </div>\n          </Notification>\n        );\n        break;\n      case RESULT_CODES.op_no_trust:\n        errorDetails.title = t(\n          \"Destination account does not accept this asset\",\n        );\n        errorDetails.errorBlock = (\n          <Notification\n            variant=\"error\"\n            title={t(\n              \"The destination account does not accept the asset you’re sending\",\n            )}\n          >\n            <div>\n              {t(\n                \"The destination account must opt to accept this asset before receiving it.\",\n              )}{\" \"}\n              <Link\n                isUnderline\n                variant=\"secondary\"\n                href=\"https://developers.stellar.org/docs/issuing-assets/anatomy-of-an-asset/#trustlines\"\n                rel=\"noreferrer\"\n                target=\"_blank\"\n              >\n                {t(\"Learn more about trustlines\")}\n              </Link>\n            </div>\n          </Notification>\n        );\n        break;\n      case RESULT_CODES.op_under_dest_min:\n        errorDetails.title = t(\"Conversion rate changed\");\n        errorDetails.errorBlock = (\n          <Notification variant=\"error\" title={t(\"Conversion rate\")}>\n            <div>\n              {t(\"Please check the new rate and try again.\")}{\" \"}\n              <Link\n                isUnderline\n                variant=\"secondary\"\n                href=\"https://developers.stellar.org/docs/start/list-of-operations/#path-payment-strict-send\"\n                rel=\"noreferrer\"\n                target=\"_blank\"\n              >\n                {t(\"Learn more about conversion rates\")}\n              </Link>\n            </div>\n          </Notification>\n        );\n        break;\n      case RESULT_CODES.op_low_reserve:\n        errorDetails.title = t(\"Account minimum balance is too low\");\n        errorDetails.errorBlock = (\n          <Notification variant=\"error\" title={t(\"New account\")}>\n            <div>\n              {t(\n                \"To create a new account you need to send at least 1 XLM to it.\",\n              )}{\" \"}\n              <Link\n                isUnderline\n                variant=\"secondary\"\n                href=\"https://developers.stellar.org/docs/start/list-of-operations/#path-payment-strict-send\"\n                rel=\"noreferrer\"\n                target=\"_blank\"\n              >\n                {t(\"Learn more about conversion rates\")}\n              </Link>\n            </div>\n          </Notification>\n        );\n        break;\n      default:\n        errorDetails.status = httpCode as string;\n        errorDetails.title = `${\n          isSwap ? t(\"Swap failed\") : t(\"Transaction failed\")\n        }`;\n        errorDetails.errorBlock = (\n          <Notification\n            variant=\"error\"\n            title={t(\"One or more operations in this transaction failed.\")}\n          />\n        );\n    }\n    return errorDetails;\n  };\n  const errDetails = getErrorDetails(error);\n\n  return (\n    <React.Fragment>\n      <View.AppHeader pageTitle={t(\"Error\")} />\n      <View.Content>\n        <div className=\"SubmitResult__content\">\n          <div className=\"SubmitResult__amount\">{errDetails.title}</div>\n          <div className=\"SubmitResult__icon SubmitResult__fail\">\n            <img src={IconFail} alt=\"Icon Fail\" />\n          </div>\n          <div className=\"SubmitResult__error-code\">\n            {errDetails.status ? `Status ${errDetails.status}:` : \"\"}{\" \"}\n            {errDetails.opError}\n          </div>\n        </div>\n        <div className=\"SubmitResult__error-block\">{errDetails.errorBlock}</div>\n      </View.Content>\n      <View.Footer>\n        <Button\n          isFullWidth\n          variant=\"tertiary\"\n          size=\"md\"\n          onClick={() => {\n            navigateTo(ROUTES.account);\n          }}\n        >\n          {t(\"Got it\")}\n        </Button>\n      </View.Footer>\n    </React.Fragment>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport BigNumber from \"bignumber.js\";\nimport {\n  Account,\n  Asset,\n  Memo,\n  Operation,\n  TransactionBuilder,\n  Networks,\n} from \"stellar-sdk\";\nimport { Card, Loader, Icon, Button, CopyText } from \"@stellar/design-system\";\nimport { useTranslation } from \"react-i18next\";\n\nimport {\n  getAssetFromCanonical,\n  getCanonicalFromAsset,\n  isMainnet,\n  isMuxedAccount,\n  xlmToStroop,\n  getConversionRate,\n  truncatedFedAddress,\n} from \"helpers/stellar\";\nimport { getStellarExpertUrl } from \"popup/helpers/account\";\nimport { stellarSdkServer } from \"@shared/api/helpers/stellarSdkServer\";\nimport { AssetBalance, AssetIcons, ActionStatus } from \"@shared/api/types\";\nimport { getIconUrlFromIssuer } from \"@shared/api/helpers/getIconUrlFromIssuer\";\nimport {\n  defaultBlockaidScanAssetResult,\n  isCustomNetwork,\n} from \"@shared/helpers/stellar\";\nimport {\n  isAssetSuspicious,\n  isTxSuspicious,\n  useScanAsset,\n  useScanTx,\n} from \"popup/helpers/blockaid\";\n\nimport { AppDispatch } from \"popup/App\";\nimport { ROUTES } from \"popup/constants/routes\";\nimport {\n  getMemoRequiredAccounts,\n  signFreighterTransaction,\n  signFreighterSorobanTransaction,\n  submitFreighterTransaction,\n  submitFreighterSorobanTransaction,\n  transactionSubmissionSelector,\n  addRecentAddress,\n  isPathPaymentSelector,\n  ShowOverlayStatus,\n  startHwSign,\n} from \"popup/ducks/transactionSubmission\";\nimport {\n  settingsNetworkDetailsSelector,\n  settingsSelector,\n} from \"popup/ducks/settings\";\nimport {\n  publicKeySelector,\n  hardwareWalletTypeSelector,\n  addTokenId,\n} from \"popup/ducks/accountServices\";\nimport { navigateTo, openTab } from \"popup/helpers/navigate\";\nimport { useIsSwap } from \"popup/helpers/useIsSwap\";\nimport { emitMetric } from \"helpers/metrics\";\nimport { METRIC_NAMES } from \"popup/constants/metricsNames\";\nimport { SubviewHeader } from \"popup/components/SubviewHeader\";\nimport { FedOrGAddress } from \"popup/basics/sendPayment/FedOrGAddress\";\nimport {\n  AccountAssets,\n  AssetIcon,\n} from \"popup/components/account/AccountAssets\";\nimport { HardwareSign } from \"popup/components/hardwareConnect/HardwareSign\";\nimport {\n  BlockaidTxScanLabel,\n  FlaggedWarningMessage,\n} from \"popup/components/WarningMessages\";\nimport { View } from \"popup/basics/layout/View\";\n\nimport { TRANSACTION_WARNING } from \"constants/transaction\";\nimport { formatAmount } from \"popup/helpers/formatters\";\n\nimport { resetSimulation } from \"popup/ducks/token-payment\";\nimport { NetworkDetails } from \"@shared/constants/stellar\";\n\nimport \"./styles.scss\";\n\nconst TwoAssetCard = ({\n  sourceAssetIcons,\n  sourceCanon,\n  sourceAmount,\n  destAssetIcons,\n  destCanon,\n  destAmount,\n  isSourceAssetSuspicious,\n  isDestAssetSuspicious,\n}: {\n  sourceAssetIcons: AssetIcons;\n  sourceCanon: string;\n  sourceAmount: string;\n  destAssetIcons: AssetIcons;\n  destCanon: string;\n  destAmount: string;\n  isSourceAssetSuspicious: boolean;\n  isDestAssetSuspicious: boolean;\n}) => {\n  const sourceAsset = getAssetFromCanonical(sourceCanon);\n  const destAsset = getAssetFromCanonical(destCanon);\n\n  return (\n    <div className=\"TwoAssetCard\">\n      <div className=\"TwoAssetCard__row\">\n        <div className=\"TwoAssetCard__row__left\">\n          <AssetIcon\n            assetIcons={sourceAssetIcons}\n            code={sourceAsset.code}\n            issuerKey={sourceAsset.issuer}\n            isSuspicious={isSourceAssetSuspicious}\n          />\n          {sourceAsset.code}\n        </div>\n        <div\n          className=\"TwoAssetCard__row__right\"\n          data-testid=\"TransactionDetailsAssetSource\"\n        >\n          {formatAmount(sourceAmount)} {sourceAsset.code}\n        </div>\n      </div>\n      <div className=\"TwoAssetCard__arrow-icon\">\n        <Icon.ArrowDown />\n      </div>\n      <div className=\"TwoAssetCard__row\">\n        <div className=\"TwoAssetCard__row__left\">\n          <AssetIcon\n            assetIcons={destAssetIcons}\n            code={destAsset.code}\n            issuerKey={destAsset.issuer}\n            isSuspicious={isDestAssetSuspicious}\n          />\n          {destAsset.code}\n        </div>\n        <div\n          className=\"TwoAssetCard__row__right\"\n          data-testid=\"TransactionDetailsAssetDestination\"\n        >\n          {formatAmount(new BigNumber(destAmount).toFixed())} {destAsset.code}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst computeDestMinWithSlippage = (\n  slippage: string,\n  destMin: string,\n): BigNumber => {\n  const mult = 1 - parseFloat(slippage) / 100;\n  return new BigNumber(destMin).times(new BigNumber(mult));\n};\n\nconst getOperation = (\n  sourceAsset: Asset | { code: string; issuer: string },\n  destAsset: Asset | { code: string; issuer: string },\n  amount: string,\n  destinationAmount: string,\n  destination: string,\n  allowedSlippage: string,\n  path: string[],\n  isPathPayment: boolean,\n  isSwap: boolean,\n  isFunded: boolean,\n  publicKey: string,\n) => {\n  // path payment or swap\n  if (isPathPayment || isSwap) {\n    const destMin = computeDestMinWithSlippage(\n      allowedSlippage,\n      destinationAmount,\n    );\n    return Operation.pathPaymentStrictSend({\n      sendAsset: sourceAsset as Asset,\n      sendAmount: amount,\n      destination: isSwap ? publicKey : destination,\n      destAsset: destAsset as Asset,\n      destMin: destMin.toFixed(7),\n      path: path.map((p) => getAssetFromCanonical(p)) as Asset[],\n    });\n  }\n\n  // create account if unfunded and sending xlm\n  if (!isFunded && sourceAsset.code === Asset.native().code) {\n    return Operation.createAccount({\n      destination,\n      startingBalance: amount,\n    });\n  }\n  // regular payment\n  return Operation.payment({\n    destination,\n    asset: sourceAsset as Asset,\n    amount,\n  });\n};\n\nconst getBuiltTx = async (\n  publicKey: string,\n  opData: {\n    sourceAsset: Asset | { code: string; issuer: string };\n    destAsset: Asset | { code: string; issuer: string };\n    amount: string;\n    destinationAmount: string;\n    destination: string;\n    allowedSlippage: string;\n    path: string[];\n    isPathPayment: boolean;\n    isSwap: boolean;\n    isFunded: boolean;\n  },\n  fee: string,\n  transactionTimeout: number,\n  networkDetails: NetworkDetails,\n  memo?: string,\n) => {\n  const {\n    sourceAsset,\n    destAsset,\n    amount,\n    destinationAmount,\n    destination,\n    allowedSlippage,\n    path,\n    isPathPayment,\n    isSwap,\n    isFunded,\n  } = opData;\n  const server = stellarSdkServer(\n    networkDetails.networkUrl,\n    networkDetails.networkPassphrase,\n  );\n  const sourceAccount: Account = await server.loadAccount(publicKey);\n  const operation = getOperation(\n    sourceAsset,\n    destAsset,\n    amount,\n    destinationAmount,\n    destination,\n    allowedSlippage,\n    path,\n    isPathPayment,\n    isSwap,\n    isFunded,\n    publicKey,\n  );\n  const transaction = new TransactionBuilder(sourceAccount, {\n    fee: xlmToStroop(fee).toFixed(),\n    networkPassphrase: networkDetails.networkPassphrase,\n  })\n    .addOperation(operation)\n    .setTimeout(transactionTimeout);\n\n  if (memo) {\n    transaction.addMemo(Memo.text(memo));\n  }\n\n  return transaction;\n};\n\nexport const TransactionDetails = ({\n  goBack,\n  shouldScanTx,\n}: {\n  goBack: () => void;\n  shouldScanTx: boolean;\n}) => {\n  const dispatch: AppDispatch = useDispatch();\n  const submission = useSelector(transactionSubmissionSelector);\n  const {\n    accountBalances,\n    destinationBalances,\n    transactionData: {\n      destination,\n      federationAddress,\n      amount,\n      asset,\n      memo,\n      transactionFee,\n      transactionTimeout,\n      allowedSlippage,\n      destinationAsset,\n      destinationAmount,\n      path,\n      isToken,\n      isSoroswap,\n    },\n    assetIcons,\n    hardwareWalletData: { status: hwStatus },\n    memoRequiredAccounts,\n    transactionSimulation,\n  } = submission;\n\n  const transactionHash = submission.response?.hash;\n  const isPathPayment = useSelector(isPathPaymentSelector);\n  const { isMemoValidationEnabled } = useSelector(settingsSelector);\n  const isSwap = useIsSwap();\n  const { scanTx, data: scanResult, isLoading, setLoading } = useScanTx();\n\n  const { t } = useTranslation();\n\n  const publicKey = useSelector(publicKeySelector);\n  const networkDetails = useSelector(settingsNetworkDetailsSelector);\n  const hardwareWalletType = useSelector(hardwareWalletTypeSelector);\n  const isHardwareWallet = !!hardwareWalletType;\n  const [destAssetIcons, setDestAssetIcons] = useState({} as AssetIcons);\n  const [transactionXdr, setTransactionXdr] = useState(\"\");\n\n  const sourceAsset = getAssetFromCanonical(asset);\n  const destAsset = getAssetFromCanonical(destinationAsset || \"native\");\n\n  const _isMainnet = isMainnet(networkDetails);\n  const isValidatingMemo = isMemoValidationEnabled && _isMainnet;\n\n  const matchingBlockedTags = memoRequiredAccounts\n    .filter(({ address }) => address === destination)\n    .flatMap(({ tags }) => tags);\n  const isMemoRequired =\n    isValidatingMemo &&\n    matchingBlockedTags.some(\n      (tag) => tag === TRANSACTION_WARNING.memoRequired && !memo,\n    );\n\n  const isSourceAssetSuspicious = isAssetSuspicious(\n    accountBalances.balances?.[asset]?.blockaidData,\n  );\n\n  const isSubmitDisabled = isMemoRequired;\n\n  const destAssetToScan = destinationAsset\n    ? `${destAsset.code}-${destAsset.issuer}`\n    : \"\";\n\n  const { scannedAsset: scannedDestAsset } = useScanAsset(destAssetToScan);\n  const isDestAssetSuspicious = isAssetSuspicious(scannedDestAsset);\n\n  // load destination asset icons\n  useEffect(() => {\n    (async () => {\n      const iconURL = await getIconUrlFromIssuer({\n        key: destAsset.issuer,\n        code: destAsset.code,\n        networkDetails,\n      });\n      setDestAssetIcons({\n        [getCanonicalFromAsset(destAsset.code, destAsset.issuer)]: iconURL,\n      });\n    })();\n  }, [destAsset.code, destAsset.issuer, networkDetails]);\n\n  useEffect(() => {\n    dispatch(getMemoRequiredAccounts());\n  }, [dispatch]);\n\n  useEffect(() => {\n    const url = \"internal\"; // blockaid prefers a URL for this endpoint, but this does not originate from a URL\n    const scanSorobanTx = async () => {\n      setTransactionXdr(transactionSimulation.preparedTransaction!);\n      if (\n        shouldScanTx &&\n        submission.submitStatus === ActionStatus.IDLE &&\n        transactionSimulation.preparedTransaction\n      ) {\n        await scanTx(\n          transactionSimulation.preparedTransaction,\n          url,\n          networkDetails,\n        );\n      }\n      setLoading(false);\n    };\n    const scanClassicTx = async () => {\n      if (shouldScanTx) {\n        const transaction = await getBuiltTx(\n          publicKey,\n          {\n            sourceAsset,\n            destAsset,\n            amount,\n            destinationAmount,\n            destination,\n            allowedSlippage,\n            path,\n            isPathPayment,\n            isSwap,\n            isFunded: destinationBalances.isFunded!,\n          },\n          transactionFee,\n          transactionTimeout,\n          networkDetails,\n          memo,\n        );\n        const xdr = transaction.build().toXDR();\n        setTransactionXdr(xdr);\n        await scanTx(xdr, url, networkDetails);\n      }\n      setLoading(false);\n    };\n    if (isToken || isSoroswap) {\n      scanSorobanTx();\n      return;\n    }\n    scanClassicTx();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const handleSorobanTransaction = async () => {\n    try {\n      const res = await dispatch(\n        signFreighterSorobanTransaction({\n          transactionXDR: transactionSimulation.preparedTransaction!,\n          network: networkDetails.networkPassphrase,\n        }),\n      );\n\n      if (\n        signFreighterSorobanTransaction.fulfilled.match(res) &&\n        res.payload.signedTransaction\n      ) {\n        const submitResp = await dispatch(\n          submitFreighterSorobanTransaction({\n            publicKey,\n            signedXDR: res.payload.signedTransaction,\n            networkDetails,\n          }),\n        );\n\n        if (submitFreighterSorobanTransaction.fulfilled.match(submitResp)) {\n          emitMetric(METRIC_NAMES.sendPaymentSuccess, {\n            sourceAsset: sourceAsset.code,\n          });\n\n          if (isSoroswap && destAsset.issuer) {\n            await dispatch(\n              addTokenId({\n                publicKey,\n                tokenId: destAsset.issuer,\n                network: networkDetails.network as Networks,\n              }),\n            );\n          }\n        }\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  const handlePaymentTransaction = async () => {\n    try {\n      if (isHardwareWallet) {\n        dispatch(\n          startHwSign({\n            transactionXDR: transactionXdr,\n            shouldSubmit: true,\n          }),\n        );\n        return;\n      }\n      const res = await dispatch(\n        signFreighterTransaction({\n          transactionXDR: transactionXdr,\n          network: networkDetails.networkPassphrase,\n        }),\n      );\n\n      if (\n        signFreighterTransaction.fulfilled.match(res) &&\n        res.payload.signedTransaction\n      ) {\n        const submitResp = await dispatch(\n          submitFreighterTransaction({\n            publicKey,\n            signedXDR: res.payload.signedTransaction,\n            networkDetails,\n          }),\n        );\n\n        if (submitFreighterTransaction.fulfilled.match(submitResp)) {\n          if (!isSwap) {\n            await dispatch(\n              addRecentAddress({ publicKey: federationAddress || destination }),\n            );\n          }\n          if (isPathPayment) {\n            emitMetric(METRIC_NAMES.sendPaymentPathPaymentSuccess, {\n              sourceAsset,\n              destAsset,\n              allowedSlippage,\n            });\n          } else {\n            emitMetric(METRIC_NAMES.sendPaymentSuccess, { sourceAsset });\n          }\n        }\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  // handles signing and submitting\n  const handleSend = async () => {\n    if (isToken || isSoroswap) {\n      await handleSorobanTransaction();\n    } else {\n      await handlePaymentTransaction();\n    }\n  };\n\n  const showMemo = !isSwap && !isMuxedAccount(destination);\n\n  const StellarExpertButton = () =>\n    !isCustomNetwork(networkDetails) && !isToken ? (\n      <Button\n        size=\"md\"\n        isFullWidth\n        variant=\"tertiary\"\n        onClick={() =>\n          openTab(\n            `${getStellarExpertUrl(networkDetails)}/tx/${transactionHash}`,\n          )\n        }\n      >\n        {t(\"View on\")} stellar.expert\n      </Button>\n    ) : null;\n\n  const renderPageTitle = (isSuccess: boolean) => {\n    if (isSuccess) {\n      return isSwap ? t(\"Swapped\") : `${t(\"Sent\")} ${sourceAsset.code}`;\n    }\n\n    return isSwap ? t(\"Confirm Swap\") : `${t(\"Confirm Send\")}`;\n  };\n\n  return (\n    <>\n      {hwStatus === ShowOverlayStatus.IN_PROGRESS && hardwareWalletType && (\n        <HardwareSign walletType={hardwareWalletType} />\n      )}\n      {isLoading ? (\n        <div className=\"TransactionDetails__loader\">\n          <Loader size=\"2rem\" />\n        </div>\n      ) : (\n        <React.Fragment>\n          {submission.submitStatus === ActionStatus.PENDING && (\n            <div className=\"TransactionDetails__processing\">\n              <div className=\"TransactionDetails__processing__header\">\n                <Loader />{\" \"}\n                <span>\n                  {t(\"Processing\")} {isSwap ? t(\"swap\") : t(\"transaction\")}\n                </span>\n              </div>\n              <div className=\"TransactionDetails__processing__copy\">\n                {t(\"Please don’t close this window\")}\n              </div>\n            </div>\n          )}\n          <SubviewHeader\n            title={renderPageTitle(\n              submission.submitStatus === ActionStatus.SUCCESS,\n            )}\n            customBackAction={goBack}\n            customBackIcon={\n              submission.submitStatus === ActionStatus.SUCCESS ? (\n                <Icon.XClose />\n              ) : null\n            }\n          />\n          <View.Content hasNoTopPadding>\n            {!(isPathPayment || isSwap) && (\n              <div className=\"TransactionDetails__cards\">\n                <Card>\n                  <AccountAssets\n                    assetIcons={assetIcons}\n                    sortedBalances={[\n                      {\n                        token: {\n                          issuer: { key: sourceAsset.issuer },\n                          code: sourceAsset.code,\n                          type: \"credit_alphanum4\",\n                        },\n                        total: new BigNumber(amount),\n                      } as AssetBalance,\n                    ]}\n                  />\n                </Card>\n              </div>\n            )}\n\n            {(isPathPayment || isSwap) && (\n              <TwoAssetCard\n                sourceAssetIcons={assetIcons}\n                sourceCanon={asset}\n                sourceAmount={amount}\n                destAssetIcons={destAssetIcons}\n                destCanon={destinationAsset || \"native\"}\n                destAmount={destinationAmount}\n                isSourceAssetSuspicious={isSourceAssetSuspicious}\n                isDestAssetSuspicious={isDestAssetSuspicious}\n              />\n            )}\n\n            {!isSwap && (\n              <div className=\"TransactionDetails__row\">\n                <div>{t(\"Sending to\")} </div>\n                <div className=\"TransactionDetails__row__right\">\n                  <div className=\"TransactionDetails__identicon\">\n                    <FedOrGAddress\n                      fedAddress={truncatedFedAddress(federationAddress)}\n                      gAddress={destination}\n                    />\n                  </div>\n                </div>\n              </div>\n            )}\n            {showMemo && (\n              <div className=\"TransactionDetails__row\">\n                <div>{t(\"Memo\")}</div>\n                <div className=\"TransactionDetails__row__right\">\n                  {memo || t(\"None\")}\n                </div>\n              </div>\n            )}\n\n            {(isPathPayment || isSwap) && (\n              <div className=\"TransactionDetails__row\">\n                <div>{t(\"Conversion rate\")} </div>\n                <div\n                  className=\"TransactionDetails__row__right\"\n                  data-testid=\"TransactionDetailsConversionRate\"\n                >\n                  1 {sourceAsset.code} /{\" \"}\n                  {getConversionRate(amount, destinationAmount).toFixed(2)}{\" \"}\n                  {destAsset.code}\n                </div>\n              </div>\n            )}\n            <div className=\"TransactionDetails__row\">\n              <div>{t(\"Transaction fee\")} </div>\n              <div\n                className=\"TransactionDetails__row__right\"\n                data-testid=\"TransactionDetailsTransactionFee\"\n              >\n                {transactionFee} XLM\n              </div>\n            </div>\n            {transactionSimulation.response && (\n              <>\n                <div className=\"TransactionDetails__row\">\n                  <div>{t(\"Resource cost\")} </div>\n                  <div className=\"TransactionDetails__row__right\">\n                    <div className=\"TransactionDetails__row__right__item\">\n                      {transactionSimulation.response.cost.cpuInsns} CPU\n                    </div>\n                    <div className=\"TransactionDetails__row__right__item\">\n                      {transactionSimulation.response.cost.memBytes} Bytes\n                    </div>\n                  </div>\n                </div>\n                <div className=\"TransactionDetails__row\">\n                  <div>{t(\"Minimum resource fee\")} </div>\n                  <div className=\"TransactionDetails__row__right\">\n                    {transactionSimulation.response.minResourceFee} XLM\n                  </div>\n                </div>\n              </>\n            )}\n            {isSwap && (\n              <div className=\"TransactionDetails__row\">\n                <div>{t(\"Minimum Received\")} </div>\n                <div\n                  className=\"TransactionDetails__row__right\"\n                  data-testid=\"TransactionDetailsMinimumReceived\"\n                >\n                  {computeDestMinWithSlippage(\n                    allowedSlippage,\n                    destinationAmount,\n                  ).toFixed()}{\" \"}\n                  {destAsset.code}\n                </div>\n              </div>\n            )}\n            {submission.submitStatus !== ActionStatus.SUCCESS ? (\n              <div className=\"TransactionDetails__row\">\n                <div>{t(\"XDR\")} </div>\n                <div\n                  className=\"TransactionDetails__row__right--hasOverflow\"\n                  data-testid=\"TransactionDetailsXDR\"\n                >\n                  <CopyText textToCopy={transactionXdr}>\n                    <>\n                      <div className=\"TransactionDetails__row__copy\">\n                        <Icon.Copy01 />\n                      </div>\n                      {`${transactionXdr.slice(0, 10)}…`}\n                    </>\n                  </CopyText>\n                </div>\n              </div>\n            ) : null}\n\n            <div className=\"TransactionDetails__warnings\">\n              {scanResult && (\n                <BlockaidTxScanLabel scanResult={scanResult} isPopup />\n              )}\n              {submission.submitStatus === ActionStatus.IDLE && (\n                <FlaggedWarningMessage\n                  isMemoRequired={isMemoRequired}\n                  blockaidData={\n                    (isSourceAssetSuspicious\n                      ? accountBalances.balances?.[asset]?.blockaidData\n                      : accountBalances.balances?.[destinationAsset]\n                          ?.blockaidData) || defaultBlockaidScanAssetResult\n                  }\n                  isSuspicious={\n                    isSourceAssetSuspicious || isDestAssetSuspicious\n                  }\n                />\n              )}\n            </div>\n          </View.Content>\n          <div className=\"TransactionDetails__bottom-wrapper__copy\">\n            {(isPathPayment || isSwap) &&\n              submission.submitStatus !== ActionStatus.SUCCESS &&\n              t(\"The final amount is approximate and may change\")}\n          </div>\n          <View.Footer isInline>\n            {submission.submitStatus === ActionStatus.SUCCESS ? (\n              <StellarExpertButton />\n            ) : (\n              <>\n                <Button\n                  size=\"md\"\n                  variant=\"secondary\"\n                  onClick={() => {\n                    dispatch(resetSimulation());\n                    navigateTo(ROUTES.account);\n                  }}\n                >\n                  {t(\"Cancel\")}\n                </Button>\n                <Button\n                  size=\"md\"\n                  variant={\n                    isSourceAssetSuspicious ||\n                    isDestAssetSuspicious ||\n                    (scanResult && isTxSuspicious(scanResult))\n                      ? \"error\"\n                      : \"primary\"\n                  }\n                  disabled={isSubmitDisabled}\n                  onClick={handleSend}\n                  isLoading={hwStatus === ShowOverlayStatus.IN_PROGRESS}\n                  data-testid=\"transaction-details-btn-send\"\n                >\n                  {isSwap ? t(\"Swap\") : t(\"Send\")}\n                </Button>\n              </>\n            )}\n          </View.Footer>\n        </React.Fragment>\n      )}\n    </>\n  );\n};\n","import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { ActionStatus } from \"@shared/api/types\";\n\nimport {\n  transactionSubmissionSelector,\n  resetSubmission,\n} from \"popup/ducks/transactionSubmission\";\nimport { ROUTES } from \"popup/constants/routes\";\nimport { navigateTo } from \"popup/helpers/navigate\";\n\nimport { SubmitFail, SubmitSuccess } from \"./SubmitResult\";\nimport { TransactionDetails } from \"./TransactionDetails\";\n\nimport \"../styles.scss\";\n\nexport const SendConfirm = ({ previous }: { previous: ROUTES }) => {\n  const dispatch = useDispatch();\n  const submission = useSelector(transactionSubmissionSelector);\n  const [isSendComplete, setIsSendComplete] = useState(false);\n\n  const render = () => {\n    if (isSendComplete) {\n      return (\n        <TransactionDetails\n          shouldScanTx={false}\n          goBack={() => {\n            dispatch(resetSubmission());\n            navigateTo(ROUTES.accountHistory);\n          }}\n        />\n      );\n    }\n    switch (submission.submitStatus) {\n      case ActionStatus.IDLE:\n        return (\n          <TransactionDetails\n            shouldScanTx={true}\n            goBack={() => navigateTo(previous)}\n          />\n        );\n      case ActionStatus.PENDING:\n        return (\n          <TransactionDetails\n            shouldScanTx={false}\n            goBack={() => navigateTo(previous)}\n          />\n        );\n      case ActionStatus.SUCCESS:\n        return <SubmitSuccess viewDetails={() => setIsSendComplete(true)} />;\n      case ActionStatus.ERROR:\n        return <SubmitFail />;\n      default:\n        return (\n          <TransactionDetails\n            shouldScanTx={false}\n            goBack={() => navigateTo(previous)}\n          />\n        );\n    }\n  };\n\n  return render();\n};\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { Formik, Form, Field, FieldProps } from \"formik\";\nimport { object as YupObject, number as YupNumber } from \"yup\";\nimport { Input, Icon, Button } from \"@stellar/design-system\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { navigateTo } from \"popup/helpers/navigate\";\nimport { ROUTES } from \"popup/constants/routes\";\nimport { FormRows } from \"popup/basics/Forms\";\nimport { InfoTooltip } from \"popup/basics/InfoTooltip\";\nimport { View } from \"popup/basics/layout/View\";\nimport { SubviewHeader } from \"popup/components/SubviewHeader\";\nimport {\n  saveTransactionTimeout,\n  transactionDataSelector,\n} from \"popup/ducks/transactionSubmission\";\n\nimport \"./styles.scss\";\n\nexport const SendSettingsTxTimeout = ({ previous }: { previous: ROUTES }) => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const { transactionTimeout } = useSelector(transactionDataSelector);\n\n  return (\n    <React.Fragment>\n      <SubviewHeader\n        title=\"Transaction Timeout\"\n        customBackAction={() => navigateTo(previous)}\n        customBackIcon={<Icon.XClose />}\n        rightButton={\n          <InfoTooltip\n            infoText={\n              <span>\n                {t(\n                  \"Number of seconds that can pass before this transaction can no longer be accepted by the network\",\n                )}{\" \"}\n              </span>\n            }\n            placement=\"bottom\"\n          >\n            <></>\n          </InfoTooltip>\n        }\n      />\n\n      <Formik\n        initialValues={{ transactionTimeout }}\n        onSubmit={(values) => {\n          dispatch(saveTransactionTimeout(values.transactionTimeout));\n          navigateTo(previous);\n        }}\n        validationSchema={YupObject().shape({\n          transactionTimeout: YupNumber().min(\n            0,\n            `${t(\"must be greater than\")} 0`,\n          ),\n        })}\n      >\n        {({ values, isValid, errors }) => (\n          <Form className=\"View__contentAndFooterWrapper\">\n            <View.Content hasNoTopPadding>\n              <FormRows>\n                <Field name=\"transactionTimeout\">\n                  {({ field }: FieldProps) => (\n                    <Input\n                      label=\"Timeout in seconds\"\n                      fieldSize=\"md\"\n                      id=\"transaction-timeout-input\"\n                      className=\"SendTo__input\"\n                      type=\"number\"\n                      {...field}\n                      error={errors.transactionTimeout}\n                    />\n                  )}\n                </Field>\n              </FormRows>\n            </View.Content>\n            <View.Footer>\n              <Button\n                size=\"md\"\n                isFullWidth\n                variant=\"secondary\"\n                disabled={!values.transactionTimeout || !isValid}\n                type=\"submit\"\n              >\n                {t(\"Done\")}\n              </Button>\n            </View.Footer>\n          </Form>\n        )}\n      </Formik>\n    </React.Fragment>\n  );\n};\n","import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Switch, Redirect } from \"react-router-dom\";\n\nimport { AppDispatch } from \"popup/App\";\nimport { PublicKeyRoute, VerifiedAccountRoute } from \"popup/Router\";\nimport { ROUTES } from \"popup/constants/routes\";\nimport { SendTo } from \"popup/components/sendPayment/SendTo\";\nimport { SendAmount } from \"popup/components/sendPayment/SendAmount\";\nimport { SendType } from \"popup/components/sendPayment/SendAmount/SendType\";\nimport { SendSettings } from \"popup/components/sendPayment/SendSettings\";\nimport { SendSettingsFee } from \"popup/components/sendPayment/SendSettings/TransactionFee\";\nimport { SendSettingsSlippage } from \"popup/components/sendPayment/SendSettings/Slippage\";\nimport { SendConfirm } from \"popup/components/sendPayment/SendConfirm\";\nimport { SendSettingsTxTimeout } from \"popup/components/sendPayment/SendSettings/TxTimeout\";\n\nimport {\n  getAccountBalances,\n  getAssetIcons,\n  transactionSubmissionSelector,\n} from \"popup/ducks/transactionSubmission\";\nimport { publicKeySelector } from \"popup/ducks/accountServices\";\nimport { settingsNetworkDetailsSelector } from \"popup/ducks/settings\";\n\nexport const SendPayment = () => {\n  const dispatch: AppDispatch = useDispatch();\n  const { accountBalances } = useSelector(transactionSubmissionSelector);\n  const publicKey = useSelector(publicKeySelector);\n  const networkDetails = useSelector(settingsNetworkDetailsSelector);\n\n  // load needed send payment data here in case didn't go to home screen first\n  useEffect(() => {\n    (async () => {\n      if (!accountBalances.balances) {\n        const res = await dispatch(\n          getAccountBalances({\n            publicKey,\n            networkDetails,\n          }),\n        );\n\n        if (getAccountBalances.fulfilled.match(res)) {\n          dispatch(\n            getAssetIcons({\n              balances: res.payload.balances,\n              networkDetails,\n            }),\n          );\n        }\n      }\n    })();\n  }, [dispatch, publicKey, networkDetails, accountBalances]);\n\n  return (\n    <Switch>\n      <PublicKeyRoute exact path={ROUTES.sendPayment}>\n        <Redirect to={ROUTES.sendPaymentTo} />\n      </PublicKeyRoute>\n      <PublicKeyRoute exact path={ROUTES.sendPaymentTo}>\n        <SendTo previous={ROUTES.account} />\n      </PublicKeyRoute>\n      <PublicKeyRoute exact path={ROUTES.sendPaymentAmount}>\n        <SendAmount\n          previous={ROUTES.sendPaymentTo}\n          next={ROUTES.sendPaymentSettings}\n        />\n      </PublicKeyRoute>\n      <PublicKeyRoute exact path={ROUTES.sendPaymentType}>\n        <SendType />\n      </PublicKeyRoute>\n      <PublicKeyRoute exact path={ROUTES.sendPaymentSettings}>\n        <SendSettings\n          previous={ROUTES.sendPaymentAmount}\n          next={ROUTES.sendPaymentConfirm}\n        />\n      </PublicKeyRoute>\n      <PublicKeyRoute exact path={ROUTES.sendPaymentSettingsFee}>\n        <SendSettingsFee previous={ROUTES.sendPaymentSettings} />\n      </PublicKeyRoute>\n      <PublicKeyRoute exact path={ROUTES.sendPaymentSettingsSlippage}>\n        <SendSettingsSlippage previous={ROUTES.sendPaymentSettings} />\n      </PublicKeyRoute>\n      <PublicKeyRoute exact path={ROUTES.sendPaymentSettingsTimeout}>\n        <SendSettingsTxTimeout previous={ROUTES.sendPaymentSettings} />\n      </PublicKeyRoute>\n      <VerifiedAccountRoute exact path={ROUTES.sendPaymentConfirm}>\n        <SendConfirm previous={ROUTES.sendPaymentSettings} />\n      </VerifiedAccountRoute>\n    </Switch>\n  );\n};\n","import { StrKey } from \"stellar-sdk\";\nimport { stellarSdkServer } from \"@shared/api/helpers/stellarSdkServer\";\n\nexport const getAssetDomain = async (\n  issuerKey: string,\n  networkUrl: string,\n  networkPassphrase: string,\n) => {\n  const server = stellarSdkServer(networkUrl, networkPassphrase);\n  if (StrKey.isValidEd25519PublicKey(issuerKey)) {\n    const acct = await server.loadAccount(issuerKey);\n\n    return acct.home_domain || \"\";\n  }\n\n  return \"\";\n};\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { AppDispatch } from \"popup/App\";\nimport {\n  transactionSubmissionSelector,\n  saveAsset,\n  saveDestinationAsset,\n  saveDestinationIcon,\n  saveIsToken,\n  AssetSelectType,\n  saveIsSoroswap,\n} from \"popup/ducks/transactionSubmission\";\nimport { AssetIcon } from \"popup/components/account/AccountAssets\";\nimport { ManageAssetCurrency } from \"popup/components/manageAssets/ManageAssetRows\";\nimport {\n  getCanonicalFromAsset,\n  formatDomain,\n  getAssetFromCanonical,\n} from \"helpers/stellar\";\nimport { getTokenBalance, isContractId } from \"popup/helpers/soroban\";\nimport { Balance, Balances, SorobanBalance } from \"@shared/api/types\";\nimport { formatAmount } from \"popup/helpers/formatters\";\nimport { useIsSoroswapEnabled, useIsSwap } from \"popup/helpers/useIsSwap\";\n\nimport \"./styles.scss\";\n\ninterface SelectAssetRowsProps {\n  assetRows: ManageAssetCurrency[];\n}\n\nexport const SelectAssetRows = ({ assetRows }: SelectAssetRowsProps) => {\n  const {\n    accountBalances: { balances = {} },\n    assetSelect,\n    soroswapTokens,\n    transactionData,\n  } = useSelector(transactionSubmissionSelector);\n  const dispatch: AppDispatch = useDispatch();\n  const history = useHistory();\n  const isSoroswapEnabled = useIsSoroswapEnabled();\n  const isSwap = useIsSwap();\n\n  const getAccountBalance = (canonical: string) => {\n    if (!balances) {\n      return \"\";\n    }\n    const bal: Balance = balances[canonical as keyof Balances];\n    if (bal) {\n      return bal.total.toString();\n    }\n    return \"\";\n  };\n\n  const getTokenBalanceFromCanonical = (canonical: string) => {\n    if (!balances) {\n      return \"\";\n    }\n    const bal: SorobanBalance = balances[canonical as keyof Balances];\n    if (bal) {\n      return getTokenBalance(bal);\n    }\n    return \"0\";\n  };\n\n  // hide balances for path pay dest asset\n  const hideBalances =\n    assetSelect.type === AssetSelectType.PATH_PAY &&\n    assetSelect.isSource === false;\n\n  return (\n    <div className=\"SelectAssetRows__scrollbar\">\n      <div className=\"SelectAssetRows__content\">\n        {assetRows.map(\n          ({\n            code = \"\",\n            domain,\n            image = \"\",\n            issuer = \"\",\n            icon,\n            isSuspicious,\n          }) => {\n            const isScamAsset = isSuspicious || false;\n            const isContract = isContractId(issuer);\n            const canonical = getCanonicalFromAsset(code, issuer);\n            let isSoroswap = false;\n\n            if (isSoroswapEnabled && isSwap) {\n              // check if either asset is a Soroswap token\n              const otherAsset = getAssetFromCanonical(\n                assetSelect.isSource\n                  ? transactionData.destinationAsset\n                  : transactionData.asset,\n              );\n              isSoroswap =\n                !!soroswapTokens.find(({ contract }) => contract === issuer) ||\n                !!soroswapTokens.find(\n                  ({ contract }) => contract === otherAsset.issuer,\n                );\n            }\n\n            return (\n              <div\n                className=\"SelectAssetRows__row selectable\"\n                data-testid={`Select-assets-row-${code}`}\n                key={canonical}\n                onClick={() => {\n                  if (assetSelect.isSource) {\n                    dispatch(saveAsset(canonical));\n                    dispatch(saveIsToken(isContract));\n                    history.goBack();\n                  } else {\n                    dispatch(saveDestinationAsset(canonical));\n                    dispatch(saveDestinationIcon(icon));\n                    history.goBack();\n                  }\n                  dispatch(saveIsSoroswap(isSoroswap));\n                }}\n              >\n                <AssetIcon\n                  assetIcons={code !== \"XLM\" ? { [canonical]: image } : {}}\n                  code={code}\n                  issuerKey={issuer}\n                  icon={icon}\n                  isSuspicious={isScamAsset}\n                />\n                <div className=\"SelectAssetRows__row__info\">\n                  <div className=\"SelectAssetRows__row__info__header\">\n                    {code}\n                  </div>\n                  <div className=\"SelectAssetRows__domain\">\n                    {formatDomain(domain)}\n                  </div>\n                </div>\n                {!hideBalances && (\n                  <div>\n                    {isContract\n                      ? getTokenBalanceFromCanonical(canonical)\n                      : formatAmount(getAccountBalance(canonical))}{\" \"}\n                    {code}\n                  </div>\n                )}\n              </div>\n            );\n          },\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { Button, Icon, Loader } from \"@stellar/design-system\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { ROUTES } from \"popup/constants/routes\";\nimport { sortBalances } from \"popup/helpers/account\";\nimport { useIsSoroswapEnabled, useIsSwap } from \"popup/helpers/useIsSwap\";\nimport {\n  transactionSubmissionSelector,\n  AssetSelectType,\n} from \"popup/ducks/transactionSubmission\";\nimport {\n  settingsNetworkDetailsSelector,\n  settingsSorobanSupportedSelector,\n} from \"popup/ducks/settings\";\nimport { SubviewHeader } from \"popup/components/SubviewHeader\";\nimport { View } from \"popup/basics/layout/View\";\nimport { getCanonicalFromAsset } from \"helpers/stellar\";\nimport { getAssetDomain } from \"popup/helpers/getAssetDomain\";\nimport { getNativeContractDetails } from \"popup/helpers/searchAsset\";\nimport { isAssetSuspicious } from \"popup/helpers/blockaid\";\n\nimport { Balances } from \"@shared/api/types\";\n\nimport { ManageAssetCurrency, ManageAssetRows } from \"../ManageAssetRows\";\nimport { SelectAssetRows } from \"../SelectAssetRows\";\n\nimport \"./styles.scss\";\n\ninterface ChooseAssetProps {\n  balances: Balances;\n}\n\nexport const ChooseAsset = ({ balances }: ChooseAssetProps) => {\n  const { t } = useTranslation();\n  const { assetIcons, assetSelect, soroswapTokens } = useSelector(\n    transactionSubmissionSelector,\n  );\n  const isSorobanSuported = useSelector(settingsSorobanSupportedSelector);\n  const networkDetails = useSelector(settingsNetworkDetailsSelector);\n\n  const [assetRows, setAssetRows] = useState([] as ManageAssetCurrency[]);\n  const ManageAssetRowsWrapperRef = useRef<HTMLDivElement>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const isSwap = useIsSwap();\n  const isSoroswapEnabled = useIsSoroswapEnabled();\n\n  const isManagingAssets = assetSelect.type === AssetSelectType.MANAGE;\n\n  useEffect(() => {\n    const fetchDomains = async () => {\n      setIsLoading(true);\n      const collection = [] as ManageAssetCurrency[];\n      const sortedBalances = sortBalances(balances);\n\n      // TODO: cache home domain when getting asset icon\n      // https://github.com/stellar/freighter/issues/410\n      // eslint-disable-next-line @typescript-eslint/prefer-for-of\n      for (let i = 0; i < sortedBalances.length; i += 1) {\n        if (sortedBalances[i].liquidityPoolId) {\n          // eslint-disable-next-line\n          continue;\n        }\n\n        const { token, contractId, blockaidData } = sortedBalances[i];\n\n        const code = token.code || \"\";\n        let issuer = {\n          key: \"\",\n        };\n\n        if (\"issuer\" in token) {\n          issuer = token.issuer;\n        }\n\n        // If we are in the swap flow and the asset has decimals (is a token), we skip it if Soroswap is not enabled\n        if (\"decimals\" in sortedBalances[i] && isSwap && !isSoroswapEnabled) {\n          // eslint-disable-next-line\n          continue;\n        }\n\n        if (code !== \"XLM\") {\n          let domain = \"\";\n\n          if (issuer.key) {\n            try {\n              // eslint-disable-next-line no-await-in-loop\n              domain = await getAssetDomain(\n                issuer.key,\n                networkDetails.networkUrl,\n                networkDetails.networkPassphrase,\n              );\n            } catch (e) {\n              console.error(e);\n            }\n          }\n\n          collection.push({\n            code,\n            issuer: issuer.key,\n            image: assetIcons[getCanonicalFromAsset(code, issuer.key)],\n            domain,\n            contract: contractId,\n            isSuspicious: isAssetSuspicious(blockaidData),\n          });\n          // include native asset for asset dropdown selection\n        } else if (!isManagingAssets) {\n          collection.push({\n            code,\n            issuer: \"\",\n            image: \"\",\n            domain: \"\",\n            isSuspicious: false,\n          });\n        }\n      }\n\n      if (isSoroswapEnabled && isSwap && !assetSelect.isSource) {\n        soroswapTokens.forEach((token) => {\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n          const canonical = getCanonicalFromAsset(token.code, token.contract);\n          const nativeContractDetails =\n            getNativeContractDetails(networkDetails);\n\n          // if we have a balance for a token, it will have been handled above.\n          // This is designed to populate tokens available from Soroswap that the user does not already have\n          if (\n            balances &&\n            !balances[canonical] &&\n            token.contract !== nativeContractDetails.contract\n          ) {\n            collection.push({\n              code: token.code,\n              issuer: token.contract,\n              image: token.icon,\n              domain: \"\",\n              icon: token.icon,\n            });\n          }\n        });\n      }\n\n      setAssetRows(collection);\n      setIsLoading(false);\n    };\n\n    fetchDomains();\n  }, [\n    assetIcons,\n    balances,\n    isManagingAssets,\n    isSorobanSuported,\n    isSwap,\n    isSoroswapEnabled,\n    assetSelect.isSource,\n    soroswapTokens,\n    networkDetails,\n  ]);\n\n  return (\n    <React.Fragment>\n      <SubviewHeader\n        title={t(\"Your assets\")}\n        customBackIcon={!isManagingAssets ? <Icon.XClose /> : undefined}\n      />\n      <View.Content hasNoTopPadding>\n        {isLoading ? (\n          <div className=\"ChooseAsset__loader\">\n            <Loader size=\"2rem\" />\n          </div>\n        ) : (\n          <div className=\"ChooseAsset__wrapper\">\n            {!assetRows.length ? (\n              <div className=\"ChooseAsset__empty\">\n                <p>\n                  You have no assets added. Get started by adding an asset\n                  below.\n                </p>\n              </div>\n            ) : (\n              <div\n                className={`ChooseAsset__assets${\n                  isManagingAssets && isSorobanSuported ? \"--short\" : \"\"\n                }`}\n                ref={ManageAssetRowsWrapperRef}\n              >\n                {isManagingAssets ? (\n                  <ManageAssetRows assetRows={assetRows} />\n                ) : (\n                  <SelectAssetRows assetRows={assetRows} />\n                )}\n              </div>\n            )}\n          </div>\n        )}\n      </View.Content>\n      {isManagingAssets && (\n        <View.Footer isInline allowWrap>\n          <div className=\"ChooseAsset__button\">\n            <Link to={ROUTES.searchAsset}>\n              <Button\n                size=\"md\"\n                isFullWidth\n                variant=\"tertiary\"\n                data-testid=\"ChooseAssetAddAssetButton\"\n              >\n                {t(\"Add an asset\")}\n              </Button>\n            </Link>\n          </div>\n        </View.Footer>\n      )}\n    </React.Fragment>\n  );\n};\n","import React from \"react\";\nimport { Icon, Input, Loader } from \"@stellar/design-system\";\n\nimport \"./styles.scss\";\n\ninterface SearchInputProps {\n  id: string;\n  placeholder: string;\n}\n\nexport const SearchInput = ({\n  id,\n  placeholder,\n  ...props\n}: SearchInputProps) => (\n  <div className=\"SearchInput\">\n    <Input\n      fieldSize=\"md\"\n      autoFocus\n      autoComplete=\"off\"\n      id={id}\n      rightElement={<Icon.SearchLg />}\n      placeholder={placeholder}\n      {...props}\n    />\n  </div>\n);\n\nexport const SearchCopy = ({ children }: { children: React.ReactNode }) => (\n  <div className=\"SearchCopy\">{children}</div>\n);\n\ninterface SearchResultsProps {\n  isSearching: boolean;\n  resultsRef: React.RefObject<HTMLDivElement>;\n  children: React.ReactNode;\n}\n\nexport const SearchResults = ({\n  isSearching,\n  resultsRef,\n  children,\n}: SearchResultsProps) => (\n  <div className=\"SearchResults\">\n    <div ref={resultsRef}>\n      {isSearching ? (\n        <div className=\"SearchResults__loader\">\n          <Loader />\n        </div>\n      ) : null}\n\n      {children}\n    </div>\n  </div>\n);\n","import React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport { Formik, Form, Field, FieldProps } from \"formik\";\nimport debounce from \"lodash/debounce\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { Button, Notification } from \"@stellar/design-system\";\nimport { isCustomNetwork } from \"@shared/helpers/stellar\";\nimport { INDEXER_URL } from \"@shared/constants/mercury\";\nimport { BlockAidScanAssetResult } from \"@shared/api/types\";\n\nimport { FormRows } from \"popup/basics/Forms\";\nimport { ROUTES } from \"popup/constants/routes\";\nimport { settingsNetworkDetailsSelector } from \"popup/ducks/settings\";\nimport { searchAsset } from \"popup/helpers/searchAsset\";\nimport { isMainnet } from \"helpers/stellar\";\nimport { isAssetSuspicious } from \"popup/helpers/blockaid\";\n\nimport { SubviewHeader } from \"popup/components/SubviewHeader\";\nimport { View } from \"popup/basics/layout/View\";\nimport { ManageAssetRows, ManageAssetCurrency } from \"../ManageAssetRows\";\nimport { SearchInput, SearchCopy, SearchResults } from \"../AssetResults\";\n\nimport \"./styles.scss\";\n\ninterface FormValues {\n  asset: string;\n}\nconst initialValues: FormValues = {\n  asset: \"\",\n};\n\nconst MAX_ASSETS_TO_SCAN = 10;\n\nconst ResultsHeader = () => {\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"SearchAsset__InfoBlock\">\n      <Notification variant=\"primary\" title={t(\"Multiple assets\")}>\n        <div>\n          {t(\n            \"Multiple assets have a similar code, please check the domain before adding.\",\n          )}\n          <div>\n            <a\n              href=\"https://developers.stellar.org/docs/issuing-assets/publishing-asset-info/\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              {t(\"Learn more about assets domains\")}\n            </a>\n          </div>\n        </div>\n      </Notification>\n    </div>\n  );\n};\n\nexport const SearchAsset = () => {\n  const { t } = useTranslation();\n  const networkDetails = useSelector(settingsNetworkDetailsSelector);\n  const [assetRows, setAssetRows] = useState([] as ManageAssetCurrency[]);\n  const [isSearching, setIsSearching] = useState(false);\n  const [hasNoResults, setHasNoResults] = useState(false);\n  const ResultsRef = useRef<HTMLDivElement>(null);\n\n  interface AssetRecord {\n    asset: string;\n    domain?: string;\n    tomlInfo?: { image: string };\n  }\n\n  /* eslint-disable react-hooks/exhaustive-deps */\n  const handleSearch = useCallback(\n    debounce(async ({ target: { value: asset } }) => {\n      if (!asset) {\n        setAssetRows([]);\n        return;\n      }\n      setIsSearching(true);\n\n      const resJson = await searchAsset({\n        asset,\n        networkDetails,\n        onError: (e) => {\n          console.error(e);\n          setIsSearching(false);\n          throw new Error(t(\"Unable to search for assets\"));\n        },\n      });\n\n      const assetRecords = resJson._embedded.records;\n\n      let blockaidScanResults: { [key: string]: BlockAidScanAssetResult } = {};\n\n      if (isMainnet(networkDetails)) {\n        // scan the first few assets to see if they are suspicious\n        // due to the length of time it takes to scan, we'll do it in consecutive chunks\n        const url = new URL(`${INDEXER_URL}/scan-asset-bulk`);\n        const firstSectionAssets = assetRecords.slice(0, MAX_ASSETS_TO_SCAN);\n        firstSectionAssets.forEach((record: AssetRecord) => {\n          const assetSplit = record.asset.split(\"-\");\n          if (assetSplit[0] && assetSplit[1]) {\n            url.searchParams.append(\n              \"asset_ids\",\n              `${assetSplit[0]}-${assetSplit[1]}`,\n            );\n          }\n        });\n\n        try {\n          const response = await fetch(url.href);\n          const data = await response.json();\n          blockaidScanResults = data.data.results;\n        } catch (e) {\n          console.error(e);\n        }\n      }\n\n      setIsSearching(false);\n\n      setAssetRows(\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        assetRecords\n          // only show records that have a domain and domains that don't have just whitespace\n          .filter(\n            (record: AssetRecord) => record.domain && /\\S/.test(record.domain),\n          )\n          .map((record: AssetRecord) => {\n            const assetSplit = record.asset.split(\"-\");\n            const assetId = `${assetSplit[0]}-${assetSplit[1]}`;\n            return {\n              code: assetSplit[0],\n              issuer: assetSplit[1],\n              image: record?.tomlInfo?.image,\n              domain: record.domain,\n              isSuspicious: blockaidScanResults[assetId]\n                ? isAssetSuspicious(blockaidScanResults[assetId])\n                : null,\n            };\n          }),\n      );\n    }, 500),\n    [],\n  );\n\n  useEffect(() => {\n    setHasNoResults(!assetRows.length);\n  }, [assetRows]);\n\n  useEffect(() => {\n    const firstNullSuspiciousIndex = assetRows.findIndex(\n      (r) => r.isSuspicious === null,\n    );\n\n    const fetchBlockaidResults = async (url: URL) => {\n      let blockaidScanResults: { [key: string]: BlockAidScanAssetResult } = {};\n      try {\n        const response = await fetch(url.href);\n        const data = await response.json();\n        blockaidScanResults = data.data.results;\n      } catch (e) {\n        console.error(e);\n      }\n\n      // take our scanned assets and update the assetRows with the new isSuspicious values\n      const assetRowsAddendum = assetRows\n        .slice(\n          firstNullSuspiciousIndex,\n          firstNullSuspiciousIndex + MAX_ASSETS_TO_SCAN,\n        )\n        .map((row) => {\n          const assetId = `${row.code}-${row.issuer}`;\n          return {\n            ...row,\n            isSuspicious: blockaidScanResults[assetId]\n              ? isAssetSuspicious(blockaidScanResults[assetId])\n              : row.isSuspicious,\n          };\n        });\n\n      // insert our newly scanned rows into the existing data\n      setAssetRows([\n        ...assetRows.slice(0, firstNullSuspiciousIndex),\n        ...assetRowsAddendum,\n        ...assetRows.slice(firstNullSuspiciousIndex + MAX_ASSETS_TO_SCAN),\n      ]);\n\n      return blockaidScanResults;\n    };\n\n    // if there are any assets with \"null\" (meaning we haven't scanned some assets yet), scan the next batch\n    if (\n      assetRows.length &&\n      isMainnet(networkDetails) &&\n      firstNullSuspiciousIndex !== -1\n    ) {\n      const url = new URL(`${INDEXER_URL}/scan-asset-bulk`);\n\n      // grab the next section of assets to scan\n      assetRows\n        .slice(\n          firstNullSuspiciousIndex,\n          firstNullSuspiciousIndex + MAX_ASSETS_TO_SCAN,\n        )\n        .forEach((row) => {\n          if (row.code && row.issuer && row.isSuspicious === null) {\n            url.searchParams.append(\"asset_ids\", `${row.code}-${row.issuer}`);\n          }\n        });\n\n      fetchBlockaidResults(url);\n    }\n  }, [assetRows, networkDetails]);\n\n  if (isCustomNetwork(networkDetails)) {\n    return <Redirect to={ROUTES.addAsset} />;\n  }\n\n  return (\n    <View>\n      <SubviewHeader title={t(\"Choose Asset\")} />\n      <View.Content\n        hasNoTopPadding\n        contentFooter={\n          <div>\n            <Link to={ROUTES.addAsset}>\n              <Button\n                size=\"md\"\n                isFullWidth\n                variant=\"secondary\"\n                data-testid=\"SearchAsset__add-manually\"\n              >\n                {t(\"Add manually\")}\n              </Button>\n            </Link>\n          </div>\n        }\n      >\n        {/* eslint-disable-next-line @typescript-eslint/no-empty-function */}\n        <Formik initialValues={initialValues} onSubmit={() => {}}>\n          {({ dirty }) => (\n            <Form\n              onChange={(e) => {\n                handleSearch(e);\n                setHasNoResults(false);\n              }}\n            >\n              <FormRows>\n                <div className=\"SearchAsset__search-input\">\n                  <Field name=\"asset\">\n                    {({ field }: FieldProps) => (\n                      <SearchInput\n                        id=\"asset\"\n                        placeholder={t(\"Search for asset name\")}\n                        {...field}\n                        data-testid=\"search-asset-input\"\n                      />\n                    )}\n                  </Field>\n                  <SearchCopy>\n                    {t(\"powered by\")}{\" \"}\n                    <a\n                      href=\"https://stellar.expert\"\n                      target=\"_blank\"\n                      rel=\"noreferrer\"\n                    >\n                      stellar.expert\n                    </a>\n                  </SearchCopy>\n                </div>\n                <SearchResults\n                  isSearching={isSearching}\n                  resultsRef={ResultsRef}\n                >\n                  {assetRows.length ? (\n                    <ManageAssetRows\n                      header={assetRows.length > 1 ? <ResultsHeader /> : null}\n                      assetRows={assetRows}\n                    />\n                  ) : null}\n                </SearchResults>\n                {dirty && hasNoResults ? (\n                  <div className=\"SearchAsset__copy\">\n                    {t(\n                      \"Can’t find the asset you’re looking for? Add it manually\",\n                    )}\n                  </div>\n                ) : null}\n              </FormRows>\n            </Form>\n          )}\n        </Formik>\n      </View.Content>\n    </View>\n  );\n};\n","import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Tooltip, Icon } from \"@stellar/design-system\";\n\nimport \"./styles.scss\";\n\nexport const AssetNotifcation = ({ isVerified }: { isVerified: boolean }) => {\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"AssetNotification\" data-testid=\"asset-notification\">\n      {isVerified ? t(\"On your lists\") : t(\"Not on your lists\")}\n      <Tooltip\n        placement=\"right\"\n        triggerEl={\n          <button className=\"AssetNotification__button\">\n            <Icon.InfoCircle className=\"AssetNotification__info\" />\n          </button>\n        }\n      >\n        {t(\n          \"Freighter uses asset lists to check assets you interact with. You can define your own assets lists in Settings.\",\n        )}\n      </Tooltip>\n    </div>\n  );\n};\n","/* eslint-disable @typescript-eslint/no-unsafe-argument */\nimport React, { useEffect, useCallback, useRef, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Networks, StellarToml, StrKey } from \"stellar-sdk\";\nimport { captureException } from \"@sentry/browser\";\nimport { Formik, Form, Field, FieldProps } from \"formik\";\nimport debounce from \"lodash/debounce\";\nimport { useTranslation } from \"react-i18next\";\nimport { getTokenDetails } from \"@shared/api/internal\";\nimport { stellarSdkServer } from \"@shared/api/helpers/stellarSdkServer\";\nimport { isSacContractExecutable } from \"@shared/helpers/soroban/token\";\n\nimport { FormRows } from \"popup/basics/Forms\";\n\nimport { publicKeySelector } from \"popup/ducks/accountServices\";\nimport {\n  settingsNetworkDetailsSelector,\n  settingsSelector,\n} from \"popup/ducks/settings\";\nimport { isMainnet, isTestnet } from \"helpers/stellar\";\nimport {\n  getVerifiedTokens,\n  getNativeContractDetails,\n  VerifiedTokenRecord,\n} from \"popup/helpers/searchAsset\";\nimport { isContractId } from \"popup/helpers/soroban\";\nimport {\n  isAssetSuspicious,\n  scanAsset,\n  scanAssetBulk,\n} from \"popup/helpers/blockaid\";\n\nimport { AssetNotifcation } from \"popup/components/AssetNotification\";\nimport { SubviewHeader } from \"popup/components/SubviewHeader\";\nimport { View } from \"popup/basics/layout/View\";\n\nimport { ManageAssetRows, ManageAssetCurrency } from \"../ManageAssetRows\";\nimport { SearchInput, SearchCopy, SearchResults } from \"../AssetResults\";\nimport \"./styles.scss\";\n\ninterface FormValues {\n  asset: string;\n}\nconst initialValues: FormValues = {\n  asset: \"\",\n};\n\ninterface AssetDomainToml {\n  CURRENCIES?: StellarToml.Api.Currency[];\n  DOCUMENTATION?: StellarToml.Api.Documentation;\n  NETWORK_PASSPHRASE?: string;\n}\n\nexport const AddAsset = () => {\n  const { t } = useTranslation();\n  const publicKey = useSelector(publicKeySelector);\n  const networkDetails = useSelector(settingsNetworkDetailsSelector);\n  const [assetRows, setAssetRows] = useState([] as ManageAssetCurrency[]);\n  const [isSearching, setIsSearching] = useState(false);\n  const [hasNoResults, setHasNoResults] = useState(false);\n  const [isVerifiedToken, setIsVerifiedToken] = useState(false);\n  const [isVerificationInfoShowing, setIsVerificationInfoShowing] =\n    useState(false);\n  const [verifiedLists, setVerifiedLists] = useState([] as string[]);\n  const { assetsLists } = useSelector(settingsSelector);\n\n  const ResultsRef = useRef<HTMLDivElement>(null);\n  const isAllowListVerificationEnabled =\n    isMainnet(networkDetails) || isTestnet(networkDetails);\n\n  const handleTokenLookup = async (contractId: string) => {\n    // clear the UI while we work through the flow\n    setIsSearching(true);\n    setIsVerifiedToken(false);\n    setIsVerificationInfoShowing(false);\n    setAssetRows([]);\n\n    const nativeContractDetails = getNativeContractDetails(networkDetails);\n    let verifiedTokens = [] as VerifiedTokenRecord[];\n\n    // step around verification for native contract and unverifiable networks\n\n    if (nativeContractDetails.contract === contractId) {\n      // override our rules for verification for XLM\n      setIsVerificationInfoShowing(false);\n      setAssetRows([\n        {\n          code: nativeContractDetails.code,\n          issuer: contractId,\n          domain: nativeContractDetails.domain,\n        },\n      ]);\n      setIsSearching(false);\n      return;\n    }\n\n    const tokenLookup = async () => {\n      // lookup contract\n      setIsVerifiedToken(false);\n      let tokenDetailsResponse;\n\n      try {\n        tokenDetailsResponse = await getTokenDetails({\n          contractId,\n          publicKey,\n          networkDetails,\n        });\n      } catch (e) {\n        setAssetRows([]);\n      }\n\n      const isSacContract = await isSacContractExecutable(\n        contractId,\n        networkDetails,\n      );\n\n      if (!tokenDetailsResponse) {\n        setAssetRows([]);\n      } else {\n        const issuer = isSacContract\n          ? tokenDetailsResponse.name.split(\":\")[1] || \"\"\n          : contractId; // get the issuer name, if applicable ,\n        const scannedAsset = await scanAsset(\n          `${tokenDetailsResponse.symbol}-${issuer}`,\n          networkDetails,\n        );\n        setAssetRows([\n          {\n            code: tokenDetailsResponse.symbol,\n            contract: contractId,\n            issuer,\n            domain: \"\",\n            name: tokenDetailsResponse.name,\n            isSuspicious: isAssetSuspicious(scannedAsset),\n          },\n        ]);\n      }\n    };\n\n    if (isAllowListVerificationEnabled) {\n      // usual binary case of a token being verified or unverified\n      verifiedTokens = await getVerifiedTokens({\n        networkDetails,\n        contractId,\n        assetsLists,\n      });\n\n      try {\n        if (verifiedTokens.length) {\n          setIsVerifiedToken(true);\n          setVerifiedLists(verifiedTokens[0].verifiedLists);\n          setAssetRows(\n            verifiedTokens.map((record: VerifiedTokenRecord) => ({\n              code: record.code || record.contract,\n              issuer: record.issuer || record.contract,\n              image: record.icon,\n              domain: record.domain,\n              contract: record.contract,\n            })),\n          );\n        } else {\n          // token not found on asset list, look up the details manually\n          await tokenLookup();\n        }\n      } catch (e) {\n        setAssetRows([]);\n        captureException(\n          `Failed to fetch token details - ${JSON.stringify(e)}`,\n        );\n        console.error(e);\n      }\n    } else {\n      // Futurenet token lookup\n      await tokenLookup();\n    }\n    setIsSearching(false);\n    setIsVerificationInfoShowing(isAllowListVerificationEnabled);\n  };\n\n  const handleIssuerLookup = async (issuer: string) => {\n    let assetDomainToml = {} as AssetDomainToml;\n    const server = stellarSdkServer(\n      networkDetails.networkUrl,\n      networkDetails.networkPassphrase,\n    );\n    const acct = await server.loadAccount(issuer);\n    const homeDomain = acct.home_domain || \"\";\n\n    setIsSearching(true);\n\n    try {\n      assetDomainToml = await StellarToml.Resolver.resolve(homeDomain);\n    } catch (e) {\n      console.error(e);\n    }\n\n    if (!assetDomainToml.CURRENCIES) {\n      setAssetRows([]);\n    } else {\n      const { networkPassphrase } = networkDetails;\n\n      // check toml file for network passphrase\n      const tomlNetworkPassphrase =\n        assetDomainToml.NETWORK_PASSPHRASE || Networks.PUBLIC;\n\n      type AssetRecord = StellarToml.Api.Currency & {\n        domain: string;\n      };\n\n      if (tomlNetworkPassphrase === networkPassphrase) {\n        const assetsToScan: string[] = [];\n        const assetRecords: AssetRecord[] = [];\n        assetDomainToml.CURRENCIES.forEach((currency) => {\n          assetRecords.push({ ...currency, domain: homeDomain });\n          assetsToScan.push(`${currency.code}-${currency.issuer}`);\n        });\n        const scannedAssets = await scanAssetBulk(assetsToScan, networkDetails);\n        const scannedAssetRows = assetRecords.map((record: AssetRecord) => ({\n          ...record,\n          isSuspicious: isAssetSuspicious(\n            scannedAssets.results[`${record.code}-${record.issuer}`],\n          ),\n        }));\n\n        setAssetRows(scannedAssetRows);\n        // no need for verification on classic assets\n        setIsVerificationInfoShowing(false);\n      } else {\n        // otherwise, discount all found results\n        setAssetRows([]);\n      }\n    }\n    setIsSearching(false);\n  };\n\n  /* eslint-disable react-hooks/exhaustive-deps */\n  const handleSearch = useCallback(\n    debounce(async ({ target: { value: contractId } }) => {\n      if (isContractId(contractId)) {\n        await handleTokenLookup(contractId);\n      } else if (StrKey.isValidEd25519PublicKey(contractId)) {\n        await handleIssuerLookup(contractId);\n      } else {\n        setAssetRows([]);\n      }\n    }, 500),\n    [],\n  );\n\n  useEffect(() => {\n    setHasNoResults(!assetRows.length);\n  }, [assetRows]);\n\n  useEffect(() => {\n    setIsVerificationInfoShowing(isAllowListVerificationEnabled);\n  }, [isAllowListVerificationEnabled]);\n\n  return (\n    // eslint-disable-next-line\n    <Formik initialValues={initialValues} onSubmit={() => {}}>\n      {({ dirty }) => (\n        <Form\n          onChange={(e) => {\n            handleSearch(e);\n            setHasNoResults(false);\n          }}\n        >\n          <View>\n            <SubviewHeader title={t(\"Add by address\")} />\n            <View.Content hasNoTopPadding>\n              <FormRows>\n                <div>\n                  <Field name=\"asset\">\n                    {({ field }: FieldProps) => (\n                      <SearchInput\n                        id=\"asset\"\n                        placeholder={t(\n                          \"Enter issuer public key or contract ID\",\n                        )}\n                        {...field}\n                        data-testid=\"search-token-input\"\n                      />\n                    )}\n                  </Field>\n                  <SearchCopy>\n                    {t(\n                      \"Search issuer public key, classic assets, SAC assets, and TI assets\",\n                    )}\n                  </SearchCopy>\n                </div>\n                <SearchResults\n                  isSearching={isSearching}\n                  resultsRef={ResultsRef}\n                >\n                  {assetRows.length && isVerificationInfoShowing ? (\n                    <AssetNotifcation isVerified={isVerifiedToken} />\n                  ) : null}\n\n                  {assetRows.length ? (\n                    <ManageAssetRows\n                      header={null}\n                      assetRows={assetRows}\n                      isVerifiedToken={isVerifiedToken}\n                      isVerificationInfoShowing={isVerificationInfoShowing}\n                      verifiedLists={verifiedLists}\n                    />\n                  ) : null}\n                  {hasNoResults && dirty && !isSearching ? (\n                    <div className=\"AddAsset__not-found\">\n                      {t(\"Asset not found\")}\n                    </div>\n                  ) : null}\n                </SearchResults>\n              </FormRows>\n            </View.Content>\n          </View>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n/* eslint-enable @typescript-eslint/no-unsafe-argument */\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Redirect, Route, Switch } from \"react-router-dom\";\n\nimport {\n  transactionSubmissionSelector,\n  AssetSelectType,\n} from \"popup/ducks/transactionSubmission\";\nimport { ChooseAsset } from \"popup/components/manageAssets/ChooseAsset\";\nimport { SearchAsset } from \"popup/components/manageAssets/SearchAsset\";\nimport { AddAsset } from \"popup/components/manageAssets/AddAsset\";\nimport { PrivateKeyRoute } from \"popup/Router\";\nimport { ROUTES } from \"popup/constants/routes\";\n\nexport const ManageAssets = () => {\n  const { accountBalances, destinationBalances, assetSelect } = useSelector(\n    transactionSubmissionSelector,\n  );\n\n  let balances;\n  // path payment destAsset is the only time we use recipient trustlines\n  if (\n    assetSelect.type === AssetSelectType.PATH_PAY &&\n    assetSelect.isSource === false\n  ) {\n    balances = destinationBalances.balances;\n  } else {\n    balances = accountBalances.balances;\n  }\n\n  if (!balances) {\n    return (\n      <Redirect\n        to={{\n          pathname: ROUTES.account,\n        }}\n      />\n    );\n  }\n\n  return (\n    <>\n      <Switch>\n        <PrivateKeyRoute exact path={ROUTES.manageAssets}>\n          <ChooseAsset balances={balances} />\n        </PrivateKeyRoute>\n        <PrivateKeyRoute exact path={ROUTES.searchAsset}>\n          <SearchAsset />\n        </PrivateKeyRoute>\n        <Route exact path={ROUTES.addAsset}>\n          <AddAsset />\n        </Route>\n      </Switch>\n    </>\n  );\n};\n","import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Switch, Redirect } from \"react-router-dom\";\n\nimport { AppDispatch } from \"popup/App\";\nimport { PublicKeyRoute, VerifiedAccountRoute } from \"popup/Router\";\nimport { ROUTES } from \"popup/constants/routes\";\nimport { SendAmount } from \"popup/components/sendPayment/SendAmount\";\nimport { SendSettings } from \"popup/components/sendPayment/SendSettings\";\nimport { SendSettingsFee } from \"popup/components/sendPayment/SendSettings/TransactionFee\";\nimport { SendSettingsSlippage } from \"popup/components/sendPayment/SendSettings/Slippage\";\nimport { SendConfirm } from \"popup/components/sendPayment/SendConfirm\";\nimport {\n  getAccountBalances,\n  getAssetIcons,\n  transactionSubmissionSelector,\n} from \"popup/ducks/transactionSubmission\";\nimport { publicKeySelector } from \"popup/ducks/accountServices\";\nimport { settingsNetworkDetailsSelector } from \"popup/ducks/settings\";\nimport { SendSettingsTxTimeout } from \"popup/components/sendPayment/SendSettings/TxTimeout\";\n\nexport const Swap = () => {\n  const dispatch: AppDispatch = useDispatch();\n  const { accountBalances } = useSelector(transactionSubmissionSelector);\n  const publicKey = useSelector(publicKeySelector);\n  const networkDetails = useSelector(settingsNetworkDetailsSelector);\n\n  // load needed swap data here in case didn't go to home screen first\n  useEffect(() => {\n    (async () => {\n      if (!accountBalances.balances) {\n        const res = await dispatch(\n          getAccountBalances({\n            publicKey,\n            networkDetails,\n          }),\n        );\n\n        if (getAccountBalances.fulfilled.match(res)) {\n          dispatch(\n            getAssetIcons({\n              balances: res.payload.balances,\n              networkDetails,\n            }),\n          );\n        }\n      }\n    })();\n  }, [dispatch, publicKey, networkDetails, accountBalances]);\n\n  return (\n    <Switch>\n      <PublicKeyRoute exact path={ROUTES.swap}>\n        <Redirect to={ROUTES.swapAmount} />\n      </PublicKeyRoute>\n      <PublicKeyRoute exact path={ROUTES.swapAmount}>\n        <SendAmount previous={ROUTES.account} next={ROUTES.swapSettings} />\n      </PublicKeyRoute>\n      <PublicKeyRoute exact path={ROUTES.swapSettings}>\n        <SendSettings previous={ROUTES.swapAmount} next={ROUTES.swapConfirm} />\n      </PublicKeyRoute>\n      <PublicKeyRoute exact path={ROUTES.swapSettingsFee}>\n        <SendSettingsFee previous={ROUTES.swapSettings} />\n      </PublicKeyRoute>\n      <PublicKeyRoute exact path={ROUTES.swapSettingsSlippage}>\n        <SendSettingsSlippage previous={ROUTES.swapSettings} />\n      </PublicKeyRoute>\n      <PublicKeyRoute exact path={ROUTES.swapSettingsTimeout}>\n        <SendSettingsTxTimeout previous={ROUTES.swapSettings} />\n      </PublicKeyRoute>\n      <VerifiedAccountRoute exact path={ROUTES.swapConfirm}>\n        <SendConfirm previous={ROUTES.swapSettings} />\n      </VerifiedAccountRoute>\n    </Switch>\n  );\n};\n","import React from \"react\";\nimport { Button } from \"@stellar/design-system\";\n\ninterface PillButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  disabled?: boolean;\n  isLoading?: boolean;\n  children: React.ReactNode;\n}\n\nexport const PillButton = ({\n  children,\n  disabled,\n  isLoading,\n  ...props\n}: PillButtonProps) => (\n  <div className=\"PillButton\">\n    <Button\n      size=\"md\"\n      disabled={disabled}\n      isLoading={isLoading}\n      variant=\"secondary\"\n      {...props}\n    >\n      {children}\n    </Button>\n  </div>\n);\n","import React from \"react\";\nimport { Notification } from \"@stellar/design-system\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { LoadingBackground } from \"popup/basics/LoadingBackground\";\n\nimport \"./styles.scss\";\n\ninterface NetworkModalProps {\n  children: React.ReactElement;\n  buttonComponent: React.ReactElement;\n  isConfirmation?: boolean;\n}\n\nexport const NetworkModal = ({\n  children,\n  buttonComponent,\n  isConfirmation,\n}: NetworkModalProps) => {\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"NetworkModal\">\n      <LoadingBackground isActive />\n      <div className=\"NetworkModal__content\">\n        <Notification\n          variant={isConfirmation ? \"warning\" : \"error\"}\n          title={t(\"Network\")}\n        >\n          {children}\n        </Notification>\n        <div className=\"NetworkModal__button-row\">{buttonComponent}</div>\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Button, Checkbox, Input } from \"@stellar/design-system\";\nimport { useTranslation } from \"react-i18next\";\nimport { Field, FieldProps, Form, Formik } from \"formik\";\nimport { object as YupObject, string as YupString } from \"yup\";\nimport { useHistory, useLocation } from \"react-router-dom\";\n\nimport { NETWORKS } from \"@shared/constants/stellar\";\nimport { CUSTOM_NETWORK } from \"@shared/helpers/stellar\";\n\nimport { AppDispatch } from \"popup/App\";\nimport { PillButton } from \"popup/basics/buttons/PillButton\";\nimport { View } from \"popup/basics/layout/View\";\nimport { ROUTES } from \"popup/constants/routes\";\n\nimport { navigateTo } from \"popup/helpers/navigate\";\nimport { isNetworkUrlValid as isNetworkUrlValidHelper } from \"popup/helpers/account\";\nimport { isActiveNetwork } from \"helpers/stellar\";\n\nimport {\n  addCustomNetwork,\n  changeNetwork,\n  clearSettingsError,\n  editCustomNetwork,\n  removeCustomNetwork,\n  settingsErrorSelector,\n  settingsNetworkDetailsSelector,\n  settingsNetworksListSelector,\n} from \"popup/ducks/settings\";\n\nimport { SubviewHeader } from \"popup/components/SubviewHeader\";\n\nimport { NetworkModal } from \"../NetworkModal\";\n\nimport \"./styles.scss\";\n\ninterface FormValues {\n  networkName: string;\n  networkPassphrase: string;\n  networkUrl: string;\n  sorobanRpcUrl?: string;\n  isSwitchSelected?: boolean;\n  isAllowHttpSelected: boolean;\n  friendbotUrl?: string;\n}\n\ninterface NetworkFormProps {\n  isEditing: boolean;\n}\n\nexport const NETWORK_INDEX_SEARCH_PARAM = \"networkIndex\";\n\nexport const NetworkForm = ({ isEditing }: NetworkFormProps) => {\n  const { t } = useTranslation();\n  const dispatch: AppDispatch = useDispatch();\n  const networkDetails = useSelector(settingsNetworkDetailsSelector);\n  const networksList = useSelector(settingsNetworksListSelector);\n  const settingsError = useSelector(settingsErrorSelector);\n\n  const [isNetworkInUse, setIsNetworkInUse] = useState(false);\n  const [isConfirmingRemoval, setIsConfirmingRemoval] = useState(false);\n  const [isNetworkUrlValid, setIsNetworkUrlValid] = useState(false);\n  const [invalidUrl, setInvalidUrl] = useState(\"\");\n  const history = useHistory();\n  const { search } = useLocation();\n\n  const networkIndex = Number(\n    new URLSearchParams(search).get(NETWORK_INDEX_SEARCH_PARAM),\n  );\n  const networkDetailsToEdit = networksList[networkIndex];\n  const isCurrentNetworkActive = isActiveNetwork(\n    networkDetailsToEdit,\n    networkDetails,\n  );\n  const isEditingDefaultNetworks =\n    isEditing && (networkIndex === 0 || networkIndex === 1);\n\n  const initialValues: FormValues = isEditing\n    ? {\n        ...networkDetailsToEdit,\n        isSwitchSelected: false,\n        isAllowHttpSelected:\n          !networkDetailsToEdit?.networkUrl.includes(\"https\"),\n      }\n    : {\n        networkName: \"\",\n        networkPassphrase: \"\",\n        networkUrl: \"\",\n        sorobanRpcUrl: \"\",\n        friendbotUrl: \"\",\n        isSwitchSelected: false,\n        isAllowHttpSelected: false,\n      };\n\n  const NetworkFormSchema = YupObject().shape({\n    networkName: YupString().required(),\n    networkPassphrase: YupString().required(),\n    networkUrl: YupString().required(),\n    sorobanRpcUrl: YupString(),\n  });\n\n  const handleRemoveNetwork = async () => {\n    const res = await dispatch(\n      removeCustomNetwork({\n        networkName: networkDetailsToEdit.networkName,\n      }),\n    );\n\n    if (removeCustomNetwork.fulfilled.match(res)) {\n      navigateTo(ROUTES.account);\n    }\n  };\n\n  const showNetworkUrlInvalidModal = (networkUrl: string) => {\n    setIsNetworkUrlValid(true);\n    setInvalidUrl(networkUrl);\n  };\n\n  const getCustomNetworkDetailsFromFormValues = (values: FormValues) => {\n    const {\n      friendbotUrl,\n      networkName,\n      networkUrl,\n      networkPassphrase,\n      sorobanRpcUrl,\n    } = values;\n\n    return {\n      friendbotUrl,\n      network: CUSTOM_NETWORK,\n      networkName,\n      networkUrl,\n      networkPassphrase,\n      sorobanRpcUrl,\n    };\n  };\n\n  const handleEditNetwork = async (values: FormValues) => {\n    if (\n      !isNetworkUrlValidHelper(values.networkUrl, values.isAllowHttpSelected)\n    ) {\n      showNetworkUrlInvalidModal(values.networkUrl);\n      return;\n    }\n\n    const res = await dispatch(\n      editCustomNetwork({\n        networkDetails: getCustomNetworkDetailsFromFormValues(values),\n        networkIndex,\n      }),\n    );\n    if (editCustomNetwork.fulfilled.match(res)) {\n      navigateTo(ROUTES.account);\n    }\n  };\n\n  const handleAddNetwork = async (values: FormValues) => {\n    if (\n      !isNetworkUrlValidHelper(values.networkUrl, values.isAllowHttpSelected)\n    ) {\n      showNetworkUrlInvalidModal(values.networkUrl);\n      return;\n    }\n\n    const addCustomNetworkRes = await dispatch(\n      addCustomNetwork({\n        networkDetails: getCustomNetworkDetailsFromFormValues(values),\n      }),\n    );\n\n    const addCustomNetworkFulfilled =\n      addCustomNetwork.fulfilled.match(addCustomNetworkRes);\n    let changeNetworkFulfilled = true;\n\n    if (values.isSwitchSelected) {\n      changeNetworkFulfilled = false;\n\n      const changeNetworkRes = await dispatch(\n        changeNetwork({\n          networkName: values.networkName,\n        }),\n      );\n      changeNetworkFulfilled = changeNetwork.fulfilled.match(changeNetworkRes);\n    }\n\n    if (addCustomNetworkFulfilled && changeNetworkFulfilled) {\n      clearSettingsError();\n      history.goBack();\n    }\n  };\n\n  const handleSubmit = async (values: FormValues) => {\n    if (isEditing) {\n      await handleEditNetwork(values);\n    } else {\n      await handleAddNetwork(values);\n    }\n  };\n\n  const CloseModalButton = () => (\n    <Button\n      size=\"md\"\n      type=\"button\"\n      isFullWidth\n      variant=\"tertiary\"\n      onClick={() => {\n        setIsNetworkInUse(false);\n        setIsNetworkUrlValid(false);\n      }}\n    >\n      {t(\"Got it\")}\n    </Button>\n  );\n\n  const ConfirmRemovalButtons = () => (\n    <div className=\"NetworkForm__removal-buttons\">\n      <Button\n        size=\"md\"\n        isFullWidth\n        type=\"button\"\n        variant=\"secondary\"\n        onClick={() => setIsConfirmingRemoval(false)}\n      >\n        {t(\"Cancel\")}\n      </Button>\n      <div className=\"NetworkForm__remove-button\">\n        <Button\n          size=\"md\"\n          isFullWidth\n          variant=\"primary\"\n          type=\"button\"\n          onClick={() => {\n            handleRemoveNetwork();\n          }}\n        >\n          {t(\"Remove\")}\n        </Button>\n      </div>\n    </div>\n  );\n\n  interface EditingButtonsProps {\n    isValid: boolean;\n    isSubmitting: boolean;\n  }\n\n  const EditingButtons = ({ isValid, isSubmitting }: EditingButtonsProps) =>\n    !isEditingDefaultNetworks ? (\n      <div className=\"NetworkForm__editing-buttons\">\n        <Button\n          size=\"md\"\n          onClick={() => history.goBack()}\n          type=\"button\"\n          variant=\"secondary\"\n          isFullWidth\n        >\n          {t(\"Cancel\")}\n        </Button>\n        <Button\n          size=\"md\"\n          variant=\"primary\"\n          disabled={!isValid}\n          isLoading={isSubmitting}\n          isFullWidth\n          type=\"submit\"\n        >\n          {t(\"Save\")}\n        </Button>\n      </div>\n    ) : null;\n\n  return (\n    <React.Fragment>\n      <SubviewHeader\n        title={!isEditing ? t(\"Add Custom Network\") : t(\"Network Details\")}\n      />\n      <Formik\n        onSubmit={handleSubmit}\n        initialValues={initialValues}\n        validationSchema={NetworkFormSchema}\n      >\n        {({ dirty, errors, isSubmitting, isValid, touched }) => (\n          <Form className=\"View__contentAndFooterWrapper\">\n            <View.Content hasNoTopPadding>\n              <div className=\"NetworkForm__form\">\n                {isNetworkInUse ? (\n                  <NetworkModal buttonComponent={<CloseModalButton />}>\n                    <div>\n                      <div className=\"NetworkForm__modal__title\">\n                        {t(\"Network is in use\")}\n                      </div>\n                      <div className=\"NetworkForm__modal__body\">\n                        {t(\n                          \"Please select a different network before removing it.\",\n                        )}\n                      </div>\n                    </div>\n                  </NetworkModal>\n                ) : null}\n                {isConfirmingRemoval ? (\n                  <NetworkModal\n                    isConfirmation\n                    buttonComponent={<ConfirmRemovalButtons />}\n                  >\n                    <div>\n                      <div className=\"NetworkForm__modal__title\">\n                        {t(\"Confirm removing Network\")}\n                      </div>\n                      <div className=\"NetworkForm__modal__body\">\n                        {t(\n                          \"Are you sure you want to remove this network? You will have to re-add it if you want to use it again.\",\n                        )}\n                      </div>\n                    </div>\n                  </NetworkModal>\n                ) : null}\n                {isNetworkUrlValid ? (\n                  <NetworkModal buttonComponent={<CloseModalButton />}>\n                    <div>\n                      <div className=\"NetworkForm__modal__title\">\n                        {t(\"CONNECTION ERROR\")}\n                      </div>\n                      <div className=\"NetworkForm__modal__body\">\n                        {t(\"Unable to connect to\")} <em>{invalidUrl}</em>\n                      </div>\n                      <div className=\"NetworkForm__modal__body\">\n                        {t(\n                          \"Please check if the network information is correct and try again. Alternatively, this network may not be operational.\",\n                        )}{\" \"}\n                      </div>\n                    </div>\n                  </NetworkModal>\n                ) : null}\n\n                <Input\n                  data-testid=\"NetworkForm__networkName\"\n                  fieldSize=\"md\"\n                  disabled={isEditingDefaultNetworks}\n                  id=\"networkName\"\n                  autoComplete=\"off\"\n                  error={\n                    settingsError ||\n                    (errors.networkName && touched.networkName\n                      ? errors.networkName\n                      : \"\")\n                  }\n                  customInput={<Field />}\n                  label={t(\"Name\")}\n                  name=\"networkName\"\n                  placeholder={t(\"Enter network name\")}\n                />\n                <Input\n                  data-testid=\"NetworkForm__networkUrl\"\n                  fieldSize=\"md\"\n                  disabled={isEditingDefaultNetworks}\n                  id=\"networkUrl\"\n                  autoComplete=\"off\"\n                  error={\n                    errors.networkUrl && touched.networkUrl\n                      ? errors.networkUrl\n                      : \"\"\n                  }\n                  customInput={<Field />}\n                  label={t(\"HORIZON RPC URL\")}\n                  name=\"networkUrl\"\n                  placeholder={t(\"Enter network URL\")}\n                />\n                {!isEditingDefaultNetworks ||\n                networkDetailsToEdit.network !== NETWORKS.PUBLIC ? (\n                  <Input\n                    data-testid=\"NetworkForm__sorobanRpcUrl\"\n                    fieldSize=\"md\"\n                    disabled={isEditingDefaultNetworks}\n                    id=\"sorobanRpcUrl\"\n                    autoComplete=\"off\"\n                    error={\n                      errors.sorobanRpcUrl && touched.sorobanRpcUrl\n                        ? errors.sorobanRpcUrl\n                        : \"\"\n                    }\n                    customInput={<Field />}\n                    label={t(\"SOROBAN RPC URL\")}\n                    name=\"sorobanRpcUrl\"\n                    placeholder={t(\"Enter Soroban RPC URL\")}\n                  />\n                ) : null}\n                <Input\n                  data-testid=\"NetworkForm__networkPassphrase\"\n                  fieldSize=\"md\"\n                  disabled={isEditingDefaultNetworks}\n                  id=\"networkPassphrase\"\n                  autoComplete=\"off\"\n                  error={\n                    errors.networkPassphrase && touched.networkPassphrase\n                      ? errors.networkPassphrase\n                      : \"\"\n                  }\n                  customInput={<Field />}\n                  label={t(\"Passphrase\")}\n                  name=\"networkPassphrase\"\n                  placeholder={t(\"Enter passphrase\")}\n                />\n                <Input\n                  fieldSize=\"md\"\n                  disabled={isEditingDefaultNetworks}\n                  id=\"friendbotUrl\"\n                  autoComplete=\"off\"\n                  error={\n                    errors.friendbotUrl && touched.friendbotUrl\n                      ? errors.friendbotUrl\n                      : \"\"\n                  }\n                  customInput={<Field />}\n                  label={t(\"Friendbot URL\")}\n                  name=\"friendbotUrl\"\n                  placeholder={t(\"Enter Friendbot URL\")}\n                />\n                {!isEditingDefaultNetworks ? (\n                  <Field name=\"isAllowHttpSelected\">\n                    {({ field }: FieldProps) => (\n                      <Checkbox\n                        fieldSize=\"md\"\n                        checked={field.value}\n                        id=\"isAllowHttpSelected-input\"\n                        error={\n                          errors.isAllowHttpSelected &&\n                          touched.isAllowHttpSelected\n                            ? errors.isAllowHttpSelected\n                            : null\n                        }\n                        label={t(\"Allow connecting to non-HTTPS networks\")}\n                        {...field}\n                      />\n                    )}\n                  </Field>\n                ) : null}\n\n                {isEditing ? (\n                  <div className=\"NetworkForm__remove-wrapper\">\n                    {!isEditingDefaultNetworks && (\n                      <PillButton\n                        type=\"button\"\n                        onClick={() => {\n                          if (isCurrentNetworkActive) {\n                            setIsNetworkInUse(true);\n                          } else {\n                            setIsConfirmingRemoval(true);\n                          }\n                        }}\n                      >\n                        {t(\"Remove\")}\n                      </PillButton>\n                    )}\n                  </div>\n                ) : (\n                  <Field name=\"isSwitchSelected\">\n                    {({ field }: FieldProps) => (\n                      <Checkbox\n                        fieldSize=\"md\"\n                        autoComplete=\"off\"\n                        id=\"isSwitchSelected-input\"\n                        error={\n                          errors.isSwitchSelected && touched.isSwitchSelected\n                            ? errors.isSwitchSelected\n                            : null\n                        }\n                        label={t(\"Switch to this network\")}\n                        {...field}\n                      />\n                    )}\n                  </Field>\n                )}\n              </div>\n            </View.Content>\n            <View.Footer\n              style={{ display: isEditingDefaultNetworks ? \"none\" : \"block\" }}\n              isInline\n            >\n              {isEditing ? (\n                <EditingButtons isValid={isValid} isSubmitting={isSubmitting} />\n              ) : (\n                <div className=\"NetworkForm__add-button\">\n                  <Button\n                    data-testid=\"NetworkForm__add\"\n                    size=\"md\"\n                    variant=\"primary\"\n                    disabled={!(isValid && dirty)}\n                    isFullWidth\n                    isLoading={isSubmitting}\n                    type=\"submit\"\n                  >\n                    {t(\"Add network\")}\n                  </Button>\n                </div>\n              )}\n            </View.Footer>\n          </Form>\n        )}\n      </Formik>\n    </React.Fragment>\n  );\n};\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useTranslation } from \"react-i18next\";\nimport { Button } from \"@stellar/design-system\";\n\nimport { ROUTES } from \"popup/constants/routes\";\nimport { ListNavLink, ListNavLinkWrapper } from \"popup/basics/ListNavLink\";\n\nimport { isActiveNetwork } from \"helpers/stellar\";\nimport { navigateTo } from \"popup/helpers/navigate\";\n\nimport {\n  settingsNetworkDetailsSelector,\n  settingsNetworksListSelector,\n} from \"popup/ducks/settings\";\nimport { SubviewHeader } from \"popup/components/SubviewHeader\";\nimport { NetworkIcon } from \"popup/components/manageNetwork/NetworkIcon\";\nimport { View } from \"popup/basics/layout/View\";\n\nimport { NETWORK_INDEX_SEARCH_PARAM } from \"../NetworkForm\";\n\nimport \"./styles.scss\";\n\nexport const NetworkSettings = () => {\n  const networksList = useSelector(settingsNetworksListSelector);\n  const activeNetworkDetails = useSelector(settingsNetworkDetailsSelector);\n  const { t } = useTranslation();\n\n  return (\n    <React.Fragment>\n      <SubviewHeader title={t(\"Network Settings\")} />\n      <View.Content hasNoTopPadding>\n        <div className=\"NetworkSettings__header\">{t(\"Network\")}</div>\n        <div className=\"NetworkSettings__scrollbar\">\n          <ListNavLinkWrapper>\n            {networksList.map((network, i) => {\n              const isActive = isActiveNetwork(activeNetworkDetails, network);\n\n              return (\n                <ListNavLink\n                  key={network.networkName}\n                  href={ROUTES.editNetwork}\n                  searchParams={`?${NETWORK_INDEX_SEARCH_PARAM}=${i}`}\n                >\n                  <div key={network.networkName}>\n                    <div\n                      className={`NetworkSettings__name ${\n                        isActive ? \"NetworkSettings__name--active\" : \"\"\n                      }`}\n                    >\n                      {isActive ? (\n                        <div className=\"NetworkSettings__active-marker\"></div>\n                      ) : null}\n                      <NetworkIcon index={i} />\n                      <div>{network.networkName}</div>\n                    </div>\n                    <div className=\"NetworkSettings__url\">\n                      {network.networkUrl}\n                    </div>\n                  </div>\n                </ListNavLink>\n              );\n            })}\n          </ListNavLinkWrapper>\n        </div>\n      </View.Content>\n      <View.Footer>\n        <Button\n          size=\"md\"\n          variant=\"secondary\"\n          onClick={() => navigateTo(ROUTES.addNetwork)}\n        >\n          {t(\"Add custom network\")}\n        </Button>\n      </View.Footer>\n    </React.Fragment>\n  );\n};\n","import React from \"react\";\nimport { Switch } from \"react-router-dom\";\n\nimport { PublicKeyRoute } from \"popup/Router\";\nimport { ROUTES } from \"popup/constants/routes\";\n\nimport { NetworkForm } from \"popup/components/manageNetwork/NetworkForm\";\nimport { NetworkSettings } from \"popup/components/manageNetwork/NetworkSettings\";\n\nexport const ManageNetwork = () => (\n  <Switch>\n    <PublicKeyRoute exact path={ROUTES.addNetwork}>\n      <NetworkForm isEditing={false} />\n    </PublicKeyRoute>\n    <PublicKeyRoute exact path={ROUTES.networkSettings}>\n      <NetworkSettings />\n    </PublicKeyRoute>\n    <PublicKeyRoute exact path={ROUTES.editNetwork}>\n      <NetworkForm isEditing />\n    </PublicKeyRoute>\n  </Switch>\n);\n","import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Icon } from \"@stellar/design-system\";\n\nimport { SubviewHeader } from \"popup/components/SubviewHeader\";\nimport { View } from \"popup/basics/layout/View\";\nimport { ListNavLink, ListNavLinkWrapper } from \"popup/basics/ListNavLink\";\n\nimport \"./styles.scss\";\n\nexport const LeaveFeedback = () => {\n  const { t } = useTranslation();\n\n  return (\n    <React.Fragment>\n      <SubviewHeader title=\"Leave Feedback\" />\n      <View.Content hasNoTopPadding>\n        <ListNavLinkWrapper>\n          <ListNavLink\n            icon={<Icon.Link01 />}\n            href=\"https://discord.com/channels/897514728459468821/1019346446014759013\"\n          >\n            {t(\"Join community Discord\")}\n          </ListNavLink>\n          <ListNavLink\n            icon={<Icon.Link01 />}\n            href=\"https://github.com/stellar/freighter/issues\"\n          >\n            {t(\"Report issue on Github\")}\n          </ListNavLink>\n        </ListNavLinkWrapper>\n      </View.Content>\n    </React.Fragment>\n  );\n};\n","import React from \"react\";\nimport { Heading, Text } from \"@stellar/design-system\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { IdenticonImg } from \"popup/components/identicons/IdenticonImg\";\nimport { truncatedPublicKey } from \"helpers/stellar\";\n\nimport \"./styles.scss\";\n\ninterface MigrationBasicProps {\n  children: React.ReactNode;\n}\n\nexport const MigrationHeader = ({ children }: MigrationBasicProps) => (\n  <div className=\"MigrationHeader\">\n    <Heading as=\"h1\" size=\"xl\">\n      {children}\n    </Heading>\n  </div>\n);\n\ntype MigrationBodyProps = MigrationBasicProps & {\n  hasWarning?: boolean;\n};\n\nexport const MigrationBody = ({ children, hasWarning }: MigrationBodyProps) => (\n  <div\n    className={`MigrationBody  ${hasWarning ? \"MigrationBody--warning\" : \"\"}`}\n  >\n    {children}\n  </div>\n);\n\nexport const MigrationParagraph = ({ children }: MigrationBasicProps) => (\n  <Text as=\"p\" size=\"md\" className=\"MigrationParagraph\">\n    {children}\n  </Text>\n);\n\nexport const MigrationButton = ({ children }: MigrationBasicProps) => (\n  <Text as=\"p\" size=\"md\" className=\"MigrationButton\">\n    {children}\n  </Text>\n);\n\nexport const MigrationReviewHeader = ({ children }: MigrationBasicProps) => (\n  <header className=\"MigrationReviewHeader\">{children}</header>\n);\n\ntype MigrationReviewListSectionProps = MigrationBasicProps & {\n  isUnfunded?: boolean;\n};\n\nexport const MigrationReviewListSection = ({\n  children,\n  isUnfunded,\n}: MigrationReviewListSectionProps) => (\n  <section\n    className={`MigrationReviewListSection ${\n      isUnfunded ? \"MigrationReviewListSection--unfunded\" : \"\"\n    }`}\n  >\n    {children}\n  </section>\n);\n\nexport const MigrationReviewAccountRow = ({\n  children,\n}: MigrationBasicProps) => (\n  <div className=\"MigrationReviewAccountRow\">{children}</div>\n);\n\nexport const MigrationReviewDetailRow = ({ children }: MigrationBasicProps) => (\n  <div className=\"MigrationReviewDetailRow\">{children}</div>\n);\n\ninterface MigrationReviewHighlightProps {\n  text: string;\n}\n\nexport const MigrationReviewHighlight = ({\n  text,\n}: MigrationReviewHighlightProps) => (\n  <span className=\"MigrationReviewHighlight\">{text}</span>\n);\n\ninterface MigrationReviewDescriptionProps {\n  description: string;\n  highlight: string;\n}\n\nexport const MigrationReviewDescription = ({\n  description,\n  highlight,\n}: MigrationReviewDescriptionProps) => {\n  const { t } = useTranslation();\n  return (\n    <section className=\"MigrationReviewDescription\">\n      {t(description)}:{\" \"}\n      <MigrationReviewHighlight text={`${highlight} ${t(\"XLM\")}`} />\n    </section>\n  );\n};\n\nexport const MigrationReviewListHeader = ({\n  children,\n}: MigrationBasicProps) => (\n  <div className=\"MigrationReviewListHeader\">{children}</div>\n);\n\nexport const MigrationReviewAccountInfo = ({\n  publicKey,\n  name,\n  isDisabled,\n}: {\n  publicKey: string;\n  name: string;\n  isDisabled?: boolean;\n}) => (\n  <div\n    className={`MigrationReviewAccountInfo ${\n      isDisabled ? \"MigrationReviewAccountInfo--isDisabled\" : \"\"\n    }`}\n  >\n    <div className=\"MigrationReviewAccountInfo__identicon-wrapper\">\n      <IdenticonImg publicKey={publicKey} />\n    </div>\n    <div className=\"MigrationReviewAccountInfo__text\">\n      <div className=\"MigrationReviewAccountInfo__name\">{name}</div>\n      <div className=\"MigrationReviewAccountInfo__public-key\">\n        ({truncatedPublicKey(publicKey)})\n      </div>\n    </div>\n  </div>\n);\n\nexport const MigrationReviewBadge = ({ children }: MigrationBasicProps) => (\n  <div className=\"MigrationReviewBadge\">{children}</div>\n);\n","import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Button, Notification } from \"@stellar/design-system\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { ROUTES } from \"popup/constants/routes\";\nimport { navigateTo } from \"popup/helpers/navigate\";\nimport { changeNetwork } from \"popup/ducks/settings\";\nimport { NETWORK_NAMES } from \"@shared/constants/stellar\";\n\nimport {\n  MigrationHeader,\n  MigrationBody,\n  MigrationParagraph,\n  MigrationButton,\n} from \"../basics\";\n\nimport \"./styles.scss\";\n\nexport const MigrationStart = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const [isConfirmed, setIsConfirmed] = useState(false);\n\n  const handleContinue = async () => {\n    // eslint-disable-next-line\n    await dispatch(changeNetwork({ networkName: NETWORK_NAMES.PUBNET }));\n    navigateTo(ROUTES.accountMigrationReviewMigration);\n  };\n\n  return isConfirmed ? (\n    <div className=\"MigrationStart\">\n      <MigrationHeader>\n        {t(\"Make sure you have your 12 word backup phrase\")}\n      </MigrationHeader>\n      <MigrationBody hasWarning>\n        <MigrationParagraph>\n          {t(\n            \"At the end of this process, Freighter will only display accounts related to the new backup phrase. You’ll still be able to import your current backup phrase into Freighter and control current accounts as long as they were not merged into the new accounts.\",\n          )}\n        </MigrationParagraph>\n        <Notification title=\"Important, Please Read\" variant=\"warning\">\n          {t(\n            \"Make sure you have your current 12 words backup phrase before continuing.\",\n          )}\n        </Notification>\n      </MigrationBody>\n      <MigrationButton>\n        <Button onClick={handleContinue} size=\"md\" variant=\"secondary\">\n          {t(\"Continue\")}\n        </Button>\n      </MigrationButton>\n    </div>\n  ) : (\n    <div className=\"AccountMigrationStart\">\n      <MigrationHeader>{t(\"Account Migration\")}</MigrationHeader>\n      <MigrationBody>\n        <MigrationParagraph>\n          {t(\n            \"In this process, Freighter will create a new backup phrase for you and migrate your lumens, trustlines, and assets to the new account.\",\n          )}\n        </MigrationParagraph>\n        <MigrationParagraph>\n          {t(\n            \"You can choose to merge your current account into the new accounts after the migration, which will effectively destroy your current account. Merging is optional and will allow you to send your current account’s funding lumens to the new accounts.\",\n          )}\n        </MigrationParagraph>\n      </MigrationBody>\n      <MigrationButton>\n        <Button\n          size=\"md\"\n          variant=\"secondary\"\n          onClick={() => setIsConfirmed(true)}\n        >\n          {t(\"Continue\")}\n        </Button>\n      </MigrationButton>\n    </div>\n  );\n};\n","import { BigNumber } from \"bignumber.js\";\n\nexport const getMigrationFeeAmount = ({\n  recommendedFee,\n  trustlineBalancesLength,\n  isMergeSelected,\n}: {\n  recommendedFee: string;\n\n  trustlineBalancesLength: number;\n  isMergeSelected: boolean;\n}) => {\n  /* the number of operations needs to complete the migration:\n - 1 op to send the balance. This is always required\n - For trustline balance(s), 1 op each to send them\n - If we're merging, 1 op each to remove trustlines\n - Plus one more tx to merge\n */\n  const opCount =\n    1 +\n    (trustlineBalancesLength * (isMergeSelected ? 2 : 1) || 0) +\n    (isMergeSelected ? 1 : 0);\n\n  return new BigNumber(recommendedFee).times(opCount);\n};\n\nexport const calculateSenderMinBalance = ({\n  minBalance,\n  recommendedFee,\n  trustlineBalancesLength,\n  isMergeSelected,\n}: {\n  minBalance: string;\n  recommendedFee: string;\n  trustlineBalancesLength: number;\n  isMergeSelected: boolean;\n}) =>\n  new BigNumber(minBalance).plus(\n    getMigrationFeeAmount({\n      recommendedFee,\n      trustlineBalancesLength,\n      isMergeSelected,\n    }),\n  );\n","import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Badge, Button, Checkbox, Loader } from \"@stellar/design-system\";\nimport { Horizon } from \"stellar-sdk\";\nimport { getAccountInfo, getMigratableAccounts } from \"@shared/api/internal\";\nimport { BalanceToMigrate } from \"@shared/api/types\";\nimport { useTranslation } from \"react-i18next\";\nimport { BigNumber } from \"bignumber.js\";\nimport { Field, FieldProps, Form, Formik, useFormikContext } from \"formik\";\nimport { object as YupObject, boolean as YupBoolean } from \"yup\";\n\nimport { ROUTES } from \"popup/constants/routes\";\nimport { BASE_RESERVE } from \"@shared/constants/stellar\";\nimport {\n  calculateSenderMinBalance,\n  getMigrationFeeAmount,\n} from \"@shared/helpers/migration\";\n\nimport { settingsNetworkDetailsSelector } from \"popup/ducks/settings\";\nimport {\n  saveBalancesToMigrate,\n  saveIsMergeSelected,\n} from \"popup/ducks/transactionSubmission\";\nimport { useNetworkFees } from \"popup/helpers/useNetworkFees\";\n\nimport { navigateTo } from \"popup/helpers/navigate\";\n\nimport {\n  MigrationHeader,\n  MigrationButton,\n  MigrationParagraph,\n  MigrationReviewHeader,\n  MigrationReviewListSection,\n  MigrationReviewListHeader,\n  MigrationReviewHighlight,\n  MigrationReviewDetailRow,\n  MigrationReviewDescription,\n  MigrationReviewAccountInfo,\n  MigrationReviewBadge,\n} from \"../basics\";\n\nimport \"./styles.scss\";\n\ntype AccountToMigrate = {\n  publicKey: string;\n  name: string;\n  trustlines: number;\n  dataEntries: number;\n  xlmBalance: string;\n  trustlineBalances: Horizon.HorizonApi.BalanceLine[];\n  isSigner: boolean;\n  minBalance: string;\n  keyIdIndex: number;\n};\n\ninterface FormValues {\n  isMergeSelected: boolean;\n}\n\nconst isReadyToMigrate = ({\n  xlmBalance,\n  dataEntries,\n  isSigner,\n  minBalance,\n  recommendedFee,\n  trustlineBalancesLength,\n  isMergeSelected,\n}: {\n  xlmBalance: string;\n  dataEntries: number;\n  isSigner: boolean;\n  minBalance: string;\n  recommendedFee: string;\n  trustlineBalancesLength: number;\n  isMergeSelected: boolean;\n}) =>\n  Boolean(\n    xlmBalance &&\n      !dataEntries &&\n      !isSigner &&\n      calculateSenderMinBalance({\n        minBalance,\n        recommendedFee,\n        trustlineBalancesLength,\n        isMergeSelected,\n      }) < new BigNumber(xlmBalance).minus(minBalance),\n  );\n\ntype AccountListItemRow = AccountToMigrate & { isReadyToMigrate: boolean };\n\nconst AccountListItems = ({\n  accountList,\n  setIsSubmitDisabled,\n}: {\n  accountList: AccountToMigrate[];\n  setIsSubmitDisabled: (isSubmitDisabled: boolean) => void;\n}) => {\n  const { t } = useTranslation();\n  const { recommendedFee } = useNetworkFees();\n  const formik = useFormikContext<FormValues>();\n  const [accountListItems, setAccountListItems] = useState(\n    [] as AccountListItemRow[],\n  );\n\n  const { isMergeSelected } = formik.values;\n\n  useEffect(() => {\n    const acctListItems: AccountListItemRow[] = [];\n    if (!recommendedFee) {\n      return;\n    }\n    accountList.forEach((acct) => {\n      const acctIsReadyToMigrate = isReadyToMigrate({\n        xlmBalance: acct.xlmBalance,\n        dataEntries: acct.dataEntries,\n        isSigner: acct.isSigner,\n        minBalance: acct.minBalance,\n        recommendedFee,\n        trustlineBalancesLength: acct.trustlineBalances.length,\n        isMergeSelected,\n      });\n\n      if (!acctIsReadyToMigrate) {\n        setIsSubmitDisabled(true);\n      }\n\n      acctListItems.push({\n        ...acct,\n        isReadyToMigrate: acctIsReadyToMigrate,\n      });\n    });\n\n    setAccountListItems(acctListItems);\n  }, [accountList, isMergeSelected, recommendedFee, setIsSubmitDisabled]);\n\n  return accountListItems.length ? (\n    <>\n      {accountListItems.map((acct) => (\n        <MigrationReviewListSection\n          isUnfunded={!acct.xlmBalance}\n          key={acct.publicKey}\n        >\n          {acct.xlmBalance ? (\n            <>\n              <div>\n                <MigrationReviewListHeader>\n                  <MigrationReviewAccountInfo\n                    publicKey={acct.publicKey}\n                    name={acct.name}\n                  />\n                </MigrationReviewListHeader>\n                <MigrationReviewDetailRow>\n                  <div>\n                    {acct.trustlines} {t(\"trustlines\")}\n                  </div>\n                </MigrationReviewDetailRow>\n                <MigrationReviewDetailRow>\n                  <div>\n                    {acct.dataEntries} {t(\"data entries\")}\n                  </div>\n                </MigrationReviewDetailRow>\n                <MigrationReviewDetailRow>\n                  <div>\n                    {acct.isSigner ? t(\"Signs for external accounts\") : \"\"}\n                  </div>\n                </MigrationReviewDetailRow>\n              </div>\n\n              <div>\n                <MigrationReviewListHeader>\n                  <MigrationReviewBadge>\n                    {acct.isReadyToMigrate ? (\n                      <Badge>{t(\"Ready to migrate\")}</Badge>\n                    ) : (\n                      <Badge variant=\"warning\">{t(\"Unable to migrate\")}</Badge>\n                    )}\n                  </MigrationReviewBadge>\n                </MigrationReviewListHeader>\n\n                <MigrationReviewDescription\n                  description=\"XLM balance\"\n                  highlight={acct.xlmBalance}\n                />\n                <MigrationReviewDescription\n                  description=\"Minimum XLM needed\"\n                  highlight={new BigNumber(acct.minBalance)\n                    .times(2)\n                    .plus(\n                      getMigrationFeeAmount({\n                        recommendedFee,\n                        trustlineBalancesLength: acct.trustlineBalances.length,\n                        isMergeSelected,\n                      }).toString(),\n                    )\n                    .toString()}\n                />\n                <MigrationReviewDescription\n                  description=\"Cost to migrate\"\n                  highlight={getMigrationFeeAmount({\n                    recommendedFee,\n                    trustlineBalancesLength: acct.trustlineBalances.length,\n                    isMergeSelected,\n                  }).toString()}\n                />\n              </div>\n            </>\n          ) : (\n            <>\n              <MigrationReviewListHeader>\n                <MigrationReviewAccountInfo\n                  publicKey={acct.publicKey}\n                  name={acct.name}\n                />\n              </MigrationReviewListHeader>\n              <MigrationReviewListHeader>\n                <MigrationReviewBadge>\n                  <Badge variant=\"warning\">{t(\"Not funded\")}</Badge>\n                </MigrationReviewBadge>\n              </MigrationReviewListHeader>\n            </>\n          )}\n        </MigrationReviewListSection>\n      ))}\n    </>\n  ) : (\n    <div className=\"ReviewMigration__loader\">\n      <Loader />\n    </div>\n  );\n};\n\nexport const ReviewMigration = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const networkDetails = useSelector(settingsNetworkDetailsSelector);\n  const [accountToMigrateList, setAccountToMigrateList] = useState(\n    [] as AccountToMigrate[],\n  );\n  const [isSubmitDisabled, setIsSubmitDisabled] = useState(false);\n  const { recommendedFee } = useNetworkFees();\n\n  useEffect(() => {\n    const acctItemArr: AccountToMigrate[] = [];\n    let hasUnmigratableAccount = false;\n\n    const fetchAccountData = async () => {\n      const { migratableAccounts } = await getMigratableAccounts();\n\n      if (!migratableAccounts || !recommendedFee) {\n        hasUnmigratableAccount = true;\n        return;\n      }\n\n      // eslint-disable-next-line\n      for (let i = 0; i < migratableAccounts.length; i++) {\n        const publicKey = migratableAccounts[i].publicKey;\n\n        // eslint-disable-next-line no-await-in-loop\n        const { account, isSigner } = await getAccountInfo({\n          publicKey,\n          networkDetails,\n        });\n\n        const DEFAULT_ACCT_ITEM = {\n          publicKey,\n          name: migratableAccounts[i].name,\n          trustlines: 0,\n          dataEntries: 0,\n          xlmBalance: \"\",\n          trustlineBalances: [] as Horizon.HorizonApi.BalanceLine[],\n          isSigner,\n          minBalance: \"\",\n          keyIdIndex: migratableAccounts[i].keyIdIndex,\n        };\n\n        let acctItem = {\n          ...DEFAULT_ACCT_ITEM,\n        };\n\n        if (account) {\n          const minBalance = new BigNumber(\n            (2 + account.subentry_count) * BASE_RESERVE,\n          ).toString();\n\n          const xlmBalance =\n            account.balances[account.balances.length - 1].balance;\n          const dataEntries = Object.keys(account.data_attr).length;\n          const trustlineBalances = account.balances.filter(\n            ({ asset_type: assetType }) => assetType !== \"native\",\n          );\n\n          acctItem = {\n            ...DEFAULT_ACCT_ITEM,\n            trustlines: account.balances.length - 1,\n            dataEntries,\n            xlmBalance,\n            trustlineBalances,\n            minBalance,\n          };\n        } else {\n          hasUnmigratableAccount = true;\n        }\n\n        acctItemArr.push(acctItem);\n      }\n\n      setAccountToMigrateList(acctItemArr);\n      setIsSubmitDisabled(hasUnmigratableAccount);\n    };\n\n    fetchAccountData();\n  }, [networkDetails, recommendedFee]);\n\n  const handleSubmit = (values: FormValues) => {\n    const migratableBalances: BalanceToMigrate[] = [];\n    accountToMigrateList.forEach(\n      ({\n        publicKey,\n        name,\n        minBalance,\n        xlmBalance,\n        trustlineBalances,\n        keyIdIndex,\n      }) => {\n        migratableBalances.push({\n          publicKey,\n          name,\n          minBalance,\n          xlmBalance,\n          trustlineBalances,\n          keyIdIndex,\n        });\n      },\n    );\n    dispatch(saveBalancesToMigrate(migratableBalances));\n    dispatch(saveIsMergeSelected(values.isMergeSelected));\n    navigateTo(ROUTES.accountMigrationMnemonicPhrase);\n  };\n\n  const initialValues: FormValues = {\n    isMergeSelected: false,\n  };\n\n  const ReviewMigrationFormSchema = YupObject().shape({\n    isMergeSelected: YupBoolean(),\n  });\n\n  return (\n    <div className=\"ReviewMigration\">\n      <MigrationReviewHeader>\n        <MigrationHeader>{t(\"Review accounts to migrate\")}</MigrationHeader>\n        <MigrationParagraph>\n          {t(\"Only accounts ready for migration will be migrated.\")}\n        </MigrationParagraph>\n      </MigrationReviewHeader>\n      <Formik\n        onSubmit={handleSubmit}\n        initialValues={initialValues}\n        validationSchema={ReviewMigrationFormSchema}\n      >\n        {({ isSubmitting }) => (\n          <>\n            <AccountListItems\n              accountList={accountToMigrateList}\n              setIsSubmitDisabled={setIsSubmitDisabled}\n            />\n            <Form className=\"NetworkForm__form\">\n              <div className=\"ReviewMigration__option\">\n                <Field name=\"isMergeSelected\">\n                  {({ field }: FieldProps) => (\n                    <Checkbox\n                      fieldSize=\"md\"\n                      autoComplete=\"off\"\n                      id=\"isMergeSelected-input\"\n                      label={\n                        <div>\n                          <MigrationReviewHighlight\n                            text={`${t(\"Optional\")}: `}\n                          />\n                          {t(\n                            \"Merge accounts after migrating (your funding lumens used to fund the current accounts will be sent to the new ones - you lose access to the current accounts.)\",\n                          )}\n                        </div>\n                      }\n                      {...field}\n                    />\n                  )}\n                </Field>\n              </div>\n              <MigrationButton>\n                <Button\n                  disabled={isSubmitDisabled}\n                  size=\"md\"\n                  variant=\"secondary\"\n                  isLoading={isSubmitting}\n                  type=\"submit\"\n                >\n                  {t(\"Continue\")}\n                </Button>\n              </MigrationButton>\n            </Form>\n          </>\n        )}\n      </Formik>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\n\nimport { getMigratedMnemonicPhrase } from \"@shared/api/internal\";\n\nimport { ConfirmMnemonicPhrase } from \"popup/components/mnemonicPhrase/ConfirmMnemonicPhrase\";\nimport { DisplayMnemonicPhrase } from \"popup/components/mnemonicPhrase/DisplayMnemonicPhrase\";\nimport { Onboarding } from \"popup/components/Onboarding\";\n\nimport \"./styles.scss\";\n\nexport const MnemonicPhrase = () => {\n  const [isConfirmed, setIsConfirmed] = useState(false);\n  const [mnemonicPhrase, setMnemonicPhrase] = useState(\"\");\n\n  useEffect(() => {\n    const fetchMnemonicPhrase = async () => {\n      const { mnemonicPhrase: migratedMnemonicPhrase } =\n        await getMigratedMnemonicPhrase();\n\n      setMnemonicPhrase(migratedMnemonicPhrase);\n    };\n    fetchMnemonicPhrase();\n  }, []);\n\n  return isConfirmed ? (\n    <Onboarding layout=\"full\" customWidth=\"31rem\">\n      <div className=\"MigrationMnemonicPhrase\">\n        <ConfirmMnemonicPhrase isMigration mnemonicPhrase={mnemonicPhrase} />\n      </div>\n    </Onboarding>\n  ) : (\n    <Onboarding layout=\"full\">\n      <div className=\"MigrationMnemonicPhrase--display\">\n        <DisplayMnemonicPhrase\n          mnemonicPhrase={mnemonicPhrase}\n          setIsConfirmed={setIsConfirmed}\n        />\n      </div>\n    </Onboarding>\n  );\n};\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  Button,\n  Heading,\n  Notification,\n  Loader,\n  Text,\n} from \"@stellar/design-system\";\nimport { useTranslation } from \"react-i18next\";\nimport { Formik, Form } from \"formik\";\n\nimport { ROUTES } from \"popup/constants/routes\";\nimport { AppDispatch } from \"popup/App\";\nimport { navigateTo } from \"popup/helpers/navigate\";\nimport { useNetworkFees } from \"popup/helpers/useNetworkFees\";\nimport { migrateAccounts } from \"popup/ducks/accountServices\";\nimport { transactionDataSelector } from \"popup/ducks/transactionSubmission\";\n\nimport {\n  MigrationHeader,\n  MigrationBody,\n  MigrationButton,\n  MigrationParagraph,\n} from \"../basics\";\n\nimport \"./styles.scss\";\n\nexport const ConfirmMigration = () => {\n  const { t } = useTranslation();\n  const { recommendedFee } = useNetworkFees();\n  const dispatch: AppDispatch = useDispatch();\n  const { balancesToMigrate, isMergeSelected } = useSelector(\n    transactionDataSelector,\n  );\n\n  const handleCancel = () => {\n    window.close();\n  };\n\n  const handleContinue = async () => {\n    const migrateAccountsRes = await dispatch(\n      migrateAccounts({\n        balancesToMigrate,\n        isMergeSelected,\n        recommendedFee,\n      }),\n    );\n\n    if (migrateAccounts.fulfilled.match(migrateAccountsRes)) {\n      navigateTo(ROUTES.accountMigrationMigrationComplete);\n    }\n  };\n\n  return (\n    <div className=\"ConfirmMigration\">\n      <Formik initialValues={{}} onSubmit={handleContinue}>\n        {({ isSubmitting }) => (\n          <Form className=\"ConfirmMigration__form\">\n            {isSubmitting ? (\n              <div className=\"ConfirmMigration__loader\">\n                <Loader size=\"2rem\" />\n                <Heading as=\"h1\" size=\"xl\">\n                  <div>{t(\"Migrating...\")}</div>\n                </Heading>\n                <Text as=\"div\" size=\"md\" className=\"MigrationParagraph\">\n                  {t(\"Please don’t close this window.\")}\n                </Text>\n              </div>\n            ) : (\n              <>\n                <MigrationHeader>\n                  {t(\"Before we start with migration, please read\")}\n                </MigrationHeader>\n                <MigrationBody>\n                  <MigrationParagraph>\n                    {t(\n                      \"As long as you have your old and new mnemonics phrase, you’ll still be able to control accounts related to your current backup phrase which were not merged. For that, you’ll need to import your current backup phrase into Freighter (Freighter supports one backup phrase imported at a time).\",\n                    )}\n                  </MigrationParagraph>\n                  <Notification title=\"Important\" variant=\"warning\">\n                    {t(\n                      \"One of your accounts is a signer for another account. Freighter won’t migrate signing settings. For your safety, Freighter won’t merge accounts with signature set up so you can still control it.\",\n                    )}\n                  </Notification>\n                </MigrationBody>\n\n                <MigrationButton>\n                  <Button onClick={handleCancel} size=\"md\" variant=\"secondary\">\n                    {t(\"Nevermind, cancel\")}\n                  </Button>\n                  <Button\n                    isLoading={isSubmitting}\n                    size=\"md\"\n                    type=\"submit\"\n                    variant=\"primary\"\n                  >\n                    {t(\"I understand, start migration\")}\n                  </Button>\n                </MigrationButton>\n              </>\n            )}\n          </Form>\n        )}\n      </Formik>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Badge, Button, Icon } from \"@stellar/design-system\";\nimport { useTranslation } from \"react-i18next\";\nimport { MigratedAccount } from \"@shared/api/types\";\n\nimport { migratedAccountsSelector } from \"popup/ducks/accountServices\";\n\nimport {\n  MigrationButton,\n  MigrationHeader,\n  MigrationParagraph,\n  MigrationReviewHeader,\n  MigrationReviewListSection,\n  MigrationReviewListHeader,\n  MigrationReviewDetailRow,\n  MigrationReviewAccountInfo,\n  MigrationReviewBadge,\n} from \"../basics\";\n\nimport \"./styles.scss\";\n\nconst handleClick = () => {\n  window.close();\n};\n\nconst AccountListItems = ({\n  migratedAccounts,\n}: {\n  migratedAccounts: MigratedAccount[];\n}) => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      {migratedAccounts.map((acct) => (\n        <MigrationReviewListSection key={acct.publicKey}>\n          <>\n            <div>\n              <MigrationReviewListHeader>\n                <MigrationReviewAccountInfo\n                  publicKey={acct.publicKey}\n                  name={acct.name}\n                  isDisabled\n                />\n              </MigrationReviewListHeader>\n            </div>\n            <div className=\"MigrationComplete__arrow\">\n              <Icon.ArrowRight />\n            </div>\n            <div className=\"MigrationComplete__migrated-account\">\n              <MigrationReviewListHeader>\n                <MigrationReviewAccountInfo\n                  publicKey={acct.newPublicKey}\n                  name={acct.name}\n                />\n              </MigrationReviewListHeader>\n              <MigrationReviewDetailRow>\n                <div>\n                  {acct.trustlineBalances.length} {t(\"trustlines\")}\n                </div>\n              </MigrationReviewDetailRow>\n            </div>\n            <div>\n              <MigrationReviewListHeader>\n                <MigrationReviewBadge>\n                  {acct.isMigrated ? (\n                    <Badge variant=\"success\">{t(\"Migrated\")}</Badge>\n                  ) : (\n                    <Badge variant=\"error\">{t(\"Not migrated\")}</Badge>\n                  )}\n                </MigrationReviewBadge>\n              </MigrationReviewListHeader>\n            </div>\n          </>\n        </MigrationReviewListSection>\n      ))}\n    </>\n  );\n};\n\nexport const MigrationComplete = () => {\n  const { t } = useTranslation();\n\n  const migratedAccounts = useSelector(migratedAccountsSelector);\n\n  return (\n    <div className=\"MigrationComplete\">\n      <MigrationReviewHeader>\n        <MigrationHeader>{t(\"Migration complete\")}</MigrationHeader>\n        <MigrationParagraph>\n          {t(\n            \"Remember, Freighter will now display accounts related to the new backup phrase that was just created. Use this backup phrase from now on to use your new accounts. If you have accounts that were not merged, keep and use your old backup phrase to access them.\",\n          )}\n        </MigrationParagraph>\n      </MigrationReviewHeader>\n      <AccountListItems migratedAccounts={migratedAccounts} />\n      <MigrationButton>\n        <Button size=\"md\" variant=\"tertiary\" onClick={handleClick}>\n          {t(\"Finish\")}\n        </Button>\n      </MigrationButton>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Switch } from \"react-router-dom\";\n\nimport { PublicKeyRoute, VerifiedAccountRoute } from \"popup/Router\";\nimport { ROUTES } from \"popup/constants/routes\";\nimport { View } from \"popup/basics/layout/View\";\n\nimport { MigrationStart } from \"popup/components/accountMigration/MigrationStart\";\nimport { ReviewMigration } from \"popup/components/accountMigration/ReviewMigration\";\nimport { MnemonicPhrase } from \"popup/components/accountMigration/MnemonicPhrase\";\nimport { ConfirmMigration } from \"popup/components/accountMigration/ConfirmMigration\";\nimport { MigrationComplete } from \"popup/components/accountMigration/MigrationComplete\";\n\nimport \"./styles.scss\";\n\nexport const AccountMigration = () => (\n  <>\n    <React.Fragment>\n      <View.Header />\n      <View.Content alignment=\"center\">\n        <Switch>\n          <PublicKeyRoute exact path={ROUTES.accountMigration}>\n            <div className=\"AccountMigration\">\n              <MigrationStart />\n            </div>\n          </PublicKeyRoute>\n          <PublicKeyRoute exact path={ROUTES.accountMigrationReviewMigration}>\n            <div className=\"AccountMigration\">\n              <ReviewMigration />\n            </div>\n          </PublicKeyRoute>\n          <VerifiedAccountRoute\n            exact\n            path={ROUTES.accountMigrationMnemonicPhrase}\n          >\n            <MnemonicPhrase />\n          </VerifiedAccountRoute>\n          <VerifiedAccountRoute\n            exact\n            path={ROUTES.accountMigrationConfirmMigration}\n          >\n            <div className=\"AccountMigration\">\n              <ConfirmMigration />\n            </div>\n          </VerifiedAccountRoute>\n          <PublicKeyRoute exact path={ROUTES.accountMigrationMigrationComplete}>\n            <div className=\"AccountMigration\">\n              <MigrationComplete />\n            </div>\n          </PublicKeyRoute>\n        </Switch>\n      </View.Content>\n    </React.Fragment>\n  </>\n);\n","import { METRIC_NAMES } from \"popup/constants/metricsNames\";\n\nimport { registerHandler, emitMetric } from \"helpers/metrics\";\nimport { getTransactionInfo } from \"helpers/stellar\";\nimport { parsedSearchParam, getUrlHostname, getUrlDomain } from \"helpers/urls\";\n\nimport { navigate } from \"popup/ducks/views\";\nimport { AppState } from \"popup/App\";\nimport { ROUTES } from \"popup/constants/routes\";\n\nconst routeToEventName = {\n  [ROUTES.welcome]: METRIC_NAMES.viewWelcome,\n  [ROUTES.account]: METRIC_NAMES.viewAccount,\n  [ROUTES.accountHistory]: METRIC_NAMES.viewAccountHistory,\n  [ROUTES.addAccount]: METRIC_NAMES.viewAddAccount,\n  [ROUTES.importAccount]: METRIC_NAMES.viewImportAccount,\n  [ROUTES.connectWallet]: METRIC_NAMES.viewConnectWallet,\n  [ROUTES.connectWalletPlugin]: METRIC_NAMES.viewConnectWalletPlugin,\n  [ROUTES.connectDevice]: METRIC_NAMES.viewConnectDevice,\n  [ROUTES.signMessage]: METRIC_NAMES.viewSignMessage,\n  [ROUTES.signTransaction]: METRIC_NAMES.viewSignTransaction,\n  [ROUTES.reviewAuthorization]: METRIC_NAMES.viewReviewAuthorization,\n  [ROUTES.signAuthEntry]: METRIC_NAMES.viewSignAuthEntry,\n  [ROUTES.grantAccess]: METRIC_NAMES.viewGrantAccess,\n  [ROUTES.mnemonicPhrase]: METRIC_NAMES.viewMnemonicPhrase,\n  [ROUTES.mnemonicPhraseConfirm]: METRIC_NAMES.viewMnemonicPhraseConfirm,\n  [ROUTES.unlockAccount]: METRIC_NAMES.viewUnlockAccount,\n  [ROUTES.verifyAccount]: METRIC_NAMES.viewVerifyAccount,\n  [ROUTES.mnemonicPhraseConfirmed]: METRIC_NAMES.viewMnemonicPhraseConfirmed,\n  [ROUTES.accountCreator]: METRIC_NAMES.viewAccountCreator,\n  [ROUTES.recoverAccount]: METRIC_NAMES.viewRecoverAccount,\n  [ROUTES.recoverAccountSuccess]: METRIC_NAMES.viewRecoverAccountSuccess,\n  [ROUTES.displayBackupPhrase]: METRIC_NAMES.viewDisplayBackupPhrase,\n  [ROUTES.settings]: METRIC_NAMES.viewSettings,\n  [ROUTES.preferences]: METRIC_NAMES.viewPreferences,\n  [ROUTES.security]: METRIC_NAMES.viewSecurity,\n  [ROUTES.manageConnectedApps]: METRIC_NAMES.viewManageConnectedApps,\n  [ROUTES.about]: METRIC_NAMES.viewAbout,\n  [ROUTES.viewPublicKey]: METRIC_NAMES.viewPublicKey,\n  [ROUTES.debug]: METRIC_NAMES.viewDebug,\n  [ROUTES.integrationTest]: METRIC_NAMES.viewIntegrationTest,\n  [ROUTES.sendPayment]: METRIC_NAMES.viewSendPayment,\n  [ROUTES.sendPaymentTo]: METRIC_NAMES.sendPaymentTo,\n  [ROUTES.sendPaymentAmount]: METRIC_NAMES.sendPaymentAmount,\n  [ROUTES.sendPaymentType]: METRIC_NAMES.sendPaymentType,\n  [ROUTES.sendPaymentSettings]: METRIC_NAMES.sendPaymentSettings,\n  [ROUTES.sendPaymentSettingsFee]: METRIC_NAMES.sendPaymentSettingsFee,\n  [ROUTES.sendPaymentSettingsSlippage]:\n    METRIC_NAMES.sendPaymentSettingsSlippage,\n  [ROUTES.sendPaymentSettingsTimeout]: METRIC_NAMES.sendPaymentSettingsTimeout,\n  [ROUTES.sendPaymentConfirm]: METRIC_NAMES.sendPaymentConfirm,\n  [ROUTES.manageAssets]: METRIC_NAMES.viewManageAssets,\n  [ROUTES.searchAsset]: METRIC_NAMES.viewSearchAsset,\n  [ROUTES.addAsset]: METRIC_NAMES.viewAddAsset,\n  [ROUTES.swap]: METRIC_NAMES.viewSwap,\n  [ROUTES.swapAmount]: METRIC_NAMES.swapAmount,\n  [ROUTES.swapSettings]: METRIC_NAMES.swapSettings,\n  [ROUTES.swapSettingsFee]: METRIC_NAMES.swapSettingsFee,\n  [ROUTES.swapSettingsSlippage]: METRIC_NAMES.swapSettingsSlippage,\n  [ROUTES.swapSettingsTimeout]: METRIC_NAMES.swapSettingsTimeout,\n  [ROUTES.swapConfirm]: METRIC_NAMES.swapConfirm,\n  [ROUTES.manageNetwork]: METRIC_NAMES.viewManageNetwork,\n  [ROUTES.addNetwork]: METRIC_NAMES.viewAddNetwork,\n  [ROUTES.editNetwork]: METRIC_NAMES.viewEditNetwork,\n  [ROUTES.networkSettings]: METRIC_NAMES.viewNetworkSettings,\n  [ROUTES.leaveFeedback]: METRIC_NAMES.viewLeaveFeedback,\n  [ROUTES.manageAssetsLists]: METRIC_NAMES.viewManageAssetsLists,\n  [ROUTES.manageAssetsListsModifyAssetList]:\n    METRIC_NAMES.manageAssetListsModifyAssetList,\n  [ROUTES.accountMigration]: METRIC_NAMES.viewAccountMigration,\n  [ROUTES.accountMigrationReviewMigration]:\n    METRIC_NAMES.viewAccountMigrationReviewMigration,\n  [ROUTES.accountMigrationMnemonicPhrase]:\n    METRIC_NAMES.viewAccountMigrationMnemonicPhrase,\n  [ROUTES.accountMigrationConfirmMigration]:\n    METRIC_NAMES.viewAccountMigrationConfirmMigration,\n  [ROUTES.accountMigrationMigrationComplete]:\n    METRIC_NAMES.viewAccountMigrationMigrationComplete,\n  [ROUTES.advancedSettings]: METRIC_NAMES.viewAdvancedSettings,\n};\n\nregisterHandler<AppState>(navigate, (_, a) => {\n  // Awkward, but gives us types on action payload\n  const action = a as ReturnType<typeof navigate>;\n  const { pathname, search } = action.payload.location;\n\n  const eventName = routeToEventName[pathname as ROUTES];\n\n  if (!eventName) {\n    throw new Error(`Didn't find a metric event name for path '${pathname}'`);\n  }\n\n  // \"/sign-transaction\" and \"/grant-access\" require additional metrics on loaded page\n  if (pathname === ROUTES.grantAccess) {\n    const { url } = parsedSearchParam(search);\n    const METRIC_OPTION_DOMAIN = {\n      domain: getUrlDomain(url),\n      subdomain: getUrlHostname(url),\n    };\n\n    emitMetric(eventName, METRIC_OPTION_DOMAIN);\n  } else if (pathname === ROUTES.signTransaction) {\n    const { url } = parsedSearchParam(search);\n    const info = getTransactionInfo(search);\n\n    const { operations, operationTypes } = info;\n    const METRIC_OPTIONS = {\n      domain: getUrlDomain(url),\n      subdomain: getUrlHostname(url),\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      number_of_operations: operations.length,\n      operationTypes,\n    };\n\n    emitMetric(eventName, METRIC_OPTIONS);\n  } else if (\n    pathname === ROUTES.signAuthEntry ||\n    pathname === ROUTES.signMessage\n  ) {\n    const { url } = parsedSearchParam(search);\n\n    const METRIC_OPTIONS = {\n      domain: getUrlDomain(url),\n      subdomain: getUrlHostname(url),\n    };\n\n    emitMetric(eventName, METRIC_OPTIONS);\n  } else {\n    emitMetric(eventName);\n  }\n});\n","import React from \"react\";\nimport { Card } from \"@stellar/design-system\";\nimport { useTranslation } from \"react-i18next\";\n\nimport \"./index.scss\";\n\ninterface BlobProps {\n  message: string;\n}\n\nexport const Message = (props: BlobProps) => {\n  const { t } = useTranslation();\n\n  return (\n    <Card variant=\"secondary\">\n      <p>{t(\"Signing message\")}:</p>\n      <div className=\"Message\">{props.message}</div>\n    </Card>\n  );\n};\n","import React, { useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport { Button, Card, Icon, Notification } from \"@stellar/design-system\";\nimport { useTranslation } from \"react-i18next\";\nimport { signBlob, rejectBlob } from \"popup/ducks/access\";\nimport { AccountListIdenticon } from \"popup/components/identicons/AccountListIdenticon\";\nimport { AccountList, OptionTag } from \"popup/components/account/AccountList\";\nimport { PunycodedDomain } from \"popup/components/PunycodedDomain\";\nimport { Message } from \"popup/components/signMessage\";\nimport {\n  isNonSSLEnabledSelector,\n  settingsExperimentalModeSelector,\n  settingsNetworkDetailsSelector,\n} from \"popup/ducks/settings\";\nimport {\n  WarningMessageVariant,\n  WarningMessage,\n  FirstTimeWarningMessage,\n  SSLWarningMessage,\n} from \"popup/components/WarningMessages\";\nimport { View } from \"popup/basics/layout/View\";\n\nimport { ShowOverlayStatus } from \"popup/ducks/transactionSubmission\";\n\nimport { HardwareSign } from \"popup/components/hardwareConnect/HardwareSign\";\nimport { SlideupModal } from \"popup/components/SlideupModal\";\n\nimport { VerifyAccount } from \"popup/views/VerifyAccount\";\nimport { MessageToSign, parsedSearchParam } from \"helpers/urls\";\nimport { truncatedPublicKey } from \"helpers/stellar\";\nimport { useSetupSigningFlow } from \"popup/helpers/useSetupSigningFlow\";\n\nimport \"./styles.scss\";\n\nexport const SignMessage = () => {\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n\n  const location = useLocation();\n  const { t } = useTranslation();\n  const isExperimentalModeEnabled = useSelector(\n    settingsExperimentalModeSelector,\n  );\n  const isNonSSLEnabled = useSelector(isNonSSLEnabledSelector);\n  const { networkName, networkPassphrase } = useSelector(\n    settingsNetworkDetailsSelector,\n  );\n\n  const message = parsedSearchParam(location.search) as MessageToSign;\n  const {\n    accountToSign,\n    domain,\n    isDomainListedAllowed,\n    url,\n    networkPassphrase: blobNetworkPassphrase,\n  } = message;\n\n  const {\n    allAccounts,\n    accountNotFound,\n    currentAccount,\n    isConfirming,\n    isPasswordRequired,\n    publicKey,\n    handleApprove,\n    hwStatus,\n    isHardwareWallet,\n    rejectAndClose,\n    setIsPasswordRequired,\n    verifyPasswordThenSign,\n    hardwareWalletType,\n  } = useSetupSigningFlow(rejectBlob, signBlob, message.message, accountToSign);\n\n  if (isHardwareWallet) {\n    return (\n      <WarningMessage\n        variant={WarningMessageVariant.warning}\n        handleCloseClick={() => window.close()}\n        isActive\n        header={t(\"Unsupported signing method\")}\n      >\n        <p>\n          {t(\n            \"Signing arbitrary data with a hardware wallet is currently not supported.\",\n          )}\n        </p>\n      </WarningMessage>\n    );\n  }\n\n  if (blobNetworkPassphrase && blobNetworkPassphrase !== networkPassphrase) {\n    return (\n      <WarningMessage\n        variant={WarningMessageVariant.warning}\n        handleCloseClick={() => window.close()}\n        isActive\n        header={`${t(\"Freighter is set to\")} ${networkName}`}\n      >\n        <p>\n          {t(\"The requester expects you to sign this message on\")}{\" \"}\n          {blobNetworkPassphrase}.\n        </p>\n        <p>{t(\"Signing this transaction is not possible at the moment.\")}</p>\n      </WarningMessage>\n    );\n  }\n\n  if (!url.startsWith(\"https\") && !isNonSSLEnabled) {\n    return <SSLWarningMessage url={domain} />;\n  }\n\n  return isPasswordRequired ? (\n    <VerifyAccount\n      isApproval\n      customBackAction={() => setIsPasswordRequired(false)}\n      customSubmit={verifyPasswordThenSign}\n    />\n  ) : (\n    <>\n      {hwStatus === ShowOverlayStatus.IN_PROGRESS && hardwareWalletType && (\n        <HardwareSign walletType={hardwareWalletType} />\n      )}\n      <React.Fragment>\n        <View.AppHeader pageTitle={t(\"Confirm Data\")} />\n        <View.Content>\n          {isExperimentalModeEnabled ? (\n            <WarningMessage\n              header=\"Experimental Mode\"\n              variant={WarningMessageVariant.default}\n            >\n              <p>\n                {t(\n                  \"You are interacting with data that may be using untested and changing schemas. Proceed at your own risk.\",\n                )}\n              </p>\n            </WarningMessage>\n          ) : null}\n          <WarningMessage\n            header=\"Unknown data\"\n            variant={WarningMessageVariant.highAlert}\n          >\n            <p>\n              {t(\n                \"You are attempting to sign an arbitrary message. Please use extreme caution and understand the implications of signing this data.\",\n              )}\n            </p>\n          </WarningMessage>\n          {!isDomainListedAllowed ? <FirstTimeWarningMessage /> : null}\n          <div className=\"SignMessage__info\">\n            <Card variant=\"secondary\">\n              <PunycodedDomain domain={domain} isRow />\n              <div className=\"SignMessage__subject\">\n                {t(\"is requesting approval to sign a message\")}\n              </div>\n              <div className=\"SignMessage__approval\">\n                <div className=\"SignMessage__approval__title\">\n                  {t(\"Approve using\")}:\n                </div>\n                <div\n                  className=\"SignMessage__current-account\"\n                  onClick={() => setIsDropdownOpen(true)}\n                >\n                  <AccountListIdenticon\n                    displayKey\n                    accountName={currentAccount.name}\n                    active\n                    publicKey={currentAccount.publicKey}\n                    setIsDropdownOpen={setIsDropdownOpen}\n                  >\n                    <OptionTag\n                      hardwareWalletType={currentAccount.hardwareWalletType}\n                      imported={currentAccount.imported}\n                    />\n                  </AccountListIdenticon>\n                  <div className=\"SignMessage__current-account__chevron\">\n                    <Icon.ChevronDown />\n                  </div>\n                </div>\n              </div>\n            </Card>\n            {accountNotFound && accountToSign ? (\n              <div className=\"SignMessage__account-not-found\">\n                <Notification\n                  variant=\"warning\"\n                  icon={<Icon.InfoOctagon />}\n                  title={t(\"Account not available\")}\n                >\n                  {t(\"The application is requesting a specific account\")} (\n                  {truncatedPublicKey(accountToSign)}),{\" \"}\n                  {t(\n                    \"which is not available on Freighter. If you own this account, you can import it into Freighter to complete this request.\",\n                  )}\n                </Notification>\n              </div>\n            ) : null}\n          </div>\n          <Message message={message.message} />\n        </View.Content>\n        <View.Footer isInline>\n          <Button\n            size=\"md\"\n            isFullWidth\n            variant=\"secondary\"\n            onClick={() => rejectAndClose()}\n          >\n            {t(\"Reject\")}\n          </Button>\n          <Button\n            size=\"md\"\n            isFullWidth\n            variant=\"primary\"\n            isLoading={isConfirming}\n            onClick={() => handleApprove()}\n          >\n            {t(\"Approve\")}\n          </Button>\n        </View.Footer>\n        <SlideupModal\n          isModalOpen={isDropdownOpen}\n          setIsModalOpen={setIsDropdownOpen}\n        >\n          <div className=\"SignMessage__modal\">\n            <AccountList\n              allAccounts={allAccounts}\n              publicKey={publicKey}\n              setIsDropdownOpen={setIsDropdownOpen}\n            />\n          </div>\n        </SlideupModal>\n      </React.Fragment>\n    </>\n  );\n};\n","import React, { useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { captureException } from \"@sentry/browser\";\nimport BigNumber from \"bignumber.js\";\nimport {\n  MemoType,\n  Operation,\n  Transaction,\n  TransactionBuilder,\n  xdr,\n} from \"stellar-sdk\";\nimport { useSelector } from \"react-redux\";\nimport { Button, Icon, Loader } from \"@stellar/design-system\";\n\nimport { decodeString } from \"helpers/urls\";\nimport { getIsTokenSpec, getTokenDetails } from \"@shared/api/internal\";\nimport { TokenArgsDisplay } from \"@shared/api/helpers/soroban\";\n\nimport { PunycodedDomain } from \"popup/components/PunycodedDomain\";\nimport { settingsNetworkDetailsSelector } from \"popup/ducks/settings\";\nimport { signTransaction, rejectTransaction } from \"popup/ducks/access\";\nimport { ShowOverlayStatus } from \"popup/ducks/transactionSubmission\";\nimport { publicKeySelector } from \"popup/ducks/accountServices\";\nimport StellarLogo from \"popup/assets/stellar-logo.png\";\n\nimport {\n  KeyValueInvokeHostFnArgs,\n  KeyValueList,\n} from \"popup/components/signTransaction/Operations/KeyVal\";\nimport { useTranslation } from \"react-i18next\";\nimport { truncateString } from \"helpers/stellar\";\nimport { emitMetric } from \"helpers/metrics\";\nimport { FlaggedKeys } from \"types/transactions\";\nimport {\n  buildInvocationTree,\n  formatTokenAmount,\n  getInvocationDetails,\n} from \"popup/helpers/soroban\";\nimport { KeyIdenticon } from \"popup/components/identicons/KeyIdenticon\";\nimport { useSetupSigningFlow } from \"popup/helpers/useSetupSigningFlow\";\nimport { Tabs } from \"popup/components/Tabs\";\nimport { SlideupModal } from \"popup/components/SlideupModal\";\nimport { AccountList } from \"popup/components/account/AccountList\";\nimport {\n  InvokerAuthWarning,\n  TransferWarning,\n  UnverifiedTokenTransferWarning,\n} from \"popup/components/WarningMessages\";\nimport { METRIC_NAMES } from \"popup/constants/metricsNames\";\nimport { SorobanTokenIcon } from \"popup/components/account/AccountAssets\";\nimport { CopyValue } from \"popup/components/CopyValue\";\nimport { HardwareSign } from \"popup/components/hardwareConnect/HardwareSign\";\nimport { OPERATION_TYPES } from \"constants/transaction\";\nimport { Summary } from \"../SignTransaction/Preview/Summary\";\nimport { Details } from \"../SignTransaction/Preview/Details\";\nimport { Data } from \"../SignTransaction/Preview/Data\";\nimport { VerifyAccount } from \"../VerifyAccount\";\n\nimport \"./styles.scss\";\n\nexport const ReviewAuth = () => {\n  const location = useLocation();\n  const { t } = useTranslation();\n  const [isLoadingAuth, setLoadingAuth] = useState(true);\n\n  const decodedSearchParam = decodeString(location.search.replace(\"?\", \"\"));\n  const params = decodedSearchParam ? JSON.parse(decodedSearchParam) : {};\n\n  const [activeAuthEntryIndex, setActiveAuthEntryIndex] = React.useState(0);\n  const [hasConfirmedAuth, setHasConfirmedAuth] = React.useState(false);\n  const [isDropdownOpen, setIsDropdownOpen] = React.useState(false);\n\n  const { networkPassphrase } = useSelector(settingsNetworkDetailsSelector);\n\n  const transaction = TransactionBuilder.fromXDR(\n    params.transactionXdr as string,\n    networkPassphrase,\n  ) as Transaction;\n\n  const isFeeBump = \"innerTransaction\" in transaction;\n  const op = transaction.operations[0] as Operation.InvokeHostFunction;\n  const authCount = op.auth ? op.auth.length : 0;\n\n  const {\n    allAccounts,\n    currentAccount,\n    isConfirming,\n    publicKey,\n    handleApprove,\n    hardwareWalletType,\n    hwStatus,\n    rejectAndClose,\n    isPasswordRequired,\n    setIsPasswordRequired,\n    verifyPasswordThenSign,\n  } = useSetupSigningFlow(\n    rejectTransaction,\n    signTransaction,\n    params.transactionXdr as string,\n    params.accountToSign as string,\n  );\n\n  const isLastEntry = activeAuthEntryIndex + 1 === op.auth?.length;\n  const reviewAuthEntry = () => {\n    emitMetric(METRIC_NAMES.reviewedAuthEntry);\n    setLoadingAuth(true);\n    if (isLastEntry) {\n      setHasConfirmedAuth(true);\n    } else {\n      setActiveAuthEntryIndex(activeAuthEntryIndex + 1);\n    }\n  };\n\n  return isPasswordRequired ? (\n    <VerifyAccount\n      isApproval\n      customBackAction={() => setIsPasswordRequired(false)}\n      customSubmit={verifyPasswordThenSign}\n    />\n  ) : (\n    <>\n      {hwStatus === ShowOverlayStatus.IN_PROGRESS && hardwareWalletType && (\n        <HardwareSign walletType={hardwareWalletType} />\n      )}\n      <div className=\"ReviewAuth\">\n        <div className=\"ReviewAuth__Body\">\n          <div className=\"ReviewAuth__Title\">\n            <PunycodedDomain domain={params.domain} />\n            <div className=\"ReviewAuth--connection-request\">\n              <div className=\"ReviewAuth--connection-request-pill\">\n                <Icon.ArrowsRight />\n                <p>Transaction Request</p>\n              </div>\n            </div>\n          </div>\n          <div className=\"ReviewAuth__Details\">\n            {!hasConfirmedAuth && op.auth ? (\n              <>\n                <h5>\n                  {activeAuthEntryIndex + 1}/{authCount} Authorizations\n                </h5>\n                <AuthDetail\n                  authEntry={op.auth[activeAuthEntryIndex]}\n                  isLoading={isLoadingAuth}\n                  setLoading={setLoadingAuth}\n                />\n              </>\n            ) : (\n              <SignTransaction\n                tx={\n                  isFeeBump\n                    ? ((transaction as any).innerTransaction as Transaction)\n                    : transaction\n                }\n                flaggedKeys={params.flaggedKeys}\n                isMemoRequired={params.isMemoRequired}\n                memo={params.memo}\n              />\n            )}\n          </div>\n          <div className=\"ReviewAuth__Actions\">\n            {hasConfirmedAuth && (\n              <div className=\"ReviewAuth__Actions__SigningWith\">\n                <h5>Signing with</h5>\n                <button\n                  className=\"ReviewAuth__Actions__PublicKey\"\n                  onClick={() => setIsDropdownOpen(true)}\n                >\n                  <KeyIdenticon\n                    publicKey={currentAccount.publicKey}\n                    keyTruncationAmount={10}\n                  />\n                  <Icon.ChevronDown />\n                </button>\n              </div>\n            )}\n            <div className=\"ReviewAuth__Actions__BtnRow\">\n              {hasConfirmedAuth ? (\n                <Button\n                  variant=\"tertiary\"\n                  isFullWidth\n                  size=\"md\"\n                  isLoading={isConfirming}\n                  onClick={() => handleApprove()}\n                >\n                  {t(\"Sign Transaction\")}\n                </Button>\n              ) : (\n                <Button\n                  variant=\"tertiary\"\n                  isFullWidth\n                  size=\"md\"\n                  isLoading={isConfirming}\n                  onClick={reviewAuthEntry}\n                >\n                  {isLastEntry\n                    ? t(\"Approve and continue\")\n                    : t(\"Approve and review next\")}\n                </Button>\n              )}\n\n              <Button\n                isFullWidth\n                size=\"md\"\n                variant=\"secondary\"\n                onClick={() => rejectAndClose()}\n              >\n                {t(\"Reject\")}\n              </Button>\n            </div>\n          </div>\n        </div>\n        <SlideupModal\n          isModalOpen={isDropdownOpen}\n          setIsModalOpen={setIsDropdownOpen}\n        >\n          <div className=\"SignTransaction__modal\">\n            <AccountList\n              allAccounts={allAccounts}\n              publicKey={publicKey}\n              setIsDropdownOpen={setIsDropdownOpen}\n            />\n          </div>\n        </SlideupModal>\n      </div>\n    </>\n  );\n};\n\ninterface TokenDetails {\n  name: string;\n  symbol: string;\n  decimals: number | null;\n}\ntype TokenDetailMap = Record<string, TokenDetails>;\n\nconst TransferSummary = ({\n  transfer,\n  tokenDetails = { name: \"\", symbol: \"\", decimals: null },\n}: {\n  transfer: {\n    amount: string;\n    contractId: string;\n    from: string;\n    to: string;\n  };\n  tokenDetails: TokenDetails;\n}) => {\n  const hasTokenDetails = tokenDetails.symbol && tokenDetails.decimals !== null;\n  const isNative = tokenDetails.symbol === \"native\";\n  const symbol = isNative ? \"XLM\" : tokenDetails.symbol;\n  return (\n    <div className=\"AuthDetail__InfoBlock TransferSummary\">\n      <div className=\"SummaryBlock\">\n        <div className=\"SummaryBlock__Title\">\n          <Icon.ArrowCircleRight width=\"18\" height=\"18\" />\n          <p className=\"FieldTitle\">Receiver</p>\n        </div>\n        <KeyIdenticon\n          isCopyAllowed\n          iconSide=\"right\"\n          publicKey={transfer.to}\n          isSmall\n        />\n      </div>\n      <div className=\"SummaryBlock\">\n        <div className=\"SummaryBlock__Title\">\n          <Icon.ArrowCircleLeft width=\"18\" height=\"18\" />\n          <p className=\"FieldTitle\">Sender</p>\n        </div>\n        <KeyIdenticon\n          isCopyAllowed\n          iconSide=\"right\"\n          publicKey={transfer.from}\n          isSmall\n        />\n      </div>\n      <div className=\"SummaryBlock\">\n        <div className=\"SummaryBlock__Title\">\n          <Icon.CurrencyDollarCircle width=\"18\" height=\"18\" />\n          <p className=\"FieldTitle\">Amount</p>\n        </div>\n        <div className=\"SummaryBlock__Title\">\n          {hasTokenDetails ? (\n            <>\n              <p>\n                {formatTokenAmount(\n                  new BigNumber(transfer.amount),\n                  Number(tokenDetails.decimals),\n                )}{\" \"}\n                {symbol}\n              </p>\n              {isNative ? (\n                <div className=\"AccountAssets__asset--logo AccountAssets__asset--soroban-token\">\n                  <img src={StellarLogo} alt=\"Stellar icon\" />\n                </div>\n              ) : (\n                <SorobanTokenIcon />\n              )}\n            </>\n          ) : (\n            <>\n              <p>{transfer.amount}</p>\n            </>\n          )}\n        </div>\n      </div>\n      {!hasTokenDetails && (\n        <div className=\"SummaryBlock\">\n          <p className=\"MissingDetailWarning\">\n            Failed to fetch token details, showing raw amount.\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst AuthDetail = ({\n  authEntry,\n  setLoading,\n  isLoading,\n}: {\n  authEntry: xdr.SorobanAuthorizationEntry;\n  setLoading: (isLoading: boolean) => void;\n  isLoading: boolean;\n}) => {\n  const publicKey = useSelector(publicKeySelector);\n  const networkDetails = useSelector(settingsNetworkDetailsSelector);\n  const [authTransfers, setAuthTransfers] = React.useState(\n    [] as TokenArgsDisplay[],\n  );\n  const [isCheckingTransfers, setCheckingTransfers] = React.useState(true);\n\n  const { t } = useTranslation();\n  const rootInvocation = authEntry.rootInvocation();\n  const details = getInvocationDetails(rootInvocation);\n  const invocations = details.filter((detail) => detail.type === \"invoke\");\n  const createWasms = details.filter((detail) => detail.type === \"wasm\");\n  const createSacs = details.filter((detail) => detail.type === \"sac\");\n\n  const rootJson = buildInvocationTree(rootInvocation);\n  const isInvokeContract = rootInvocation.function().switch().value === 0;\n\n  const rootJsonDepKey = JSON.stringify(\n    rootJson,\n    (_, val) => (typeof val === \"bigint\" ? val.toString() : val),\n    2,\n  );\n  React.useEffect(() => {\n    async function getIsToken() {\n      try {\n        const transfers = [];\n        const isToken = !rootJson.args.source\n          ? false\n          : await getIsTokenSpec({\n              contractId: rootJson.args.source,\n              networkDetails,\n            });\n        if (isToken && rootJson.args.function === \"transfer\") {\n          transfers.push({\n            contractId: rootJson.args.source as string,\n            amount: rootJson.args.args[2].toString() as string,\n            to: rootJson.args.args[1] as string,\n            from: rootJson.args.args[0] as string,\n          });\n        }\n        // check for sub transfers\n        // eslint-disable-next-line no-restricted-syntax\n        for (const subInvocation of rootJson.invocations) {\n          const isSubInvokeToken = !subInvocation.args.source\n            ? false\n            : await getIsTokenSpec({\n                contractId: subInvocation.args.source,\n                networkDetails,\n              });\n          if (isSubInvokeToken && subInvocation.args.function === \"transfer\") {\n            transfers.push({\n              contractId: subInvocation.args.source as string,\n              amount: subInvocation.args.args[2].toString() as string,\n              to: subInvocation.args.args[1] as string,\n              from: subInvocation.args.args[0] as string,\n            });\n          }\n        }\n        setAuthTransfers(transfers);\n        setCheckingTransfers(false);\n        setLoading(false);\n      } catch (error) {\n        console.error(error);\n        setCheckingTransfers(false);\n        setLoading(false);\n      }\n    }\n    if (isInvokeContract) {\n      getIsToken();\n    } else {\n      setCheckingTransfers(false);\n      setLoading(false);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isInvokeContract, rootJsonDepKey]);\n\n  const [tokenDetails, setTokenDetails] = React.useState({} as TokenDetailMap);\n\n  const transfersDepKey = JSON.stringify(authTransfers);\n  React.useEffect(() => {\n    async function _getTokenDetails() {\n      setLoading(true);\n      const _tokenDetails = {} as TokenDetailMap;\n\n      // eslint-disable-next-line\n      for (const transfer of authTransfers) {\n        try {\n          // eslint-disable-next-line\n          const tokenDetailsResponse = await getTokenDetails({\n            contractId: transfer.contractId,\n            publicKey,\n            networkDetails,\n          });\n\n          if (!tokenDetailsResponse) {\n            // default details\n            _tokenDetails[transfer.contractId] = {\n              name: \"\",\n              symbol: \"\",\n              decimals: null,\n            };\n            setTokenDetails(_tokenDetails);\n            throw new Error(\"failed to fetch token details\");\n          }\n          _tokenDetails[transfer.contractId] = tokenDetailsResponse;\n        } catch (error) {\n          captureException(\n            `Failed to fetch token details - ${JSON.stringify(error)} - ${\n              transfer.contractId\n            } - ${networkDetails.network}`,\n          );\n          console.error(error);\n        }\n      }\n      setTokenDetails(_tokenDetails);\n      setLoading(false);\n    }\n    _getTokenDetails();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [transfersDepKey]);\n\n  return (\n    <div className=\"AuthDetail\" data-testid=\"AuthDetail\">\n      {isLoading || isCheckingTransfers ? (\n        <div className=\"AuthDetail__loader\">\n          <Loader size=\"3rem\" />\n        </div>\n      ) : (\n        <div data-testid=\"AuthDetail__transfers\">\n          <TransferWarning transfers={authTransfers} />\n          <UnverifiedTokenTransferWarning transfers={authTransfers} />\n          {authEntry.credentials().switch() ===\n            xdr.SorobanCredentialsType.sorobanCredentialsSourceAccount() && (\n            <InvokerAuthWarning />\n          )}\n          {authTransfers.map((transfer) => (\n            <TransferSummary\n              key={JSON.stringify(transfer)}\n              transfer={transfer}\n              tokenDetails={tokenDetails[transfer.contractId]}\n            />\n          ))}\n          {invocations.map((detail) => (\n            <React.Fragment key={detail.fnName}>\n              <div\n                className=\"AuthDetail__TitleRow\"\n                data-testid=\"AuthDetail__invocation\"\n              >\n                <Icon.CodeSnippet01 />\n                <h5>Invocation</h5>\n              </div>\n              <div className=\"AuthDetail__InfoBlock\">\n                <KeyValueList\n                  operationKey={t(\"Contract ID\")}\n                  operationValue={\n                    <CopyValue\n                      value={detail.contractId}\n                      displayValue={truncateString(detail.contractId)}\n                    />\n                  }\n                />\n                <KeyValueList\n                  operationKey={t(\"Function Name\")}\n                  operationValue={detail.fnName}\n                />\n                <KeyValueInvokeHostFnArgs\n                  args={detail.args}\n                  contractId={detail.contractId}\n                  fnName={detail.fnName}\n                />\n              </div>\n            </React.Fragment>\n          ))}\n          {createWasms.map((detail) => (\n            <React.Fragment key={detail.hash}>\n              <div\n                className=\"AuthDetail__TitleRow\"\n                data-testid=\"AuthDetail__createWasmInvocation\"\n              >\n                <Icon.CodeSnippet01 />\n                <h5>Contract Creation</h5>\n              </div>\n              <div className=\"AuthDetail__InfoBlock\">\n                <KeyValueList\n                  operationKey={t(\"Contract Address\")}\n                  operationValue={\n                    <CopyValue\n                      value={detail.address}\n                      displayValue={truncateString(detail.address)}\n                    />\n                  }\n                />\n                <KeyValueList\n                  operationKey={t(\"Hash\")}\n                  operationValue={truncateString(detail.hash)}\n                />\n                <KeyValueList\n                  operationKey={t(\"Salt\")}\n                  operationValue={truncateString(detail.salt)}\n                />\n                {detail.args && <KeyValueInvokeHostFnArgs args={detail.args} />}\n              </div>\n            </React.Fragment>\n          ))}\n          {createSacs.map((detail) => (\n            <React.Fragment key={detail.asset}>\n              <div className=\"AuthDetail__TitleRow\">\n                <Icon.CodeSnippet01 />\n                <h5>Contract Creation</h5>\n              </div>\n              <div className=\"AuthDetail__InfoBlock\">\n                <KeyValueList\n                  operationKey={t(\"Asset\")}\n                  operationValue={truncateString(detail.asset)}\n                />\n                {detail.args && <KeyValueInvokeHostFnArgs args={detail.args} />}\n              </div>\n            </React.Fragment>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst SignTransaction = ({\n  tx,\n  flaggedKeys,\n  isMemoRequired,\n  memo,\n}: {\n  tx: Transaction;\n  flaggedKeys: FlaggedKeys;\n  isMemoRequired: boolean;\n  memo?: { value: string; type: MemoType };\n}) => {\n  function renderTab(tab: string) {\n    function renderTabBody() {\n      switch (tab) {\n        case \"Summary\": {\n          return (\n            <Summary\n              sequenceNumber={tx.sequence}\n              fee={tx.fee}\n              memo={memo}\n              operationNames={tx.operations.map(\n                (op) => OPERATION_TYPES[op.type] || op.type,\n              )}\n            />\n          );\n        }\n\n        case \"Details\": {\n          return (\n            <Details\n              operations={tx.operations}\n              flaggedKeys={flaggedKeys}\n              isMemoRequired={isMemoRequired}\n            />\n          );\n        }\n\n        case \"Data\": {\n          return <Data xdr={tx.toXDR()} />;\n        }\n\n        default:\n          return <></>;\n      }\n    }\n\n    return <div className=\"BodyWrapper\">{renderTabBody()}</div>;\n  }\n  return <Tabs tabs={[\"Summary\", \"Details\", \"Data\"]} renderTab={renderTab} />;\n};\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport { Icon } from \"@stellar/design-system\";\n\nimport { View } from \"popup/basics/layout/View\";\nimport { ROUTES } from \"popup/constants/routes\";\n\nimport \"./styles.scss\";\n\ninterface NavLinkProps {\n  to: string;\n  children: React.ReactNode;\n}\n\nconst BottomNavLink = ({ children, to }: NavLinkProps) => (\n  <NavLink\n    to={to}\n    activeClassName=\"BottomNav__link--active\"\n    className=\"BottomNav__link\"\n    data-testid={`BottomNav-link-${to.replace(\"/\", \"\")}`}\n  >\n    <div className=\"BottomNav__link__icon\">{children}</div>\n  </NavLink>\n);\n\nexport const BottomNav = () => {\n  const { t } = useTranslation();\n\n  return (\n    <View.Footer hasTopBorder hasNoBottomPadding>\n      <div className=\"BottomNav\">\n        <BottomNavLink to={ROUTES.account}>\n          <Icon.Wallet03 />\n          {t(\"Home\")}\n        </BottomNavLink>\n        <BottomNavLink to={ROUTES.accountHistory}>\n          <Icon.ClockRewind />\n          {t(\"History\")}\n        </BottomNavLink>\n        <BottomNavLink to={ROUTES.swap}>\n          <Icon.RefreshCcw05 />\n          {t(\"Swap\")}\n        </BottomNavLink>\n        <BottomNavLink to={ROUTES.settings}>\n          <Icon.Settings01 />\n          {t(\"Settings\")}\n        </BottomNavLink>\n      </div>\n    </View.Footer>\n  );\n};\n","import React, { useEffect } from \"react\";\nimport {\n  HashRouter,\n  Switch,\n  Redirect,\n  Route,\n  useLocation,\n  RouteProps,\n} from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport { APPLICATION_STATE } from \"@shared/constants/applicationState\";\nimport { POPUP_WIDTH } from \"constants/dimensions\";\nimport { newTabHref } from \"helpers/urls\";\nimport { openTab } from \"popup/helpers/navigate\";\n\nimport { ROUTES } from \"popup/constants/routes\";\nimport {\n  allAccountsSelector,\n  applicationStateSelector,\n  hasPrivateKeySelector,\n  loadAccount,\n  publicKeySelector,\n  authErrorSelector,\n} from \"popup/ducks/accountServices\";\nimport {\n  loadSettings,\n  settingsNetworkDetailsSelector,\n  settingsStateSelector,\n} from \"popup/ducks/settings\";\nimport { navigate } from \"popup/ducks/views\";\n\nimport { AppError } from \"popup/components/AppError\";\nimport { Loading } from \"popup/components/Loading\";\n\nimport { Account } from \"popup/views/Account\";\nimport { AccountHistory } from \"popup/views/AccountHistory\";\nimport { AccountCreator } from \"popup/views/AccountCreator\";\nimport { AddAccount } from \"popup/views/AddAccount/AddAccount\";\nimport { ManageConnectedApps } from \"popup/views/ManageConnectedApps\";\nimport { ManageAssetsLists } from \"popup/views/ManageAssetsLists\";\nimport { ImportAccount } from \"popup/views/AddAccount/ImportAccount\";\nimport { SelectHardwareWallet } from \"popup/views/AddAccount/connect/SelectHardwareWallet\";\nimport { PluginWallet } from \"popup/views/AddAccount/connect/PluginWallet\";\nimport { DeviceConnect } from \"popup/views/AddAccount/connect/DeviceConnect\";\nimport { GrantAccess } from \"popup/views/GrantAccess\";\nimport { MnemonicPhrase } from \"popup/views/MnemonicPhrase\";\nimport { FullscreenSuccessMessage } from \"popup/views/FullscreenSuccessMessage\";\nimport { RecoverAccount } from \"popup/views/RecoverAccount\";\nimport { SignTransaction } from \"popup/views/SignTransaction\";\nimport { SignAuthEntry } from \"popup/views/SignAuthEntry\";\nimport { UnlockAccount } from \"popup/views/UnlockAccount\";\nimport { Welcome } from \"popup/views/Welcome\";\nimport { DisplayBackupPhrase } from \"popup/views/DisplayBackupPhrase\";\nimport { Debug } from \"popup/views/Debug\";\nimport { IntegrationTest } from \"popup/views/IntegrationTest\";\nimport { ViewPublicKey } from \"popup/views/ViewPublicKey\";\nimport { Settings } from \"popup/views/Settings\";\nimport { Preferences } from \"popup/views/Preferences\";\nimport { Security } from \"popup/views/Security\";\nimport { AdvancedSettings } from \"popup/views/AdvancedSettings\";\nimport { About } from \"popup/views/About\";\nimport { SendPayment } from \"popup/views/SendPayment\";\nimport { ManageAssets } from \"popup/views/ManageAssets\";\nimport { VerifyAccount } from \"popup/views/VerifyAccount\";\nimport { Swap } from \"popup/views/Swap\";\nimport { ManageNetwork } from \"popup/views/ManageNetwork\";\nimport { LeaveFeedback } from \"popup/views/LeaveFeedback\";\nimport { AccountMigration } from \"popup/views/AccountMigration\";\n\nimport \"popup/metrics/views\";\nimport { DEV_SERVER } from \"@shared/constants/services\";\nimport { SettingsState } from \"@shared/api/types\";\n\nimport { SignMessage } from \"./views/SignMessage\";\nimport { ReviewAuth } from \"./views/ReviewAuth\";\n\nimport { View } from \"./basics/layout/View\";\nimport { BottomNav } from \"./components/BottomNav\";\nimport { useIsSwap } from \"./helpers/useIsSwap\";\n\nexport const PublicKeyRoute = (props: RouteProps) => {\n  const location = useLocation();\n  const applicationState = useSelector(applicationStateSelector);\n  const publicKey = useSelector(publicKeySelector);\n  const error = useSelector(authErrorSelector);\n\n  if (applicationState === APPLICATION_STATE.APPLICATION_ERROR) {\n    return <AppError>{error}</AppError>;\n  }\n\n  if (applicationState === APPLICATION_STATE.APPLICATION_LOADING) {\n    return null;\n  }\n\n  if (applicationState === APPLICATION_STATE.APPLICATION_STARTED) {\n    return (\n      <Redirect\n        to={{\n          pathname: \"/\",\n        }}\n      />\n    );\n  }\n  if (!publicKey) {\n    return (\n      <Redirect\n        to={{\n          pathname: ROUTES.unlockAccount,\n          search: location.search,\n          state: { from: location },\n        }}\n      />\n    );\n  }\n  return <Route {...props} />;\n};\n\nexport const PrivateKeyRoute = (props: RouteProps) => {\n  const location = useLocation();\n  const applicationState = useSelector(applicationStateSelector);\n  const hasPrivateKey = useSelector(hasPrivateKeySelector);\n  const error = useSelector(authErrorSelector);\n\n  if (applicationState === APPLICATION_STATE.APPLICATION_ERROR) {\n    return <AppError>{error}</AppError>;\n  }\n  if (applicationState === APPLICATION_STATE.APPLICATION_LOADING) {\n    return null;\n  }\n  if (!hasPrivateKey) {\n    return (\n      <Redirect\n        to={{\n          pathname: ROUTES.unlockAccount,\n          search: location.search,\n          state: { from: location },\n        }}\n      />\n    );\n  }\n  return <Route {...props} />;\n};\n\n/*\nWe don't know if the user is missing their public key because\na) it’s in the keystore in localstorage and it needs to be extracted or b) the account doesn’t exist at all.\nWe are checking for applicationState here to find out if the account doesn’t exist\nIf an account doesn't exist, go to the <Welcome /> page; otherwise, go to <UnlockAccount/>\n*/\n\nconst UnlockAccountRoute = (props: RouteProps) => {\n  const applicationState = useSelector(applicationStateSelector);\n\n  if (applicationState === APPLICATION_STATE.APPLICATION_STARTED) {\n    return (\n      <Redirect\n        to={{\n          pathname: \"/\",\n        }}\n      />\n    );\n  }\n  return <Route {...props} />;\n};\n\nexport const VerifiedAccountRoute = (props: RouteProps) => {\n  const location = useLocation();\n  const hasPrivateKey = useSelector(hasPrivateKeySelector);\n\n  if (!hasPrivateKey) {\n    return (\n      <Redirect\n        to={{\n          pathname: ROUTES.verifyAccount,\n          state: { from: location },\n        }}\n      />\n    );\n  }\n  return <Route {...props} />;\n};\n\nconst HomeRoute = () => {\n  const allAccounts = useSelector(allAccountsSelector);\n  const applicationState = useSelector(applicationStateSelector);\n  const publicKey = useSelector(publicKeySelector);\n  const error = useSelector(authErrorSelector);\n\n  if (applicationState === APPLICATION_STATE.APPLICATION_ERROR) {\n    return <AppError>{error}</AppError>;\n  }\n  if (applicationState === APPLICATION_STATE.APPLICATION_LOADING) {\n    return null;\n  }\n\n  if (!publicKey || !allAccounts.length) {\n    if (applicationState === APPLICATION_STATE.MNEMONIC_PHRASE_CONFIRMED) {\n      return <Redirect to={ROUTES.unlockAccount} />;\n    }\n\n    /*\n    We want to launch the extension in a new tab for a user still in the onboarding process.\n    In this particular case, open the tab if we are in the \"popup\" view.\n    */\n    if (window.innerWidth === POPUP_WIDTH) {\n      openTab(newTabHref(ROUTES.welcome));\n      window.close();\n    }\n    return <Welcome />;\n  }\n\n  switch (applicationState) {\n    case APPLICATION_STATE.MNEMONIC_PHRASE_CONFIRMED:\n      return <Redirect to={ROUTES.account} />;\n    case APPLICATION_STATE.PASSWORD_CREATED:\n    case APPLICATION_STATE.MNEMONIC_PHRASE_FAILED:\n      openTab(newTabHref(ROUTES.mnemonicPhrase));\n      return <Loading />;\n    default:\n      return <Welcome />;\n  }\n};\n\n// Broadcast to Redux when the route changes. We don't store location state, but\n// we do use the actions for metrics.\nconst RouteListener = () => {\n  const dispatch = useDispatch();\n  const location = useLocation();\n  const settingsState = useSelector(settingsStateSelector);\n\n  useEffect(() => {\n    if (settingsState === SettingsState.SUCCESS) {\n      dispatch(navigate(location));\n    }\n  }, [dispatch, location, settingsState]);\n\n  return null;\n};\n\nconst SHOW_NAV_ROUTES = [\n  ROUTES.account,\n  ROUTES.accountHistory,\n  ROUTES.settings,\n  ROUTES.connectWallet,\n  ROUTES.connectWalletPlugin,\n  ROUTES.swapSettings,\n  ROUTES.sendPaymentAmount,\n];\n\nconst NO_APP_LAYOUT_ROUTES = [\n  ROUTES.mnemonicPhrase,\n  ROUTES.mnemonicPhraseConfirmed,\n  ROUTES.accountCreator,\n  ROUTES.accountMigration,\n  ROUTES.recoverAccount,\n  ROUTES.recoverAccountSuccess,\n  ROUTES.welcome,\n];\n\nconst Outlet = () => {\n  const dispatch = useDispatch();\n  const location = useLocation();\n  const isSwap = useIsSwap();\n\n  const applicationState = useSelector(applicationStateSelector);\n  const networkDetails = useSelector(settingsNetworkDetailsSelector);\n  const settingsState = useSelector(settingsStateSelector);\n\n  useEffect(() => {\n    dispatch(loadAccount());\n    dispatch(loadSettings());\n  }, [dispatch]);\n\n  const showNav =\n    location.pathname &&\n    ((location.pathname === ROUTES.welcome &&\n      applicationState === APPLICATION_STATE.MNEMONIC_PHRASE_CONFIRMED) ||\n      SHOW_NAV_ROUTES.some((route) => location.pathname === route) ||\n      (isSwap && location.pathname !== ROUTES.unlockAccount));\n\n  const isAppLayout = NO_APP_LAYOUT_ROUTES.every(\n    (route) => route !== location.pathname,\n  );\n\n  const isLoadingSettings =\n    applicationState === APPLICATION_STATE.APPLICATION_LOADING ||\n    settingsState === SettingsState.LOADING ||\n    settingsState === SettingsState.IDLE ||\n    !networkDetails.network;\n\n  return (\n    <View isAppLayout={isAppLayout}>\n      {isLoadingSettings ? (\n        <Loading />\n      ) : (\n        <Switch>\n          <PublicKeyRoute exact path={ROUTES.account}>\n            <Account />\n          </PublicKeyRoute>\n          <PublicKeyRoute path={ROUTES.accountHistory}>\n            <AccountHistory />\n          </PublicKeyRoute>\n          <PublicKeyRoute path={ROUTES.addAccount}>\n            <AddAccount />\n          </PublicKeyRoute>\n          <PublicKeyRoute path={ROUTES.importAccount}>\n            <ImportAccount />\n          </PublicKeyRoute>\n          <PublicKeyRoute exact path={ROUTES.connectWallet}>\n            <SelectHardwareWallet />\n          </PublicKeyRoute>\n          <PublicKeyRoute path={ROUTES.connectWalletPlugin}>\n            <PluginWallet />\n          </PublicKeyRoute>\n          <PublicKeyRoute path={ROUTES.connectDevice}>\n            <DeviceConnect />\n          </PublicKeyRoute>\n          <PublicKeyRoute path={ROUTES.viewPublicKey}>\n            <ViewPublicKey />\n          </PublicKeyRoute>\n          <PublicKeyRoute path={ROUTES.signTransaction}>\n            <SignTransaction />\n          </PublicKeyRoute>\n          <PublicKeyRoute path={ROUTES.reviewAuthorization}>\n            <ReviewAuth />\n          </PublicKeyRoute>\n          <PublicKeyRoute path={ROUTES.signAuthEntry}>\n            <SignAuthEntry />\n          </PublicKeyRoute>\n          <PublicKeyRoute path={ROUTES.signMessage}>\n            <SignMessage />\n          </PublicKeyRoute>\n          <PublicKeyRoute path={ROUTES.displayBackupPhrase}>\n            <DisplayBackupPhrase />\n          </PublicKeyRoute>\n          <PublicKeyRoute path={ROUTES.grantAccess}>\n            <GrantAccess />\n          </PublicKeyRoute>\n          <PublicKeyRoute path={ROUTES.mnemonicPhrase}>\n            <MnemonicPhrase mnemonicPhrase=\"\" />\n          </PublicKeyRoute>\n          <PublicKeyRoute path={ROUTES.settings} exact>\n            <Settings />\n          </PublicKeyRoute>\n          <PublicKeyRoute path={ROUTES.preferences}>\n            <Preferences />\n          </PublicKeyRoute>\n          <PublicKeyRoute path={ROUTES.security}>\n            <Security />\n          </PublicKeyRoute>\n          <PublicKeyRoute path={ROUTES.about}>\n            <About />\n          </PublicKeyRoute>\n          <PublicKeyRoute path={ROUTES.leaveFeedback}>\n            <LeaveFeedback />\n          </PublicKeyRoute>\n          <UnlockAccountRoute path={ROUTES.unlockAccount}>\n            <UnlockAccount />\n          </UnlockAccountRoute>\n          <PublicKeyRoute path={ROUTES.mnemonicPhraseConfirmed}>\n            <FullscreenSuccessMessage />\n          </PublicKeyRoute>\n          <Route path={ROUTES.accountCreator}>\n            <AccountCreator />\n          </Route>\n          <Route path={ROUTES.recoverAccount}>\n            <RecoverAccount />\n          </Route>\n          <Route path={ROUTES.verifyAccount}>\n            <VerifyAccount />\n          </Route>\n          <PublicKeyRoute path={ROUTES.recoverAccountSuccess}>\n            <FullscreenSuccessMessage />\n          </PublicKeyRoute>\n          <PublicKeyRoute path={ROUTES.sendPayment}>\n            <SendPayment />\n          </PublicKeyRoute>\n          <PublicKeyRoute path={ROUTES.manageAssets}>\n            <ManageAssets />\n          </PublicKeyRoute>\n          <PublicKeyRoute path={ROUTES.swap}>\n            <Swap />\n          </PublicKeyRoute>\n          <PublicKeyRoute path={ROUTES.manageNetwork}>\n            <ManageNetwork />\n          </PublicKeyRoute>\n          <PublicKeyRoute path={ROUTES.manageConnectedApps}>\n            <ManageConnectedApps />\n          </PublicKeyRoute>\n          <PublicKeyRoute path={ROUTES.manageAssetsLists}>\n            <ManageAssetsLists />\n          </PublicKeyRoute>\n          <PublicKeyRoute path={ROUTES.accountMigration}>\n            <AccountMigration />\n          </PublicKeyRoute>\n          <PublicKeyRoute path={ROUTES.advancedSettings}>\n            <AdvancedSettings />\n          </PublicKeyRoute>\n\n          {DEV_SERVER && (\n            <>\n              <Route path={ROUTES.debug}>\n                <Debug />\n              </Route>\n              <Route path={ROUTES.integrationTest}>\n                <IntegrationTest />\n              </Route>\n            </>\n          )}\n          <HomeRoute />\n        </Switch>\n      )}\n      {showNav && <BottomNav />}\n    </View>\n  );\n};\n\nexport const Router = () => (\n  <HashRouter>\n    <RouteListener />\n    <Switch>\n      <Route path=\"/\" component={Outlet} />\n    </Switch>\n  </HashRouter>\n);\n","import React, { Suspense } from \"react\";\nimport { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport { combineReducers } from \"redux\";\nimport { Provider } from \"react-redux\";\n\nimport { metricsMiddleware } from \"helpers/metrics\";\n\nimport { reducer as auth } from \"popup/ducks/accountServices\";\nimport { reducer as settings } from \"popup/ducks/settings\";\nimport { reducer as transactionSubmission } from \"popup/ducks/transactionSubmission\";\nimport { reducer as tokenPaymentSimulation } from \"popup/ducks/token-payment\";\nimport { Loading } from \"popup/components/Loading\";\nimport { ErrorTracking } from \"popup/components/ErrorTracking\";\nimport { ErrorBoundary } from \"./components/ErrorBoundary\";\nimport { Router } from \"./Router\";\n\nimport \"./styles/global.scss\";\n\nconst rootReducer = combineReducers({\n  auth,\n  settings,\n  transactionSubmission,\n  tokenPaymentSimulation,\n});\nexport type AppState = ReturnType<typeof rootReducer>;\nexport const store = configureStore({\n  reducer: rootReducer,\n\n  middleware: [\n    ...getDefaultMiddleware({\n      serializableCheck: false,\n    }),\n  ].concat(metricsMiddleware<AppState>()),\n});\n\nexport type AppDispatch = typeof store.dispatch;\n\nexport const App = () => (\n  <ErrorBoundary>\n    <Provider store={store}>\n      <ErrorTracking />\n      <Suspense\n        fallback={\n          <div className=\"RouterLoading\">\n            <Loading />\n          </div>\n        }\n      >\n        <Router />\n      </Suspense>\n    </Provider>\n  </ErrorBoundary>\n);\n","import i18n, { CallbackError, ResourceKey } from \"i18next\";\nimport resourcesToBackend from \"i18next-resources-to-backend\";\nimport LanguageDetector from \"i18next-browser-languagedetector\";\nimport { initReactI18next } from \"react-i18next\";\n\ni18n\n  .use(\n    resourcesToBackend((language, namespace, callback) => {\n      import(`../locales/${language}/${namespace}.json`)\n        .then((resources) => {\n          callback(\n            null as CallbackError,\n            resources as boolean | ResourceKey | null | undefined,\n          );\n        })\n        .catch((error) => {\n          callback(\n            error as CallbackError,\n            null as boolean | ResourceKey | null | undefined,\n          );\n        });\n    }),\n  )\n  .use(LanguageDetector)\n  .use(initReactI18next)\n  .init({\n    fallbackLng: \"en\",\n  });\n\nexport default i18n;\n","import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { App } from \"./App\";\nimport \"popup/helpers/localizationConfig\";\n\n// Import global CSS from Stellar Design System\nimport \"@stellar/design-system/build/styles.min.css\";\n\n// eslint-disable-next-line react/jsx-filename-extension\nconst root = createRoot(document.getElementById(\"root\")!);\nroot.render(<App />);\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".js\";\n};","// This function allow to reference async chunks\n__webpack_require__.miniCssF = (chunkId) => {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t57: 0\n};\n\n__webpack_require__.f.j = (chunkId, promises) => {\n\t\t// JSONP chunk loading for javascript\n\t\tvar installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n\t\t\t// a Promise means \"currently loading\".\n\t\t\tif(installedChunkData) {\n\t\t\t\tpromises.push(installedChunkData[2]);\n\t\t\t} else {\n\t\t\t\tif(true) { // all chunks have JS\n\t\t\t\t\t// setup Promise in chunk cache\n\t\t\t\t\tvar promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));\n\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n\t\t\t\t\t// start chunk loading\n\t\t\t\t\tvar url = __webpack_require__.p + __webpack_require__.u(chunkId);\n\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n\t\t\t\t\tvar error = new Error();\n\t\t\t\t\tvar loadingEnded = (event) => {\n\t\t\t\t\t\tif(__webpack_require__.o(installedChunks, chunkId)) {\n\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n\t\t\t\t\t\t\tif(installedChunkData) {\n\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n\t\t\t\t\t\t\t\terror.type = errorType;\n\t\t\t\t\t\t\t\terror.request = realSrc;\n\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t__webpack_require__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n};\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = globalThis[\"webpackChunkextension\"] = globalThis[\"webpackChunkextension\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\n__webpack_require__.O(undefined, [142,244,176,466,813,312,795], () => (__webpack_require__(43665)))\nvar __webpack_exports__ = __webpack_require__.O(undefined, [142,244,176,466,813,312,795], () => (__webpack_require__(81051)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","leafPrototypes","getProto","inProgress","dataWebpackPrefix","map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","t","keys","Object","module","exports","METRICS_DATA","INDEXER_URL","NETWORKS","FRIENDBOT_URLS","NETWORK_URLS","NETWORK_NAMES","SOROBAN_RPC_URLS","PUBLIC","TESTNET","FUTURENET","MAINNET_NETWORK_DETAILS","network","networkName","PUBNET","networkUrl","networkPassphrase","Networks","sorobanRpcUrl","friendbotUrl","DEFAULT_NETWORKS","CUSTOM_NETWORK","getSdk","includes","isNextSdk","isCustomNetwork","networkDetails","getBalanceIdentifier","balance","asset_issuer","asset_type","asset_code","liquidity_pool_id","defaultBlockaidScanAssetResult","address","chain","attack_types","fees","malicious_score","metadata","financial_stats","trading_limits","result_type","features","description","feature_id","type","simulateTx","async","tx","server","simulatedTX","simulateTransaction","undefined","result","scValToNative","retval","buildSorobanServer","serverUrl","SorobanRpc","Server","allowHttp","startsWith","getNewTxBuilder","publicKey","fee","BASE_FEE","Sdk","sourceAccount","getAccount","TransactionBuilder","SorobanRpcNotSupportedError","message","getDecimals","contractId","builder","contract","Contract","addOperation","call","setTimeout","TimeoutInfinite","build","getName","getSymbol","TOKEN_SPEC_DEFINITIONS","$schema","definitions","U32","minimum","maximum","I32","U64","pattern","minLength","maxLength","I64","U128","I128","U256","I256","Address","format","ScString","ScSymbol","DataUrl","initialize","properties","args","additionalProperties","admin","$ref","decimal","name","symbol","required","mint","to","amount","set_admin","new_admin","allowance","from","spender","approve","expiration_ledger","transfer","transfer_from","burn","burn_from","decimals","AllowanceDataKey","AllowanceValue","DataKey","oneOf","title","tag","values","items","TokenMetadata","getLedgerEntries","entryKey","rpcUrl","Date","getDate","requestBody","jsonrpc","method","params","res","fetch","headers","body","JSON","stringify","json","ok","getContractSpec","contractDataKey","xdr","LedgerKey","contractData","LedgerKeyContractData","toScAddress","key","ScVal","scvLedgerKeyContractInstance","durability","ContractDataDurability","persistent","toXDR","getLedgerKeyContractCode","error","entries","length","wasmId","contractLedgerEntryData","contractCodeWasmHash","LedgerEntryData","fromXDR","val","instance","executable","wasmHash","contractCode","LedgerKeyContractCode","hash","getLedgerKeyWasmId","wasmError","wasmResult","wasmEntries","xdrContents","wasmBuffer","wasmModule","WebAssembly","compile","reader","XdrReader","Buffer","Module","customSections","specs","push","ScSpecEntry","read","eof","Spec","jsonSchema","parseWasmXdr","ActionStatus","AccountType","SettingsState","EXTERNAL_SERVICE_TYPES","SERVICE_TYPES","APPLICATION_STATE","msg","sendMessage","getIsAllowHttp","stellarSdkServer","Horizon","submitTx","submittedTx","submitTransaction","response","status","getIconUrlFromIssuer","iconUrl","assetCanonical","GET_CACHED_ASSET_ICON","console","StrKey","isValidEd25519PublicKey","loadAccount","home_domain","homeDomain","toml","StellarToml","Resolver","CURRENCIES","every","currencyCode","issuer","image","CACHE_ASSET_ICON","getDomainFromIssuer","assetDomain","GET_CACHED_ASSET_DOMAIN","CACHE_ASSET_DOMAIN","GetTxStatus","Api","GetTransactionStatus","SUCCESS","NOT_FOUND","getAccountInfo","FAILED","account","signerArr","records","accounts","forSigner","isSigner","contractIds","getTokenIds","url","URL","searchParams","append","href","data","_err","statusText","horizon","soroban","formattedBalances","balanceIds","balanceKey","balances","available","total","_","assetId","split","getSorobanTokenBalance","txBuilders","balanceParams","getBalance","getAccountBalancesStandalone","isMainnet","isFunded","subentryCount","accountSummary","accountId","displayableBalances","accountDetails","subentry_count","num_sponsored","num_sponsoring","blockaidScanResults","balanceId","replace","results","i","identifier","sellingLiabilities","buyingLiabilities","selling_liabilities","toString","minus","buying_liabilities","native","token","minimumBalance","plus","times","blockaidData","liquidityPoolBalance","liquidityPoolId","limit","assetBalance","assetSponsor","sponsor","makeDisplayableBalances","resp","sponsoredCount","sponsoringCount","inflationDestination","inflation_destination","thresholds","signers","flags","sequenceNumber","sequence","k","v","lp","liquidityPools","reserves","tokenIdList","tokenBalances","toScVal","tokenId","rest","spec","getIsTokenSpec","getAccountHistory","operations","forAccount","order","join","getIndexerAccountHistory","getTokenDetails","REJECT_ACCESS","password","mnemonicPhrase","SHOW_BACKUP_PHRASE","GET_TOKEN_IDS","SorobanTokenInterface","DEFAULT_ASSETS_LISTS","isEnabled","SOROBAN_OPERATION_TYPES","getAssetDecimals","asset","isToken","Number","getTokenBalance","tokenBalance","formatTokenAmount","formatted","shiftedBy","toFixed","substring","endsWith","parseTokenAmount","value","comps","whole","fraction","wholeValue","fractionValue","addressToString","switch","encodeEd25519PublicKey","ed25519","encodeContract","getAttrsFromSorobanHorizonOp","operation","isSorobanOp","_op","transaction_attr","fnName","hostFn","func","invokeContract","invokedContract","contractAddress","functionName","opArgs","BigInt","getArgsForTokenInvocation","getTokenInvocationArgs","envelope_xdr","isContractId","decodeContract","root","fn","function","output","inner","_inner","source","fromScAddress","arg","exec","preimage","contractIdPreimage","details","fromAddress","wasm","salt","v2Args","constructorArgs","Asset","fromOperation","fromAsset","invocations","subInvocations","scValByType","scVal","ScValType","scvAddress","scvBool","b","scvBytes","bytes","toJSON","d","padStart","scvContractInstance","scvError","scvTimepoint","scvDuration","scvI128","scvI256","scvI32","scvI64","scvU128","scvU256","scvU32","scvU64","scvLedgerKeyNonce","nonceKey","nonce","scvVec","scvMap","scvString","scvSymbol","constructor","scvVoid","isInvocationArg","invocation","sortBalances","sorobanBalances","collection","lpBalances","_sorobanBalances","forEach","unshift","concat","getIsPayment","HorizonApi","OperationResponseType","payment","pathPayment","pathPaymentStrictSend","getIsSwap","type_i","source_account","getStellarExpertUrl","isTestnet","getRawBalance","accountBalances","find","isHttpAllowed","isValid","displaySorobanId","fullStr","strLen","separator","charsToShow","frontChars","Math","ceil","backChars","floor","isSorobanIssuer","encodeObject","obj","btoa","unescape","encodeURIComponent","decodeString","str","decodeURIComponent","escape","atob","newTabHref","path","queryParams","parsedSearchParam","param","decodedSearchParam","parse","getUrlHostname","hostname","getUrlDomain","u","charCount","slice","truncatedPublicKey","truncatedFedAddress","addr","indexOf","domain","truncatedPoolId","poolId","getTransactionInfo","search","accountToSign","transaction","transactionXdr","isDomainListedAllowed","flaggedKeys","tab","isHttpsDomain","_operations","operationTypes","domainTitle","getAssetFromCanonical","canonical","getCanonicalFromAsset","assetCode","assetIssuer","stroopToXlm","stroops","dividedBy","xlmToStroop","lumens","round","formatDomain","isMuxedAccount","isFederationAddress","isActiveNetwork","networkA","networkB","settingsInitialState","allowList","isDataSharingAllowed","networksList","isMemoValidationEnabled","isHideDustEnabled","experimentalFeaturesInitialState","isExperimentalModeEnabled","isHashSigningEnabled","isNonSSLEnabled","experimentalFeaturesState","IDLE","indexerInitialState","settingsState","isSorobanPublicEnabled","isRpcHealthy","userNotification","enabled","initialState","assetsLists","LOAD_SETTINGS","thunkApi","SAVE_ALLOWLIST","rejectWithValue","errorMessage","SAVE_SETTINGS","SAVE_EXPERIMENTAL_FEATURES","saveExperimentalFeatures","CHANGE_NETWORK","ADD_CUSTOM_NETWORK","REMOVE_CUSTOM_NETWORK","networkIndex","EDIT_CUSTOM_NETWORK","assetsList","ADD_ASSETS_LIST","addAssetsList","isDeleteAssetsList","MODIFY_ASSETS_LIST","modifyAssetsList","settingsSlice","reducers","clearSettingsError","state","extraReducers","addCase","fulfilled","action","payload","pending","LOADING","indexerState","rejected","ERROR","reducer","actions","settingsSelector","settings","settingsDataSharingSelector","settingsExperimentalModeSelector","settingsSorobanSupportedSelector","settingsNetworkDetailsSelector","settingsNetworksListSelector","settingsErrorSelector","settingsStateSelector","isNonSSLEnabledSelector","handlersLookup","registerHandler","actionType","handler","cache","uploadMetrics","toUpload","amplitudeFetchRes","api_key","events","amplitudeFetchResJson","getUserId","storedId","localStorage","getItem","newId","random","setItem","emitMetric","store","getState","metricsData","event_type","event_properties","user_id","device_id","window","navigator","userAgent","freighter_account_funded","freighterFunded","hw_connected","hwExists","secret_key_account","importedExists","secret_key_account_funded","importedFunded","WalletType","allAccounts","hasPrivateKey","CREATE_ACCOUNT","FUND_ACCOUNT","ADD_ACCOUNT","privateKey","IMPORT_ACCOUNT","hardwareWalletType","bipPath","_publicKey","_bipPath","IMPORT_HARDWARE_WALLET","log","MAKE_ACCOUNT_ACTIVE","authSelector","storeAccountMetricsData","accountName","UPDATE_ACCOUNT_NAME","LOAD_LAST_USED_ACCOUNT","loadLastUsedAccount","recoverMnemonic","RECOVER_ACCOUNT","phrase","isCorrectPhrase","applicationState","MNEMONIC_PHRASE_FAILED","mnemonicPhraseToConfirm","PASSWORD_CREATED","CONFIRM_MNEMONIC_PHRASE","MNEMONIC_PHRASE_CONFIRMED","CONFIRM_MIGRATED_MNEMONIC_PHRASE","confirmMigratedMnemonicPhrase","CONFIRM_PASSWORD","accountType","FREIGHTER","acc","imported","HW","IMPORTED","_arg","LOAD_ACCOUNT","SIGN_OUT","ADD_TOKEN_ID","addTokenId","balancesToMigrate","isMergeSelected","recommendedFee","migratedAccounts","MIGRATE_ACCOUNTS","migrateAccounts","APPLICATION_LOADING","connectingWalletType","NONE","accountStatus","authSlice","clearApiError","setConnectingWalletType","PENDING","APPLICATION_STARTED","APPLICATION_ERROR","_state","auth","hasPrivateKeySelector","allAccountsSelector","applicationStateSelector","authErrorSelector","publicKeySelector","bipPathSelector","migratedAccountsSelector","accountNameSelector","accountPublicKey","hardwareWalletTypeSelector","accountStatusSelector","METRIC_NAMES","cleanAmount","s","preserveCursor","previousVal","cleanedVal","Intl","NumberFormat","style","previousCommas","match","newCommas","commaDiff","abs","cleanedDiff","formatAmountPreserveCursor","staleVal","cursorPosition","cleaned","parts","uncleanedCurrentAmount","afterDotCleanedDiff","newCursor","_commaDiff","_cleanDiff","formatAmount","wholeVal","remainderVal","formattedWholeVal","formattedBuffer","toUpperCase","scrubPathGkey","route","base","slug","end","createWalletConnection","LEDGER","transport","TransportWebUSB","request","ledgerApi","getPublicKey","rawPublicKey","getWalletPublicKey","create","hardwareSign","signature","signHash","signTransaction","signatureBase","hardwareSignAuth","signSorobanAuthorization","walletAssets","logo","pluginWalletInfo","instruction","link","text","parseWalletError","err","transactionXDR","signedTransaction","SIGN_FREIGHTER_TRANSACTION","SIGN_FREIGHTER_SOROBAN_TRANSACTION","signedXDR","txRes","dispatch","getAccountBalances","options","signed_xdr","network_url","network_passphrase","sendTransaction","errorResult","txResponse","getTransaction","signWithHardwareWallet","walletType","isSignSorobanAuthorization","keypair","Keypair","fromPublicKey","decoratedSignature","DecoratedSignature","hint","signatureHint","signatures","ADD_RECENT_ADDRESS","LOAD_RECENT_ADDRESSES","REMOVE_TOKEN_ID","accountFunded","hwFunded","unfundedFreighterAccounts","idx","splice","storeBalanceMetricData","getDestinationBalances","assetIcons","icon","balanceValues","assetDomains","tokenData","assets","getSoroswapTokens","getBestPath","sourceAsset","destAsset","strictSendPaths","horizonGetBestPath","getBestSoroswapPath","sourceContract","destContract","sourceTokenDetails","destTokenDetails","sourceToken","destToken","router","getPairsFns","protocol","SOROSWAP","PHOENIX","pairsCacheInSeconds","protocols","maxHops","parsedAmount","currencyAmount","fromRawAmount","toNumber","quoteCurrency","EXACT_INPUT","trade","amountIn","amountInDecimals","amountOutMin","amountOutDecimals","soroswapGetBestPath","GET_MEMO_REQUIRED_ACCOUNTS","memoRequiredAccounts","ShowOverlayStatus","AssetSelectType","submitStatus","accountBalanceStatus","destinationAccountBalanceStatus","transactionData","destination","federationAddress","transactionFee","transactionTimeout","memo","destinationAsset","destinationAmount","destinationIcon","allowedSlippage","isSoroswap","transactionSimulation","preparedTransaction","hardwareWalletData","shouldSubmit","destinationBalances","soroswapTokens","assetSelect","MANAGE","isSource","transactionSubmissionSlice","resetSubmission","resetAccountBalanceStatus","resetDestinationAmount","resetSubmitStatus","saveDestination","saveFederationAddress","saveAmount","saveAsset","saveTransactionFee","saveTransactionTimeout","saveMemo","saveDestinationAsset","saveDestinationIcon","saveIsSoroswap","saveAllowedSlippage","saveIsToken","saveSimulation","startHwConnect","IN_PROGRESS","startHwSign","closeHwOverlay","saveAssetSelectType","saveAssetSelectSource","saveIsMergeSelected","saveBalancesToMigrate","p","destination_amount","destinationDecimals","transactionSubmissionSelector","transactionSubmission","transactionDataSelector","isPathPaymentSelector","tokensSelector","simulateTokenPayment","addMemo","Memo","XdrLargeInt","toI128","simulationTransaction","assembleTransaction","pub_key","simulateTokenTransfer","simulationResponse","simulateSwap","amountOut","sorobanServer","routerRes","routerAddress","timebounds","minTime","maxTime","parsedAmountIn","parsedAmountOut","mappedPath","swapParams","nativeToScVal","now","contractOperation","builtTx","isSimulationError","buildAndSimulateSoroswapTx","simulation","simStatus","tokenPaymentsSimulationSlice","resetSimulation","tokenSimulationSelector","tokenPaymentSimulation","tokenSimulationStatusSelector","BackButton","customBackAction","customBackIcon","hasBackCopy","customButtonComponent","history","handleClick","goBack","onClick","className","ArrowLeft","addStyleClasses","classes","filter","Boolean","ViewContext","createContext","isAppLayout","ViewInset","children","isWide","isInline","alignment","hasVerticalBorder","hasTopBorder","additionalClassName","hasScrollShadow","hasNoTopPadding","hasNoBottomPadding","props","View","Provider","Header","alt","src","AppHeader","leftContent","rightContent","centerContent","pageTitle","pageSubtitle","hasBackButton","as","size","role","Content","contentFooter","useContext","Footer","customHeight","customGap","hasExtraPaddingBottom","allowWrap","customStyle","Inset","Loading","ErrorTracking","dsn","release","integrations","tracesSampleRate","denyUrls","beforeSend","event","scrubbedUrl","ErrorBoundary","Component","getDerivedStateFromError","hasError","super","this","errorString","componentDidCatch","info","setState","componentStack","render","UnhandledError","isFullWidth","variant","open","close","navigateTo","pathname","openTab","ROUTES","location","AppError","useIsSwap","useIsSoroswapEnabled","useScanTx","setData","useState","setError","isLoading","setLoading","scanTx","fetchJson","get","content","scanAsset","useScanAsset","scannedAssetStatus","setScannedAssetStatus","useEffect","scannedAsset","fetchScanAssetStatus","isAssetSuspicious","isTxSuspicious","validation","isBlockaidWarning","resultType","ScamAssetIcon","isScamAsset","_path","_extends","assign","bind","n","arguments","r","hasOwnProperty","apply","xmlns","width","height","fill","fillOpacity","_rect","_circle","viewBox","rx","cx","cy","stroke","getIsXlm","SorobanTokenIcon","noMargin","AssetIcon","issuerKey","retryAssetIconFetch","isLPShare","isSorobanToken","isSuspicious","isModal","isXlm","isFetchingAssetIcons","setHasError","setIsLoading","canonicalAsset","imgSrc","_isSorobanToken","soroswapTokenDetail","onError","onLoad","AccountAssets","inputAssetIcons","sortedBalances","setSelectedAsset","setAssetIcons","hasIconFetchRetried","setHasIconFetchRetried","newAssetIcons","rb","amountUnit","isLP","assetA","assetB","getLPShareCode","amountVal","LoadingBackground","isActive","isOpaque","isClear","isFullScreen","IdenticonImg","toDataURL","AccountListIdenticon","active","displayKey","setIsDropdownOpen","shortPublicKey","OptionTag","AccountListItem","isSelected","Check","AccountList","AccountHeaderModal","isDropdownOpen","dropdownRef","useRef","current","maxHeight","ref","DEFAULT_NETWORK_COLORS","CUSTOM_NETWORK_COLORS","getNetworkColor","index","NetworkIcon","AccountHeader","currentAccountName","isNetworkSelectorOpen","setIsNetworkSelectorOpen","networksModalHeight","activeNetworkIndex","findIndex","addAccount","header","cta","PlusCircle","ChevronRight","importAccount","Key01","connectWallet","ShieldPlus","addNetwork","BookmarkAdd","networkSettings","Settings01","DropdownModal","viewPublicKey","QrCode01","manageConnectedApps","Coins03","manageAssets","Link01","Expand04","AccountOptionsDropdown","showBorder","DotsHorizontal","createPortal","document","querySelector","useAssetDomain","networkDomain","setNetworkDomain","fetchAssetDomain","OPERATION_TYPES","TRANSACTION_WARNING","CLAIM_PREDICATES","FLAG_TYPES","capitalize","charAt","historyItemDetailViewProps","headerTitle","isCreateExternalAccount","isPayment","isRecipient","isSwap","operationText","externalUrl","setIsDetailViewShowing","HistoryItem","setDetailViewProps","created_at","createdAt","starting_balance","startingBalance","typeI","operation_count","operationCount","sourceAssetCode","source_asset_code","operationType","operationString","date","toDateString","srcAssetCode","destAssetCode","isInvokeHostFn","transactionDetailPropsBase","txDetails","setTxDetails","dateText","setDateText","rowText","setRowText","IconComponent","setIconComponent","RefreshCcw01","BodyComponent","setBodyComponent","translations","useCallback","_isRecipient","paymentDifference","ArrowDown","ArrowUp","_dateText","attrs","tokenKey","matchesIssuer","sacAddress","getBalanceByKey","isRecieving","formattedTokenAmount","tokenDetailsResponse","_token","buildHistoryItem","HistoryList","assetDetail","CopyValue","displayValue","textToCopy","Copy01","AssetNetworkInfo","assetType","networkIconUrl","setNetworkIconUrl","fetchIconUrl","KeyIdenticon","isCopyAllowed","isSmall","customSize","keyTruncationAmount","iconSide","marginRight","marginLeft","padding","dimension","SubviewHeader","subtitle","rightButton","TransactionDetail","fee_charged","feeCharged","createdAtDateInstance","createdAtLocalStrArr","toLocaleString","createdAtTime","createdAtDateStr","identiconDimensions","assetError","showContent","isMalicious","SlideupModal","isModalOpen","setIsModalOpen","slideupModalRef","slideupModalHeight","setSlideupModalHeight","clientHeight","bottom","PunycodedDomain","isRow","punycodedDomain","isDomainValid","favicon","getSiteFavicon","PillCopy","pillType","ModalInfo","cardClasses","Malicious","DomainScanModalInfo","subject","scanStatus","BlockAidSiteScanLabel","NetworkCongestion","useNetworkFees","setRecommendedFee","networkCongestion","setNetworkCongestion","max_fee","maxFee","ledger_capacity_usage","ledgerCapacityUsage","feeStats","ledgerCapacityUsageNum","mode","MEDIUM","HIGH","LOW","fullscreenClassname","FullscreenStyle","bodyHtmlSelector","querySelectorAll","el","classList","add","remove","defaultStellarBipPath","PluginWallet","URLSearchParams","setBipPath","useDefault","setUseDefault","pluginWalletInfoSection","rel","target","fieldSize","autoComplete","onChange","defaultChecked","label","connectDevice","WalletErrorBlock","DeviceConnect","isDetecting","setIsDetecting","walletConnectSuccessful","setWalletConnectSuccessful","connectError","setConnectError","HardwareSign","hardwareConnectSuccessful","setHardwareConnectSuccessful","hardwareWalletIsSigning","setHardwareWalletIsSigning","isDetectBtnDirty","setIsDetectBtnDirty","closeOverlay","hardwareConnectRef","handleSign","submitResp","signedPayload","HANDLE_SIGNED_HW_PAYLOAD","XClose","getManageAssetXDR","addTrustline","changeParams","Operation","changeTrust","RESULT_CODES","getResultCodes","txError","TRUSTLINE_ERROR_STATES","RenderedError","errorState","resultCodes","NOT_ENOUGH_LUMENS","ASSET_HAS_BALANCE","ASSET_HAS_BUYING_LIABILITIES","UNKNOWN_ERROR","TrustlineError","handleClose","setAssetBalance","setBuyingLiabilities","isModalShowing","setIsModalShowing","xdrEnvelope","extras","parsedTx","op","line","op_invalid_limit","op_low_reserve","mapErrorToErrorState","ManageAssetRowButton","isTrustlineActive","isActionPending","isContract","isVerificationInfoShowing","isVerifiedToken","assetSubmitting","setAssetSubmitting","setShowBlockedDomainWarning","setSuspiciousAssetData","setShowNewAssetWarning","setNewAssetFlags","setShowUnverifiedWarning","setHandleAddToken","rowButtonShowing","setRowButtonShowing","isTrustlineErrorShowing","setIsTrustlineErrorShowing","isSigningWithHardwareWallet","setIsSigningWithHardwareWallet","isHardwareWallet","ManageAssetRowDropdownRef","changeTrustline","successfulCallback","trackChangeTrustline","signAndSubmit","handleRowClick","assetRowData","isRevocable","forCode","forIssuer","auth_revocable","isInvalidDomain","found","c","checkForSuspiciousAsset","handleTokenRowClick","addSac","addToken","disabled","ManageAssetRows","assetRows","verifiedLists","hwStatus","showBlockedDomainWarning","showNewAssetWarning","showUnverifiedWarning","newAssetFlags","suspiciousAssetData","handleAddToken","ScamAssetWarning","onClose","NewAssetWarning","TokenWarning","some","ManageAssetRow","truncatedAssetCode","schemaValidatedAssetList","assetListJson","schemaRes","schemaResJson","validatedList","errors","getNativeContractDetails","NATIVE_CONTRACT_DEFAULTS","org","getVerifiedTokens","setIsSearching","networkLists","promiseArr","nativeContract","networkList","fetchAndParse","promiseRes","allSettled","verifiedTokens","verifiedToken","list","tokens","record","regex","RegExp","WarningMessageVariant","WarningMessageHeader","WarningMessage","handleCloseClick","isWarningActive","setIsWarningActive","WarningInfoBlock","headerChildren","InfoOctagon","InfoCircle","MemoWarningMessage","isMemoRequired","highAlert","FlaggedWarningMessage","BlockaidAssetScanLabel","FirstTimeWarningMessage","warning","BackupPhraseWarningMessage","BlockaidByLine","BlockaidAssetWarning","isWarning","f","isSendWarning","onContinue","warningRef","isSubmitting","setIsSubmitting","timeout","clearTimeout","UnverifiedTokenNotification","marginBottom","User02","TransferWarning","transfers","WarningMessageTokenDetails","InvokerAuthWarning","UnverifiedTokenTransferWarning","isUnverifiedToken","setIsUnverifiedToken","j","fetchVerifiedTokens","default","isLoadingTokenDetails","setLoadingTokenDetails","tokenDetails","setTokenDetails","_tokenDetails","_getTokenDetails","SSLWarningMessage","Trans","BlockAidMaliciousLabel","BlockAidMissLabel","BlockaidTxScanLabel","scanResult","isPopup","BlockaidWarningModal","isAsset","isModalActive","setIsModalActive","word","AssetDetail","assetOperations","selectedAsset","isNative","isSorobanAsset","getIssuerFromBalance","balanceAvailable","availBalance","baseReserve","newBalance","getAvailableBalance","availableTotal","displayTotal","stellarExpertUrl","isDetailViewShowing","defaultDetailViewProps","detailViewProps","altText","sendPayment","swap","historyItemOperation","NotFundedMessage","canUseFriendbot","setIsAccountFriendbotFunded","initialValues","onSubmit","error_type","Account","isAccountFriendbotFunded","isSorobanSuported","setSortedBalances","setAssetOperations","isSoroswapEnabled","isFullscreenModeEnabled","innerHeight","innerWidth","assetOperationMap","bal","assetKey","source_asset_type","source_asset_issuer","getIsSupportedSorobanOp","sortOperationsByAsset","fetchAccountHistory","tooltipPlacement","doneLabel","Send01","RequestState","SELECTOR_OPTIONS","AccountHistory","getHistoryState","fetchData","useReducer","useGetHistory","selectedSegment","setSelectedSegment","ALL","historySegments","setHistorySegments","getData","segments","SENT","RECEIVED","isSorobanXfer","createAccount","isDustPayment","lte","historyOperation","createSegments","isLoaderShowing","hasEmptyHistory","option","min","matches","termsOfUse","Box","display","gridCellWidth","gapHorizontal","gapVertical","isFlexRow","Onboarding","layout","customWidth","OnboardingOneCol","OnboardingButtons","hasGoBackBtn","isNewTabSession","showBackButton","OnboardingModal","headerText","bodyText","weight","OnboardingError","placement","confirmPassword","PasswordForm","dirty","touched","handleSubmit","authError","field","autoFocus","placeholder","form","onKeyDown","setFieldValue","currentTarget","checked","LinkExternal01","CheckButton","wordKey","wordNumber","htmlFor","convertToWord","ConfirmMnemonicPhrase","isMigration","words","setWords","initialWordState","reduce","selectedWords","setSelectedWords","updatePhrase","prevState","currentArr","wordStateArr","handleSkip","joinSelectedWords","_values","formikHelpers","accountMigrationConfirmMigration","resetForm","handleChange","preventDefault","wordIndex","selectedWord","String","MnemonicDisplay","isPopupView","onCopy","randomNumber","randomWordArr","generateMnemonic","randomWord","generateMnemonicPhraseDisplay","DisplayMnemonicPhrase","setIsConfirmed","MnemonicPhrase","isConfirmed","mnemonicPhraseConfirmed","Lock01","Passcode","EyeOff","AlertCircle","AccountCreator","setMnemonicPhrase","AccountCreatorSchema","shape","validationSchema","EnterPassword","accountAddress","onConfirm","onCancel","confirmButtonTitle","cancelButtonTitle","titleLabel","descriptionLabel","confirmLabel","cancelLabel","addlClassName","onReset","isPassword","AddAccount","handleAddAccount","number_of_accounts","RemoveButton","ManageConnectedApps","allowedDomain","domainToRemove","allowListToSave","item","handleRemove","ListNavLink","fullHref","renderListNavLinkIcon","ListNavLinkWrapper","ASSETS_LISTS_NETWORKS","AssetListLink","assetList","manageAssetsListsModifyAssetList","provider","AssetLists","sortedAssetsListsData","handleSelectChange","selectedNetwork","networkValue","selected","DeleteModal","handleCancel","ModifyAssetList","assetsListsData","assetListUrl","fetchErrorString","setFetchErrorString","submitErrorString","setSubmitErrorString","assetListInfo","setAssetListInfo","isFetchingAssetList","setIsFetchingAssetList","isEditing","setIsEditing","isDefaultAssetList","setIsDefaultAssetList","isShowingDeleteModal","setIsShowingDeleteModal","defaultAssetsList","decodedAssetListUrl","assetsListsSelection","defaultUrl","handleEditAssetList","modifyAssetsListResp","manageAssetsLists","addAssetsListResp","enableReinitialize","setSubmitting","resJson","stack","toLowerCase","getNetworkName","handleSearch","handleIsEnabledChange","ManageAssetsLists","setSelectedNetwork","setAssetsListsData","setSortedAssetsListsData","listsArr","fetchLists","sortedList","PublicKeyRoute","exact","FormRows","ImportAccount","ImportAccountSchema","authorization","WalletOption","connectWalletPlugin","SelectHardwareWallet","_k","GRANT_ACCESS","SIGN_TRANSACTION","SIGN_BLOB","signEntry","SIGN_AUTH_ENTRY","rejectTransaction","rejectBlob","rejectAuthEntry","ModalWrapper","disableScrollXClass","ButtonsContainer","GrantAccess","isGranting","setIsGranting","scanSite","useScanSite","rejectAndClose","grantAndClose","is_malicious","FullscreenSuccessMessage","PuzzlePiece01","Pin01","Globe01","LockKeyholeSquare","PhraseInput","phraseInput","handleMnemonicInputChange","isTextShowing","isLongPhrase","inputValue","setInputValue","onPaste","buildMnemonicPhrase","mnemonicPhraseArr","trim","RecoverAccount","publicKeyRef","RecoverAccountSchema","setIsLongPhrase","setIsTextShowing","phraseInputs","setPhraseInputs","setMnemonicPhraseArr","setPassword","handleConfirm","recoverAccountSuccess","phraseInputsArr","PHRASE_LENGTH","arr","Eye","useSetupSigningFlow","reject","signFn","isConfirming","setIsConfirming","isPasswordRequired","setIsPasswordRequired","startedHwSign","setStartedHwSign","accountNotFound","setAccountNotFound","currentAccount","setCurrentAccount","defaultPublicKey","allAccountsMap","signAndClose","autoSelectedAccountDetails","handleApprove","verifyPasswordThenSign","confirmPasswordResp","VerifyAccount","isApproval","customSubmit","Tabs","activeTab","setActiveTab","tabs","Active","renderTab","mapMemoLabel","return","none","Summary","operationNames","opName","CodeCircle01","ParagraphSpacing","Percent03","ArrowSquareRight","CoinsHand","KeyValueList","operationKey","operationValue","KeyValueWithPublicKey","KeyValueSigner","signer","ed25519PublicKey","sha256Hash","preAuthTx","ed25519SignedPayload","KeyValueLine","getCode","KeyValueClaimants","claimants","claimPredicateValue","predicate","hideKey","andPredicates","absBefore","relBefore","not","notPredicate","orPredicates","claimant","KeyValueSignerKeyOptions","KeyValueInvokeHostFnArgs","argNames","setArgNames","argNamesPositional","getSpec","ind","KeyValueInvokeHostFn","hostfn","HostFunctionType","hostFunctionTypeCreateContractV2","hostFunctionTypeCreateContract","createContractArgs","createContract","argsV2","createContractV2","getCreateContractArgs","createV2Args","executableType","preimageFromAddress","preimageFromAsset","preimageValue","hostFunctionTypeInvokeContract","hostFunctionTypeUploadContractWasm","renderDetails","PathList","paths","MemoRequiredWarning","isDestMemoRequired","DestinationWarning","tags","memoRequired","Operations","AuthorizationMapToDisplay","RenderOpByType","sendAsset","scan","sendMax","destAmount","sendAmount","destMin","selling","buying","price","offerId","buyAmount","inflationDest","clearFlags","setFlags","masterWeight","lowThreshold","medThreshold","highThreshold","trustor","authorize","bumpTo","sponsoredId","authorized","authorizedToMaintainLiabilities","clawbackEnabled","maxAmountA","maxAmountB","maxPrice","minPrice","minAmountA","minAmountB","extendTo","seller","operationIndex","sourceVal","Details","Data","SignTransaction","hasAcceptedInsufficientFee","setHasAcceptedInsufficientFee","isLoadingScan","flaggedMalicious","_accountToSign","_fee","_networkPassphrase","isFeeBump","_memo","_sequence","decodedMemo","decodeMethod","buffer","decodeMemo","resolveFederatedAddress","inputDest","resolvedPublicKey","Federation","account_id","mAccount","MuxedAccount","baseAccount","decodeAccountToSign","isSubmitDisabled","hasLoadedBalances","hasBalance","hasEnoughXlm","gt","needsReviewAuth","ArrowsRight","_tx","renderTabBody","ChevronDown","reviewAuthorization","AuthEntry","preimageXdr","rootJson","HashIdPreimage","sorobanAuthorization","InvalidAuthEntry","SignAuthEntry","entryNetworkPassphrase","entry","UnlockAccount","setAccountAddress","lastUsedAccount","fetchLastUsedAccount","recoverAccount","accountCreator","Welcome","DisplayBackupPhrase","setErrorMessage","isPhraseUnlocked","setIsPhraseUnlocked","customInput","ViewPublicKey","isEditingName","setIsEditingName","EditNameButton","submitForm","Edit01","newAccountName","max","strokeLinecap","strokeLinejoin","strokeWidth","_g","_defs","clipPath","Settings","preferences","security","leaveFeedback","about","welcome","signOutAndClose","AutoSaveFields","debounceMs","formik","didSaveFail","setDidSaveFail","setValues","debouncedSubmit","ctx","Preferences","isValidatingMemoValue","isDataSharingAllowedValue","isHideDustEnabledValue","formValue","Security","displayBackupPhrase","advancedSettings","AdvancedSettingFeature","isToggled","toggleId","AdvancedSettings","isUnderstood","setIsUnderstood","isExperimentalModeEnabledValue","isHashSigningEnabledValue","isNonSSLEnabledValue","AboutLink","About","currentYear","getFullYear","AccountDoesntExistWarning","InvalidAddressWarning","SendTo","previous","recentAddresses","setRecentAddresses","validatedAddress","setValidatedAddress","fedAddress","setFedAddress","handleContinue","validatedDestination","validatedFedAdress","sendPaymentAmount","validateOnChange","validate","isValidPublicKey","isValidMed25519PublicKey","db","validateForm","fedResp","setErrors","AssetSelect","REGULAR","PathPayAssetSelect","truncateLongAssetCode","SWAP","PATH_PAY","TX_SEND_MAX","AMOUNT_ERROR","ConversionRate","sourceAmount","dest","loading","div","SendAmount","next","runAfterUpdate","afterPaintRef","useRunAfterUpdate","loadingRate","setLoadingRate","calculateAvailBalance","_availBalance","minBalance","lt","setAvailBalance","isDestAssetScam","TOO_HIGH","DEC_MAX","SEND_MAX","showSourceAndDestAsset","parsedSourceAsset","parsedDestAsset","formikAm","getContract","formAsset","defaultDestAsset","nonXlmAssets","sendPaymentType","Expand01","getAmountFontSize","input","newAmount","selectionStart","selectionEnd","assetID","shouldAccountDoesntExistWarning","InfoTooltip","infoText","triggerEl","PAYMENT_TYPES","RadioCheck","subtext","tooltipDetails","SendType","paymentType","PATH_PAYMENT","isPathPayment","isLoadingSimulation","setLoadingSimulation","isSendSacToContract","getSacContractAddress","baseFee","simulatedTx","minResourceFee","assetAddress","simResponse","setFee","handleTxFeeNav","swapSettingsFee","sendPaymentSettingsFee","handleSlippageNav","swapSettingsSlippage","sendPaymentSettingsSlippage","handleTimeoutNav","swapSettingsTimeout","sendPaymentSettingsTimeout","showMemo","showSlippage","SettingsFail","SendSettings","SendSettingsFee","isUnderline","isDisabled","SendSettingsSlippage","presetSlippage","customSlippage","FedOrGAddress","gAddress","SwapAssetsIcon","sourceCanon","destCanon","isSourceSuspicious","isDestSuspicious","ArrowRight","SubmitSuccess","viewDetails","isSourceAssetSuspicious","isDestAssetSuspicious","suggestRemoveTrustline","isZero","trackRemoveTrustline","removeTrustline","ArrowCircleDown","SubmitFail","errDetails","errorDetails","errorBlock","opError","tx_failed","httpCode","opErrors","tx_insufficient_fee","op_underfunded","op_no_destination","op_no_trust","op_under_dest_min","getErrorDetails","TwoAssetCard","sourceAssetIcons","destAssetIcons","computeDestMinWithSlippage","slippage","mult","parseFloat","TransactionDetails","shouldScanTx","submission","transactionHash","setDestAssetIcons","setTransactionXdr","_isMainnet","isValidatingMemo","matchingBlockedTags","flatMap","destAssetToScan","scannedDestAsset","iconURL","scanSorobanTx","opData","getOperation","getBuiltTx","scanClassicTx","isSuccess","cost","cpuInsns","memBytes","handleSorobanTransaction","handlePaymentTransaction","SendConfirm","isSendComplete","setIsSendComplete","accountHistory","SendSettingsTxTimeout","SendPayment","sendPaymentTo","sendPaymentSettings","sendPaymentConfirm","VerifiedAccountRoute","getAssetDomain","SelectAssetRows","hideBalances","otherAsset","getTokenBalanceFromCanonical","getAccountBalance","ChooseAsset","setAssetRows","ManageAssetRowsWrapperRef","isManagingAssets","nativeContractDetails","fetchDomains","searchAsset","SearchInput","rightElement","SearchLg","SearchCopy","SearchResults","isSearching","resultsRef","ResultsHeader","SearchAsset","hasNoResults","setHasNoResults","ResultsRef","assetRecords","getApiStellarExpertUrl","_embedded","assetSplit","test","tomlInfo","firstNullSuspiciousIndex","row","assetRowsAddendum","fetchBlockaidResults","addAsset","AssetNotifcation","isVerified","AddAsset","setIsVerifiedToken","setIsVerificationInfoShowing","setVerifiedLists","isAllowListVerificationEnabled","tokenLookup","isSacContract","ledgerKeyContractCode","getFootprint","ContractExecutableType","contractExecutableStellarAsset","isSacContractExecutable","handleTokenLookup","assetDomainToml","NETWORK_PASSPHRASE","assetsToScan","currency","scannedAssets","addressList","scanAssetBulk","scannedAssetRows","handleIssuerLookup","ManageAssets","PrivateKeyRoute","Swap","swapAmount","swapSettings","swapConfirm","PillButton","NetworkModal","buttonComponent","isConfirmation","NETWORK_INDEX_SEARCH_PARAM","NetworkForm","settingsError","isNetworkInUse","setIsNetworkInUse","isConfirmingRemoval","setIsConfirmingRemoval","isNetworkUrlValid","setIsNetworkUrlValid","invalidUrl","setInvalidUrl","networkDetailsToEdit","isCurrentNetworkActive","isEditingDefaultNetworks","isSwitchSelected","isAllowHttpSelected","NetworkFormSchema","showNetworkUrlInvalidModal","getCustomNetworkDetailsFromFormValues","CloseModalButton","ConfirmRemovalButtons","handleRemoveNetwork","EditingButtons","handleEditNetwork","addCustomNetworkRes","addCustomNetworkFulfilled","changeNetworkFulfilled","changeNetworkRes","handleAddNetwork","NetworkSettings","activeNetworkDetails","editNetwork","ManageNetwork","LeaveFeedback","MigrationHeader","MigrationBody","hasWarning","MigrationParagraph","MigrationButton","MigrationReviewHeader","MigrationReviewListSection","isUnfunded","MigrationReviewDetailRow","MigrationReviewHighlight","MigrationReviewDescription","highlight","MigrationReviewListHeader","MigrationReviewAccountInfo","MigrationReviewBadge","MigrationStart","accountMigrationReviewMigration","getMigrationFeeAmount","trustlineBalancesLength","opCount","AccountListItems","accountList","setIsSubmitDisabled","accountListItems","setAccountListItems","acctListItems","acct","acctIsReadyToMigrate","xlmBalance","dataEntries","calculateSenderMinBalance","isReadyToMigrate","trustlineBalances","trustlines","ReviewMigration","accountToMigrateList","setAccountToMigrateList","acctItemArr","hasUnmigratableAccount","migratableAccounts","GET_MIGRATABLE_ACCOUNTS","getMigratableAccounts","DEFAULT_ACCT_ITEM","keyIdIndex","acctItem","data_attr","fetchAccountData","ReviewMigrationFormSchema","migratableBalances","accountMigrationMnemonicPhrase","migratedMnemonicPhrase","GET_MIGRATED_MNEMONIC_PHRASE","getMigratedMnemonicPhrase","fetchMnemonicPhrase","ConfirmMigration","migrateAccountsRes","accountMigrationMigrationComplete","newPublicKey","isMigrated","MigrationComplete","AccountMigration","accountMigration","routeToEventName","signMessage","signAuthEntry","grantAccess","mnemonicPhraseConfirm","unlockAccount","verifyAccount","debug","integrationTest","manageNetwork","a","eventName","METRIC_OPTION_DOMAIN","subdomain","METRIC_OPTIONS","number_of_operations","Message","SignMessage","blobNetworkPassphrase","ReviewAuth","isLoadingAuth","setLoadingAuth","activeAuthEntryIndex","setActiveAuthEntryIndex","hasConfirmedAuth","setHasConfirmedAuth","authCount","isLastEntry","AuthDetail","authEntry","innerTransaction","TransferSummary","hasTokenDetails","ArrowCircleRight","ArrowCircleLeft","CurrencyDollarCircle","authTransfers","setAuthTransfers","isCheckingTransfers","setCheckingTransfers","rootInvocation","walkInvocationTree","inv","_invocation","contractFn","createContractV2HostFn","createContractHostFn","contractDetails","sacDetails","getInvocationArgs","getInvocationDetails","detail","createWasms","createSacs","isInvokeContract","rootJsonDepKey","subInvocation","getIsToken","transfersDepKey","credentials","SorobanCredentialsType","sorobanCredentialsSourceAccount","CodeSnippet01","BottomNavLink","activeClassName","BottomNav","Wallet03","ClockRewind","RefreshCcw05","UnlockAccountRoute","HomeRoute","RouteListener","SHOW_NAV_ROUTES","NO_APP_LAYOUT_ROUTES","Outlet","showNav","isLoadingSettings","Router","component","rootReducer","middleware","serializableCheck","language","namespace","callback","resources","catch","use","init","fallbackLng","getElementById","Suspense","fallback","__webpack_module_cache__","moduleId","cachedModule","loaded","__webpack_modules__","m","O","chunkIds","priority","notFulfilled","Infinity","getter","__esModule","getPrototypeOf","ns","def","getOwnPropertyNames","definition","defineProperty","enumerable","chunkId","all","promises","miniCssF","g","globalThis","Function","prop","prototype","l","done","script","needAttach","scripts","getElementsByTagName","getAttribute","createElement","charset","nc","setAttribute","onScriptComplete","prev","onerror","onload","doneFns","parentNode","removeChild","head","appendChild","Symbol","toStringTag","nmd","scriptUrl","importScripts","currentScript","tagName","installedChunks","installedChunkData","promise","errorType","realSrc","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","chunkLoadingGlobal","__webpack_exports__"],"sourceRoot":""}